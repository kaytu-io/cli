// ========== DO NOT EDIT THIS FILE! AUTO GENERATED!!! =========
package gen

import (
	"errors"
	"fmt"

	"github.com/kaytu-io/cli-program/cmd/flags"
	"github.com/kaytu-io/cli-program/pkg"
	"github.com/kaytu-io/cli-program/pkg/api/kaytu"
	"github.com/kaytu-io/cli-program/pkg/api/kaytu/client/inventory"
	"github.com/spf13/cobra"
)

var GetInventoryApiV2CostCompositionCmd = &cobra.Command{
	Use:   "cost-composition",
	Short: `This API allows users to retrieve the cost composition with respect to specified filters. The API returns information such as the total cost for the given time range, and the top services by cost.`,
	Long:  `This API allows users to retrieve the cost composition with respect to specified filters. The API returns information such as the total cost for the given time range, and the top services by cost.`,
	RunE: func(cmd *cobra.Command, args []string) error {
		client, auth, err := kaytu.GetKaytuAuthClient(cmd)
		if err != nil {
			if errors.Is(err, pkg.ExpiredSession) {
				fmt.Println(err.Error())
				return nil
			}
			return fmt.Errorf("[get_inventory_api_v_2_cost_composition] : %v", err)
		}

		req := inventory.NewGetInventoryAPIV2CostCompositionParams()

		req.SetConnectionGroup(flags.ReadStringOptionalFlag(cmd, "ConnectionGroup"))
		req.SetConnectionID(flags.ReadStringArrayFlag(cmd, "ConnectionID"))
		req.SetConnector(flags.ReadStringArrayFlag(cmd, "Connector"))
		req.SetEndTime(flags.ReadStringOptionalFlag(cmd, "EndTime"))
		req.SetStartTime(flags.ReadStringOptionalFlag(cmd, "StartTime"))
		req.SetTop(flags.ReadInt64OptionalFlag(cmd, "Top"))

		resp, err := client.Inventory.GetInventoryAPIV2CostComposition(req, auth)
		if err != nil {
			return fmt.Errorf("[get_inventory_api_v_2_cost_composition] : %v", err)
		}

		err = pkg.PrintOutput(cmd, "get-inventory-api-v2-cost-composition", resp.GetPayload())
		if err != nil {
			return fmt.Errorf("[get_inventory_api_v_2_cost_composition] : %v", err)
		}

		return nil
	},
}

var GetInventoryApiV2CostMetricCmd = &cobra.Command{
	Use:   "cost-metric",
	Short: `This API allows users to retrieve cost metrics with respect to specified filters. The API returns information such as the total cost and costs per each service based on the specified filters.`,
	Long:  `This API allows users to retrieve cost metrics with respect to specified filters. The API returns information such as the total cost and costs per each service based on the specified filters.`,
	RunE: func(cmd *cobra.Command, args []string) error {
		client, auth, err := kaytu.GetKaytuAuthClient(cmd)
		if err != nil {
			if errors.Is(err, pkg.ExpiredSession) {
				fmt.Println(err.Error())
				return nil
			}
			return fmt.Errorf("[get_inventory_api_v_2_cost_metric] : %v", err)
		}

		req := inventory.NewGetInventoryAPIV2CostMetricParams()

		req.SetConnectionGroup(flags.ReadStringOptionalFlag(cmd, "ConnectionGroup"))
		req.SetConnectionID(flags.ReadStringArrayFlag(cmd, "ConnectionID"))
		req.SetConnector(flags.ReadStringArrayFlag(cmd, "Connector"))
		req.SetEndTime(flags.ReadStringOptionalFlag(cmd, "EndTime"))
		req.SetPageNumber(flags.ReadInt64OptionalFlag(cmd, "PageNumber"))
		req.SetPageSize(flags.ReadInt64OptionalFlag(cmd, "PageSize"))
		req.SetSortBy(flags.ReadStringOptionalFlag(cmd, "SortBy"))
		req.SetStartTime(flags.ReadStringOptionalFlag(cmd, "StartTime"))

		resp, err := client.Inventory.GetInventoryAPIV2CostMetric(req, auth)
		if err != nil {
			return fmt.Errorf("[get_inventory_api_v_2_cost_metric] : %v", err)
		}

		err = pkg.PrintOutput(cmd, "get-inventory-api-v2-cost-metric", resp.GetPayload())
		if err != nil {
			return fmt.Errorf("[get_inventory_api_v_2_cost_metric] : %v", err)
		}

		return nil
	},
}

var GetInventoryApiV2CostTrendCmd = &cobra.Command{
	Use:   "cost-trend",
	Short: `This API allows users to retrieve a list of costs over the course of the specified time frame based on the given input filters. If startTime and endTime are empty, the API returns the last month trend.`,
	Long:  `This API allows users to retrieve a list of costs over the course of the specified time frame based on the given input filters. If startTime and endTime are empty, the API returns the last month trend.`,
	RunE: func(cmd *cobra.Command, args []string) error {
		client, auth, err := kaytu.GetKaytuAuthClient(cmd)
		if err != nil {
			if errors.Is(err, pkg.ExpiredSession) {
				fmt.Println(err.Error())
				return nil
			}
			return fmt.Errorf("[get_inventory_api_v_2_cost_trend] : %v", err)
		}

		req := inventory.NewGetInventoryAPIV2CostTrendParams()

		req.SetConnectionGroup(flags.ReadStringOptionalFlag(cmd, "ConnectionGroup"))
		req.SetConnectionID(flags.ReadStringArrayFlag(cmd, "ConnectionID"))
		req.SetConnector(flags.ReadStringArrayFlag(cmd, "Connector"))
		req.SetDatapointCount(flags.ReadStringOptionalFlag(cmd, "DatapointCount"))
		req.SetEndTime(flags.ReadStringOptionalFlag(cmd, "EndTime"))
		req.SetStartTime(flags.ReadStringOptionalFlag(cmd, "StartTime"))

		resp, err := client.Inventory.GetInventoryAPIV2CostTrend(req, auth)
		if err != nil {
			return fmt.Errorf("[get_inventory_api_v_2_cost_trend] : %v", err)
		}

		err = pkg.PrintOutput(cmd, "get-inventory-api-v2-cost-trend", resp.GetPayload())
		if err != nil {
			return fmt.Errorf("[get_inventory_api_v_2_cost_trend] : %v", err)
		}

		return nil
	},
}

var GetInventoryApiV2AnalyticsSpendCompositionCmd = &cobra.Command{
	Use:   "get-analytics-spend-composition",
	Short: `This API allows users to retrieve the cost composition with respect to specified filters. The API returns information such as the total cost for the given time range, and the top services by cost.`,
	Long:  `This API allows users to retrieve the cost composition with respect to specified filters. The API returns information such as the total cost for the given time range, and the top services by cost.`,
	RunE: func(cmd *cobra.Command, args []string) error {
		client, auth, err := kaytu.GetKaytuAuthClient(cmd)
		if err != nil {
			if errors.Is(err, pkg.ExpiredSession) {
				fmt.Println(err.Error())
				return nil
			}
			return fmt.Errorf("[get_inventory_api_v_2_analytics_spend_composition] : %v", err)
		}

		req := inventory.NewGetInventoryAPIV2AnalyticsSpendCompositionParams()

		req.SetConnectionGroup(flags.ReadStringOptionalFlag(cmd, "ConnectionGroup"))
		req.SetConnectionID(flags.ReadStringArrayFlag(cmd, "ConnectionID"))
		req.SetConnector(flags.ReadStringArrayFlag(cmd, "Connector"))
		req.SetEndTime(flags.ReadStringOptionalFlag(cmd, "EndTime"))
		req.SetStartTime(flags.ReadStringOptionalFlag(cmd, "StartTime"))
		req.SetTop(flags.ReadInt64OptionalFlag(cmd, "Top"))

		resp, err := client.Inventory.GetInventoryAPIV2AnalyticsSpendComposition(req, auth)
		if err != nil {
			return fmt.Errorf("[get_inventory_api_v_2_analytics_spend_composition] : %v", err)
		}

		err = pkg.PrintOutput(cmd, "get-inventory-api-v2-analytics-spend-composition", resp.GetPayload())
		if err != nil {
			return fmt.Errorf("[get_inventory_api_v_2_analytics_spend_composition] : %v", err)
		}

		return nil
	},
}

var GetInventoryApiV2AnalyticsSpendMetricCmd = &cobra.Command{
	Use:   "get-analytics-spend-metric",
	Short: `This API allows users to retrieve cost metrics with respect to specified filters. The API returns information such as the total cost and costs per each service based on the specified filters.`,
	Long:  `This API allows users to retrieve cost metrics with respect to specified filters. The API returns information such as the total cost and costs per each service based on the specified filters.`,
	RunE: func(cmd *cobra.Command, args []string) error {
		client, auth, err := kaytu.GetKaytuAuthClient(cmd)
		if err != nil {
			if errors.Is(err, pkg.ExpiredSession) {
				fmt.Println(err.Error())
				return nil
			}
			return fmt.Errorf("[get_inventory_api_v_2_analytics_spend_metric] : %v", err)
		}

		req := inventory.NewGetInventoryAPIV2AnalyticsSpendMetricParams()

		req.SetConnectionGroup(flags.ReadStringOptionalFlag(cmd, "ConnectionGroup"))
		req.SetConnectionID(flags.ReadStringArrayFlag(cmd, "ConnectionID"))
		req.SetConnector(flags.ReadStringArrayFlag(cmd, "Connector"))
		req.SetEndTime(flags.ReadStringOptionalFlag(cmd, "EndTime"))
		req.SetPageNumber(flags.ReadInt64OptionalFlag(cmd, "PageNumber"))
		req.SetPageSize(flags.ReadInt64OptionalFlag(cmd, "PageSize"))
		req.SetSortBy(flags.ReadStringOptionalFlag(cmd, "SortBy"))
		req.SetStartTime(flags.ReadStringOptionalFlag(cmd, "StartTime"))

		resp, err := client.Inventory.GetInventoryAPIV2AnalyticsSpendMetric(req, auth)
		if err != nil {
			return fmt.Errorf("[get_inventory_api_v_2_analytics_spend_metric] : %v", err)
		}

		err = pkg.PrintOutput(cmd, "get-inventory-api-v2-analytics-spend-metric", resp.GetPayload())
		if err != nil {
			return fmt.Errorf("[get_inventory_api_v_2_analytics_spend_metric] : %v", err)
		}

		return nil
	},
}

var GetInventoryApiV2AnalyticsSpendMetricsTrendCmd = &cobra.Command{
	Use:   "get-analytics-spend-metrics-trend",
	Short: `This API allows users to retrieve a list of costs over the course of the specified time frame based on the given input filters. If startTime and endTime are empty, the API returns the last month trend.`,
	Long:  `This API allows users to retrieve a list of costs over the course of the specified time frame based on the given input filters. If startTime and endTime are empty, the API returns the last month trend.`,
	RunE: func(cmd *cobra.Command, args []string) error {
		client, auth, err := kaytu.GetKaytuAuthClient(cmd)
		if err != nil {
			if errors.Is(err, pkg.ExpiredSession) {
				fmt.Println(err.Error())
				return nil
			}
			return fmt.Errorf("[get_inventory_api_v_2_analytics_spend_metrics_trend] : %v", err)
		}

		req := inventory.NewGetInventoryAPIV2AnalyticsSpendMetricsTrendParams()

		req.SetConnectionGroup(flags.ReadStringOptionalFlag(cmd, "ConnectionGroup"))
		req.SetConnectionID(flags.ReadStringArrayFlag(cmd, "ConnectionID"))
		req.SetConnector(flags.ReadStringArrayFlag(cmd, "Connector"))
		req.SetDatapointCount(flags.ReadStringOptionalFlag(cmd, "DatapointCount"))
		req.SetEndTime(flags.ReadStringOptionalFlag(cmd, "EndTime"))
		req.SetMetricIds(flags.ReadStringArrayFlag(cmd, "MetricIds"))
		req.SetStartTime(flags.ReadStringOptionalFlag(cmd, "StartTime"))

		resp, err := client.Inventory.GetInventoryAPIV2AnalyticsSpendMetricsTrend(req, auth)
		if err != nil {
			return fmt.Errorf("[get_inventory_api_v_2_analytics_spend_metrics_trend] : %v", err)
		}

		err = pkg.PrintOutput(cmd, "get-inventory-api-v2-analytics-spend-metrics-trend", resp.GetPayload())
		if err != nil {
			return fmt.Errorf("[get_inventory_api_v_2_analytics_spend_metrics_trend] : %v", err)
		}

		return nil
	},
}

var GetInventoryApiV2AnalyticsSpendTrendCmd = &cobra.Command{
	Use:   "get-analytics-spend-trend",
	Short: `This API allows users to retrieve a list of costs over the course of the specified time frame based on the given input filters. If startTime and endTime are empty, the API returns the last month trend.`,
	Long:  `This API allows users to retrieve a list of costs over the course of the specified time frame based on the given input filters. If startTime and endTime are empty, the API returns the last month trend.`,
	RunE: func(cmd *cobra.Command, args []string) error {
		client, auth, err := kaytu.GetKaytuAuthClient(cmd)
		if err != nil {
			if errors.Is(err, pkg.ExpiredSession) {
				fmt.Println(err.Error())
				return nil
			}
			return fmt.Errorf("[get_inventory_api_v_2_analytics_spend_trend] : %v", err)
		}

		req := inventory.NewGetInventoryAPIV2AnalyticsSpendTrendParams()

		req.SetConnectionGroup(flags.ReadStringOptionalFlag(cmd, "ConnectionGroup"))
		req.SetConnectionID(flags.ReadStringArrayFlag(cmd, "ConnectionID"))
		req.SetConnector(flags.ReadStringArrayFlag(cmd, "Connector"))
		req.SetDatapointCount(flags.ReadStringOptionalFlag(cmd, "DatapointCount"))
		req.SetEndTime(flags.ReadStringOptionalFlag(cmd, "EndTime"))
		req.SetMetricIds(flags.ReadStringArrayFlag(cmd, "MetricIds"))
		req.SetStartTime(flags.ReadStringOptionalFlag(cmd, "StartTime"))

		resp, err := client.Inventory.GetInventoryAPIV2AnalyticsSpendTrend(req, auth)
		if err != nil {
			return fmt.Errorf("[get_inventory_api_v_2_analytics_spend_trend] : %v", err)
		}

		err = pkg.PrintOutput(cmd, "get-inventory-api-v2-analytics-spend-trend", resp.GetPayload())
		if err != nil {
			return fmt.Errorf("[get_inventory_api_v_2_analytics_spend_trend] : %v", err)
		}

		return nil
	},
}

var GetInventoryApiV2ResourcesTagCmd = &cobra.Command{
	Use:   "list-resource-tags",
	Short: `This API allows users to retrieve a list of tag keys with their possible values for all resource types.`,
	Long:  `This API allows users to retrieve a list of tag keys with their possible values for all resource types.`,
	RunE: func(cmd *cobra.Command, args []string) error {
		client, auth, err := kaytu.GetKaytuAuthClient(cmd)
		if err != nil {
			if errors.Is(err, pkg.ExpiredSession) {
				fmt.Println(err.Error())
				return nil
			}
			return fmt.Errorf("[get_inventory_api_v_2_resources_tag] : %v", err)
		}

		req := inventory.NewGetInventoryAPIV2ResourcesTagParams()

		req.SetConnectionGroup(flags.ReadStringOptionalFlag(cmd, "ConnectionGroup"))
		req.SetConnectionID(flags.ReadStringArrayFlag(cmd, "ConnectionID"))
		req.SetConnector(flags.ReadStringArrayFlag(cmd, "Connector"))
		req.SetEndTime(flags.ReadInt64OptionalFlag(cmd, "EndTime"))
		req.SetMinCount(flags.ReadInt64OptionalFlag(cmd, "MinCount"))

		resp, err := client.Inventory.GetInventoryAPIV2ResourcesTag(req, auth)
		if err != nil {
			return fmt.Errorf("[get_inventory_api_v_2_resources_tag] : %v", err)
		}

		err = pkg.PrintOutput(cmd, "get-inventory-api-v2-resources-tag", resp.GetPayload())
		if err != nil {
			return fmt.Errorf("[get_inventory_api_v_2_resources_tag] : %v", err)
		}

		return nil
	},
}

var GetInventoryApiV2ResourcesMetricResourceTypeCmd = &cobra.Command{
	Use:   "resource-metrics",
	Short: `This API allows users to retrieve metrics for a specific resource type.`,
	Long:  `This API allows users to retrieve metrics for a specific resource type.`,
	RunE: func(cmd *cobra.Command, args []string) error {
		client, auth, err := kaytu.GetKaytuAuthClient(cmd)
		if err != nil {
			if errors.Is(err, pkg.ExpiredSession) {
				fmt.Println(err.Error())
				return nil
			}
			return fmt.Errorf("[get_inventory_api_v_2_resources_metric_resource_type] : %v", err)
		}

		req := inventory.NewGetInventoryAPIV2ResourcesMetricResourceTypeParams()

		req.SetConnectionGroup(flags.ReadStringOptionalFlag(cmd, "ConnectionGroup"))
		req.SetConnectionID(flags.ReadStringArrayFlag(cmd, "ConnectionID"))
		req.SetEndTime(flags.ReadStringOptionalFlag(cmd, "EndTime"))
		req.SetResourceType(flags.ReadStringFlag(cmd, "ResourceType"))
		req.SetStartTime(flags.ReadStringOptionalFlag(cmd, "StartTime"))

		resp, err := client.Inventory.GetInventoryAPIV2ResourcesMetricResourceType(req, auth)
		if err != nil {
			return fmt.Errorf("[get_inventory_api_v_2_resources_metric_resource_type] : %v", err)
		}

		err = pkg.PrintOutput(cmd, "get-inventory-api-v2-resources-metric-resource-type", resp.GetPayload())
		if err != nil {
			return fmt.Errorf("[get_inventory_api_v_2_resources_metric_resource_type] : %v", err)
		}

		return nil
	},
}

var GetInventoryApiV2ServicesCostTrendCmd = &cobra.Command{
	Use:   "service-cost-trend",
	Short: `This API allows users to retrieve a list of costs over the course of the specified time frame for the given services. If startTime and endTime are empty, the API returns the last month trend.`,
	Long:  `This API allows users to retrieve a list of costs over the course of the specified time frame for the given services. If startTime and endTime are empty, the API returns the last month trend.`,
	RunE: func(cmd *cobra.Command, args []string) error {
		client, auth, err := kaytu.GetKaytuAuthClient(cmd)
		if err != nil {
			if errors.Is(err, pkg.ExpiredSession) {
				fmt.Println(err.Error())
				return nil
			}
			return fmt.Errorf("[get_inventory_api_v_2_services_cost_trend] : %v", err)
		}

		req := inventory.NewGetInventoryAPIV2ServicesCostTrendParams()

		req.SetConnectionGroup(flags.ReadStringOptionalFlag(cmd, "ConnectionGroup"))
		req.SetConnectionID(flags.ReadStringArrayFlag(cmd, "ConnectionID"))
		req.SetConnector(flags.ReadStringArrayFlag(cmd, "Connector"))
		req.SetDatapointCount(flags.ReadStringOptionalFlag(cmd, "DatapointCount"))
		req.SetEndTime(flags.ReadStringOptionalFlag(cmd, "EndTime"))
		req.SetServices(flags.ReadStringArrayFlag(cmd, "Services"))
		req.SetStartTime(flags.ReadStringOptionalFlag(cmd, "StartTime"))

		resp, err := client.Inventory.GetInventoryAPIV2ServicesCostTrend(req, auth)
		if err != nil {
			return fmt.Errorf("[get_inventory_api_v_2_services_cost_trend] : %v", err)
		}

		err = pkg.PrintOutput(cmd, "get-inventory-api-v2-services-cost-trend", resp.GetPayload())
		if err != nil {
			return fmt.Errorf("[get_inventory_api_v_2_services_cost_trend] : %v", err)
		}

		return nil
	},
}
