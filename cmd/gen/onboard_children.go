// ========== DO NOT EDIT THIS FILE! AUTO GENERATED!!! =========
package gen

import (
	"errors"
	"fmt"

	"github.com/kaytu-io/cli-program/cmd/flags"
	"github.com/kaytu-io/cli-program/pkg"
	"github.com/kaytu-io/cli-program/pkg/api/kaytu"
	"github.com/kaytu-io/cli-program/pkg/api/kaytu/client/onboard"
	"github.com/kaytu-io/cli-program/pkg/api/kaytu/models"
	"github.com/spf13/cobra"
)

var PostOnboardApiV1CredentialCredentialIdAutoonboardCmd = &cobra.Command{
	Use:   "auto-onboard-credential",
	Short: `Onboard all available connections for a credential`,
	Long:  `Onboard all available connections for a credential`,
	RunE: func(cmd *cobra.Command, args []string) error {
		client, auth, err := kaytu.GetKaytuAuthClient(cmd)
		if err != nil {
			if errors.Is(err, pkg.ExpiredSession) {
				fmt.Println(err.Error())
				return nil
			}
			return fmt.Errorf("[post_onboard_api_v_1_credential_credential_id_autoonboard] : %v", err)
		}

		req := onboard.NewPostOnboardAPIV1CredentialCredentialIDAutoonboardParams()

		req.SetCredentialID(flags.ReadStringFlag(cmd, "CredentialID"))

		resp, err := client.Onboard.PostOnboardAPIV1CredentialCredentialIDAutoonboard(req, auth)
		if err != nil {
			return fmt.Errorf("[post_onboard_api_v_1_credential_credential_id_autoonboard] : %v", err)
		}

		err = pkg.PrintOutput(cmd, "post-onboard-api-v1-credential-credential-id-autoonboard", resp.GetPayload())
		if err != nil {
			return fmt.Errorf("[post_onboard_api_v_1_credential_credential_id_autoonboard] : %v", err)
		}

		return nil
	},
}

var PostOnboardApiV1SourceAwsCmd = &cobra.Command{
	Use:   "create-aws-source",
	Short: `Creating AWS source`,
	Long:  `Creating AWS source`,
	RunE: func(cmd *cobra.Command, args []string) error {
		client, auth, err := kaytu.GetKaytuAuthClient(cmd)
		if err != nil {
			if errors.Is(err, pkg.ExpiredSession) {
				fmt.Println(err.Error())
				return nil
			}
			return fmt.Errorf("[post_onboard_api_v_1_source_aws] : %v", err)
		}

		req := onboard.NewPostOnboardAPIV1SourceAwsParams()

		req.SetRequest(&models.GithubComKaytuIoKaytuEnginePkgOnboardAPISourceAwsRequest{
			Config: &models.GithubComKaytuIoKaytuEnginePkgOnboardAPIAWSCredentialConfig{
				AccessKey:            flags.ReadStringOptionalFlag(cmd, "Config-AccessKey"),
				AccountID:            flags.ReadStringFlag(cmd, "Config-AccountID"),
				AssumeRoleName:       flags.ReadStringFlag(cmd, "Config-AssumeRoleName"),
				AssumeRolePolicyName: flags.ReadStringFlag(cmd, "Config-AssumeRolePolicyName"),
				ExternalID:           flags.ReadStringFlag(cmd, "Config-ExternalID"),
				Regions:              flags.ReadStringArrayFlag(cmd, "Config-Regions"),
				SecretKey:            flags.ReadStringOptionalFlag(cmd, "Config-SecretKey"),
			},
			Description: flags.ReadStringFlag(cmd, "Description"),
			Email:       flags.ReadStringFlag(cmd, "Email"),
			Name:        flags.ReadStringFlag(cmd, "Name"),
		})

		resp, err := client.Onboard.PostOnboardAPIV1SourceAws(req, auth)
		if err != nil {
			return fmt.Errorf("[post_onboard_api_v_1_source_aws] : %v", err)
		}

		err = pkg.PrintOutput(cmd, "post-onboard-api-v1-source-aws", resp.GetPayload())
		if err != nil {
			return fmt.Errorf("[post_onboard_api_v_1_source_aws] : %v", err)
		}

		return nil
	},
}

var PostOnboardApiV1SourceAzureCmd = &cobra.Command{
	Use:   "create-azure-source",
	Short: `Creating Azure source`,
	Long:  `Creating Azure source`,
	RunE: func(cmd *cobra.Command, args []string) error {
		client, auth, err := kaytu.GetKaytuAuthClient(cmd)
		if err != nil {
			if errors.Is(err, pkg.ExpiredSession) {
				fmt.Println(err.Error())
				return nil
			}
			return fmt.Errorf("[post_onboard_api_v_1_source_azure] : %v", err)
		}

		req := onboard.NewPostOnboardAPIV1SourceAzureParams()

		req.SetRequest(&models.GithubComKaytuIoKaytuEnginePkgOnboardAPISourceAzureRequest{
			Config: &models.GithubComKaytuIoKaytuEnginePkgOnboardAPIAzureCredentialConfig{
				ClientID:       flags.ReadStringOptionalFlag(cmd, "Config-ClientID"),
				ClientSecret:   flags.ReadStringOptionalFlag(cmd, "Config-ClientSecret"),
				ObjectID:       flags.ReadStringOptionalFlag(cmd, "Config-ObjectID"),
				SecretID:       flags.ReadStringOptionalFlag(cmd, "Config-SecretID"),
				SubscriptionID: flags.ReadStringFlag(cmd, "Config-SubscriptionID"),
				TenantID:       flags.ReadStringOptionalFlag(cmd, "Config-TenantID"),
			},
			Description: flags.ReadStringFlag(cmd, "Description"),
			Name:        flags.ReadStringFlag(cmd, "Name"),
		})

		resp, err := client.Onboard.PostOnboardAPIV1SourceAzure(req, auth)
		if err != nil {
			return fmt.Errorf("[post_onboard_api_v_1_source_azure] : %v", err)
		}

		err = pkg.PrintOutput(cmd, "post-onboard-api-v1-source-azure", resp.GetPayload())
		if err != nil {
			return fmt.Errorf("[post_onboard_api_v_1_source_azure] : %v", err)
		}

		return nil
	},
}

var PostOnboardApiV1CredentialCmd = &cobra.Command{
	Use:   "create-credential",
	Short: `Creating connection credentials`,
	Long:  `Creating connection credentials`,
	RunE: func(cmd *cobra.Command, args []string) error {
		client, auth, err := kaytu.GetKaytuAuthClient(cmd)
		if err != nil {
			if errors.Is(err, pkg.ExpiredSession) {
				fmt.Println(err.Error())
				return nil
			}
			return fmt.Errorf("[post_onboard_api_v_1_credential] : %v", err)
		}

		req := onboard.NewPostOnboardAPIV1CredentialParams()

		req.SetConfig(&models.GithubComKaytuIoKaytuEnginePkgOnboardAPICreateCredentialRequest{
			Config:     interface{}(flags.ReadStringFlag(cmd, "Config-Config")),
			SourceType: models.SourceType(flags.ReadStringFlag(cmd, "Config-SourceType")),
		})

		resp, err := client.Onboard.PostOnboardAPIV1Credential(req, auth)
		if err != nil {
			return fmt.Errorf("[post_onboard_api_v_1_credential] : %v", err)
		}

		err = pkg.PrintOutput(cmd, "post-onboard-api-v1-credential", resp.GetPayload())
		if err != nil {
			return fmt.Errorf("[post_onboard_api_v_1_credential] : %v", err)
		}

		return nil
	},
}

var DeleteOnboardApiV1CredentialCredentialIdCmd = &cobra.Command{
	Use:   "delete-credential",
	Short: `Remove a credential by ID`,
	Long:  `Remove a credential by ID`,
	RunE: func(cmd *cobra.Command, args []string) error {
		client, auth, err := kaytu.GetKaytuAuthClient(cmd)
		if err != nil {
			if errors.Is(err, pkg.ExpiredSession) {
				fmt.Println(err.Error())
				return nil
			}
			return fmt.Errorf("[delete_onboard_api_v_1_credential_credential_id] : %v", err)
		}

		req := onboard.NewDeleteOnboardAPIV1CredentialCredentialIDParams()

		req.SetCredentialID(flags.ReadStringFlag(cmd, "CredentialID"))

		_, err = client.Onboard.DeleteOnboardAPIV1CredentialCredentialID(req, auth)
		if err != nil {
			return fmt.Errorf("[delete_onboard_api_v_1_credential_credential_id] : %v", err)
		}

		return nil
	},
}

var DeleteOnboardApiV1SourceSourceIdCmd = &cobra.Command{
	Use:   "delete-source",
	Short: `Deleting a single source either AWS / Azure for the given source id.`,
	Long:  `Deleting a single source either AWS / Azure for the given source id.`,
	RunE: func(cmd *cobra.Command, args []string) error {
		client, auth, err := kaytu.GetKaytuAuthClient(cmd)
		if err != nil {
			if errors.Is(err, pkg.ExpiredSession) {
				fmt.Println(err.Error())
				return nil
			}
			return fmt.Errorf("[delete_onboard_api_v_1_source_source_id] : %v", err)
		}

		req := onboard.NewDeleteOnboardAPIV1SourceSourceIDParams()

		req.SetSourceID(flags.ReadStringFlag(cmd, "SourceID"))

		_, err = client.Onboard.DeleteOnboardAPIV1SourceSourceID(req, auth)
		if err != nil {
			return fmt.Errorf("[delete_onboard_api_v_1_source_source_id] : %v", err)
		}

		return nil
	},
}

var GetOnboardApiV1CatalogMetricsCmd = &cobra.Command{
	Use:   "get-catalog-metrics",
	Short: `Retrieving the list of metrics for catalog page.`,
	Long:  `Retrieving the list of metrics for catalog page.`,
	RunE: func(cmd *cobra.Command, args []string) error {
		client, auth, err := kaytu.GetKaytuAuthClient(cmd)
		if err != nil {
			if errors.Is(err, pkg.ExpiredSession) {
				fmt.Println(err.Error())
				return nil
			}
			return fmt.Errorf("[get_onboard_api_v_1_catalog_metrics] : %v", err)
		}

		req := onboard.NewGetOnboardAPIV1CatalogMetricsParams()

		resp, err := client.Onboard.GetOnboardAPIV1CatalogMetrics(req, auth)
		if err != nil {
			return fmt.Errorf("[get_onboard_api_v_1_catalog_metrics] : %v", err)
		}

		err = pkg.PrintOutput(cmd, "get-onboard-api-v1-catalog-metrics", resp.GetPayload())
		if err != nil {
			return fmt.Errorf("[get_onboard_api_v_1_catalog_metrics] : %v", err)
		}

		return nil
	},
}

var GetOnboardApiV1ConnectorCmd = &cobra.Command{
	Use:   "get-connectors",
	Short: `Returns list of all connectors`,
	Long:  `Returns list of all connectors`,
	RunE: func(cmd *cobra.Command, args []string) error {
		client, auth, err := kaytu.GetKaytuAuthClient(cmd)
		if err != nil {
			if errors.Is(err, pkg.ExpiredSession) {
				fmt.Println(err.Error())
				return nil
			}
			return fmt.Errorf("[get_onboard_api_v_1_connector] : %v", err)
		}

		req := onboard.NewGetOnboardAPIV1ConnectorParams()

		resp, err := client.Onboard.GetOnboardAPIV1Connector(req, auth)
		if err != nil {
			return fmt.Errorf("[get_onboard_api_v_1_connector] : %v", err)
		}

		err = pkg.PrintOutput(cmd, "get-onboard-api-v1-connector", resp.GetPayload())
		if err != nil {
			return fmt.Errorf("[get_onboard_api_v_1_connector] : %v", err)
		}

		return nil
	},
}

var GetOnboardApiV1CredentialCredentialIdCmd = &cobra.Command{
	Use:   "get-credential",
	Short: `Retrieving credential details by credential ID`,
	Long:  `Retrieving credential details by credential ID`,
	RunE: func(cmd *cobra.Command, args []string) error {
		client, auth, err := kaytu.GetKaytuAuthClient(cmd)
		if err != nil {
			if errors.Is(err, pkg.ExpiredSession) {
				fmt.Println(err.Error())
				return nil
			}
			return fmt.Errorf("[get_onboard_api_v_1_credential_credential_id] : %v", err)
		}

		req := onboard.NewGetOnboardAPIV1CredentialCredentialIDParams()

		req.SetCredentialID(flags.ReadStringFlag(cmd, "CredentialID"))

		resp, err := client.Onboard.GetOnboardAPIV1CredentialCredentialID(req, auth)
		if err != nil {
			return fmt.Errorf("[get_onboard_api_v_1_credential_credential_id] : %v", err)
		}

		err = pkg.PrintOutput(cmd, "get-onboard-api-v1-credential-credential-id", resp.GetPayload())
		if err != nil {
			return fmt.Errorf("[get_onboard_api_v_1_credential_credential_id] : %v", err)
		}

		return nil
	},
}

var GetOnboardApiV1SourceSourceIdHealthcheckCmd = &cobra.Command{
	Use:   "healthcheck-source",
	Short: `Get live source health status with given source ID.`,
	Long:  `Get live source health status with given source ID.`,
	RunE: func(cmd *cobra.Command, args []string) error {
		client, auth, err := kaytu.GetKaytuAuthClient(cmd)
		if err != nil {
			if errors.Is(err, pkg.ExpiredSession) {
				fmt.Println(err.Error())
				return nil
			}
			return fmt.Errorf("[get_onboard_api_v_1_source_source_id_healthcheck] : %v", err)
		}

		req := onboard.NewGetOnboardAPIV1SourceSourceIDHealthcheckParams()

		req.SetSourceID(flags.ReadStringFlag(cmd, "SourceID"))

		resp, err := client.Onboard.GetOnboardAPIV1SourceSourceIDHealthcheck(req, auth)
		if err != nil {
			return fmt.Errorf("[get_onboard_api_v_1_source_source_id_healthcheck] : %v", err)
		}

		err = pkg.PrintOutput(cmd, "get-onboard-api-v1-source-source-id-healthcheck", resp.GetPayload())
		if err != nil {
			return fmt.Errorf("[get_onboard_api_v_1_source_source_id_healthcheck] : %v", err)
		}

		return nil
	},
}

var GetOnboardApiV1CredentialCmd = &cobra.Command{
	Use:   "list-credentials",
	Short: `Retrieving list of credentials with their details`,
	Long:  `Retrieving list of credentials with their details`,
	RunE: func(cmd *cobra.Command, args []string) error {
		client, auth, err := kaytu.GetKaytuAuthClient(cmd)
		if err != nil {
			if errors.Is(err, pkg.ExpiredSession) {
				fmt.Println(err.Error())
				return nil
			}
			return fmt.Errorf("[get_onboard_api_v_1_credential] : %v", err)
		}

		req := onboard.NewGetOnboardAPIV1CredentialParams()

		req.SetConnector(flags.ReadStringOptionalFlag(cmd, "Connector"))
		req.SetCredentialType(flags.ReadStringArrayFlag(cmd, "CredentialType"))
		req.SetHealth(flags.ReadStringOptionalFlag(cmd, "Health"))
		req.SetPageNumber(flags.ReadInt64OptionalFlag(cmd, "PageNumber"))
		req.SetPageSize(flags.ReadInt64OptionalFlag(cmd, "PageSize"))

		resp, err := client.Onboard.GetOnboardAPIV1Credential(req, auth)
		if err != nil {
			return fmt.Errorf("[get_onboard_api_v_1_credential] : %v", err)
		}

		err = pkg.PrintOutput(cmd, "get-onboard-api-v1-credential", resp.GetPayload())
		if err != nil {
			return fmt.Errorf("[get_onboard_api_v_1_credential] : %v", err)
		}

		return nil
	},
}

var PutOnboardApiV1CredentialCredentialIdCmd = &cobra.Command{
	Use:   "update-credential",
	Short: `Edit a credential by ID`,
	Long:  `Edit a credential by ID`,
	RunE: func(cmd *cobra.Command, args []string) error {
		client, auth, err := kaytu.GetKaytuAuthClient(cmd)
		if err != nil {
			if errors.Is(err, pkg.ExpiredSession) {
				fmt.Println(err.Error())
				return nil
			}
			return fmt.Errorf("[put_onboard_api_v_1_credential_credential_id] : %v", err)
		}

		req := onboard.NewPutOnboardAPIV1CredentialCredentialIDParams()

		req.SetConfig(&models.GithubComKaytuIoKaytuEnginePkgOnboardAPIUpdateCredentialRequest{
			Config:    interface{}(flags.ReadStringFlag(cmd, "Config-Config")),
			Connector: models.SourceType(flags.ReadStringFlag(cmd, "Config-Connector")),
			Name:      flags.ReadStringFlag(cmd, "Config-Name"),
		})
		req.SetCredentialID(flags.ReadStringFlag(cmd, "CredentialID"))

		_, err = client.Onboard.PutOnboardAPIV1CredentialCredentialID(req, auth)
		if err != nil {
			return fmt.Errorf("[put_onboard_api_v_1_credential_credential_id] : %v", err)
		}

		return nil
	},
}
