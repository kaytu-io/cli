// ========== DO NOT EDIT THIS FILE! AUTO GENERATED!!! =========
package gen

import (
	"errors"
	"fmt"

	"github.com/kaytu-io/cli-program/cmd/flags"
	"github.com/kaytu-io/cli-program/pkg"
	"github.com/kaytu-io/cli-program/pkg/api/kaytu"
	"github.com/kaytu-io/cli-program/pkg/api/kaytu/client/onboard"
	"github.com/kaytu-io/cli-program/pkg/api/kaytu/models"
	"github.com/spf13/cobra"
)

var PostOnboardApiV1CredentialCredentialIdAutoonboardCmd = &cobra.Command{
	Use:   "auto-onboard-credential",
	Short: `Onboard all available connections for a credential`,
	Long:  `Onboard all available connections for a credential`,
	RunE: func(cmd *cobra.Command, args []string) error {
		client, auth, err := kaytu.GetKaytuAuthClient(cmd)
		if err != nil {
			if errors.Is(err, pkg.ExpiredSession) {
				fmt.Println(err.Error())
				return nil
			}
			return fmt.Errorf("[post_onboard_api_v_1_credential_credential_id_autoonboard] : %v", err)
		}

		req := onboard.NewPostOnboardAPIV1CredentialCredentialIDAutoonboardParams()

		req.SetCredentialID(flags.ReadStringFlag(cmd, "CredentialID"))

		resp, err := client.Onboard.PostOnboardAPIV1CredentialCredentialIDAutoonboard(req, auth)
		if err != nil {
			return fmt.Errorf("[post_onboard_api_v_1_credential_credential_id_autoonboard] : %v", err)
		}

		err = pkg.PrintOutput(cmd, resp.GetPayload())
		if err != nil {
			return fmt.Errorf("[post_onboard_api_v_1_credential_credential_id_autoonboard] : %v", err)
		}

		return nil
	},
}

var PostOnboardApiV1SourceAwsCmd = &cobra.Command{
	Use:   "create-aws-source",
	Short: `Creating AWS source`,
	Long:  `Creating AWS source`,
	RunE: func(cmd *cobra.Command, args []string) error {
		client, auth, err := kaytu.GetKaytuAuthClient(cmd)
		if err != nil {
			if errors.Is(err, pkg.ExpiredSession) {
				fmt.Println(err.Error())
				return nil
			}
			return fmt.Errorf("[post_onboard_api_v_1_source_aws] : %v", err)
		}

		req := onboard.NewPostOnboardAPIV1SourceAwsParams()

		req.SetRequest(&models.GithubComKaytuIoKaytuEnginePkgOnboardAPISourceAwsRequest{
			Config: &models.GithubComKaytuIoKaytuEnginePkgOnboardAPIAWSCredentialConfig{
				AccessKey:      flags.ReadStringOptionalFlag(cmd, "Config-AccessKey"),
				AccountID:      flags.ReadStringFlag(cmd, "Config-AccountID"),
				AssumeRoleName: flags.ReadStringFlag(cmd, "Config-AssumeRoleName"),
				ExternalID:     flags.ReadStringFlag(cmd, "Config-ExternalID"),
				Regions:        flags.ReadStringArrayFlag(cmd, "Config-Regions"),
				SecretKey:      flags.ReadStringOptionalFlag(cmd, "Config-SecretKey"),
			},
			Description: flags.ReadStringFlag(cmd, "Description"),
			Email:       flags.ReadStringFlag(cmd, "Email"),
			Name:        flags.ReadStringFlag(cmd, "Name"),
		})

		resp, err := client.Onboard.PostOnboardAPIV1SourceAws(req, auth)
		if err != nil {
			return fmt.Errorf("[post_onboard_api_v_1_source_aws] : %v", err)
		}

		err = pkg.PrintOutput(cmd, resp.GetPayload())
		if err != nil {
			return fmt.Errorf("[post_onboard_api_v_1_source_aws] : %v", err)
		}

		return nil
	},
}

var PostOnboardApiV1SourceAzureCmd = &cobra.Command{
	Use:   "create-azure-source",
	Short: `Creating Azure source`,
	Long:  `Creating Azure source`,
	RunE: func(cmd *cobra.Command, args []string) error {
		client, auth, err := kaytu.GetKaytuAuthClient(cmd)
		if err != nil {
			if errors.Is(err, pkg.ExpiredSession) {
				fmt.Println(err.Error())
				return nil
			}
			return fmt.Errorf("[post_onboard_api_v_1_source_azure] : %v", err)
		}

		req := onboard.NewPostOnboardAPIV1SourceAzureParams()

		req.SetRequest(&models.GithubComKaytuIoKaytuEnginePkgOnboardAPISourceAzureRequest{
			Config: &models.GithubComKaytuIoKaytuEnginePkgOnboardAPIAzureCredentialConfig{
				ClientID:       flags.ReadStringOptionalFlag(cmd, "Config-ClientID"),
				ClientSecret:   flags.ReadStringOptionalFlag(cmd, "Config-ClientSecret"),
				ObjectID:       flags.ReadStringOptionalFlag(cmd, "Config-ObjectID"),
				SecretID:       flags.ReadStringOptionalFlag(cmd, "Config-SecretID"),
				SubscriptionID: flags.ReadStringFlag(cmd, "Config-SubscriptionID"),
				TenantID:       flags.ReadStringOptionalFlag(cmd, "Config-TenantID"),
			},
			Description: flags.ReadStringFlag(cmd, "Description"),
			Name:        flags.ReadStringFlag(cmd, "Name"),
		})

		resp, err := client.Onboard.PostOnboardAPIV1SourceAzure(req, auth)
		if err != nil {
			return fmt.Errorf("[post_onboard_api_v_1_source_azure] : %v", err)
		}

		err = pkg.PrintOutput(cmd, resp.GetPayload())
		if err != nil {
			return fmt.Errorf("[post_onboard_api_v_1_source_azure] : %v", err)
		}

		return nil
	},
}

var PostOnboardApiV1CredentialCmd = &cobra.Command{
	Use:   "create-credential",
	Short: `Creating connection credentials`,
	Long:  `Creating connection credentials`,
	RunE: func(cmd *cobra.Command, args []string) error {
		client, auth, err := kaytu.GetKaytuAuthClient(cmd)
		if err != nil {
			if errors.Is(err, pkg.ExpiredSession) {
				fmt.Println(err.Error())
				return nil
			}
			return fmt.Errorf("[post_onboard_api_v_1_credential] : %v", err)
		}

		req := onboard.NewPostOnboardAPIV1CredentialParams()

		req.SetConfig(&models.GithubComKaytuIoKaytuEnginePkgOnboardAPICreateCredentialRequest{
			Config:     interface{}(flags.ReadStringFlag(cmd, "Config-Config")),
			Name:       flags.ReadStringFlag(cmd, "Config-Name"),
			SourceType: models.SourceType(flags.ReadStringFlag(cmd, "Config-SourceType")),
		})

		resp, err := client.Onboard.PostOnboardAPIV1Credential(req, auth)
		if err != nil {
			return fmt.Errorf("[post_onboard_api_v_1_credential] : %v", err)
		}

		err = pkg.PrintOutput(cmd, resp.GetPayload())
		if err != nil {
			return fmt.Errorf("[post_onboard_api_v_1_credential] : %v", err)
		}

		return nil
	},
}

var DeleteOnboardApiV1CredentialCredentialIdCmd = &cobra.Command{
	Use:   "delete-credential",
	Short: `Remove a credential by Id`,
	Long:  `Remove a credential by Id`,
	RunE: func(cmd *cobra.Command, args []string) error {
		client, auth, err := kaytu.GetKaytuAuthClient(cmd)
		if err != nil {
			if errors.Is(err, pkg.ExpiredSession) {
				fmt.Println(err.Error())
				return nil
			}
			return fmt.Errorf("[delete_onboard_api_v_1_credential_credential_id] : %v", err)
		}

		req := onboard.NewDeleteOnboardAPIV1CredentialCredentialIDParams()

		req.SetCredentialID(flags.ReadStringFlag(cmd, "CredentialID"))

		_, err = client.Onboard.DeleteOnboardAPIV1CredentialCredentialID(req, auth)
		if err != nil {
			return fmt.Errorf("[delete_onboard_api_v_1_credential_credential_id] : %v", err)
		}

		return nil
	},
}

var DeleteOnboardApiV1SourceSourceIdCmd = &cobra.Command{
	Use:   "delete-source",
	Short: `Deleting a single source either AWS / Azure for the given source id.`,
	Long:  `Deleting a single source either AWS / Azure for the given source id.`,
	RunE: func(cmd *cobra.Command, args []string) error {
		client, auth, err := kaytu.GetKaytuAuthClient(cmd)
		if err != nil {
			if errors.Is(err, pkg.ExpiredSession) {
				fmt.Println(err.Error())
				return nil
			}
			return fmt.Errorf("[delete_onboard_api_v_1_source_source_id] : %v", err)
		}

		req := onboard.NewDeleteOnboardAPIV1SourceSourceIDParams()

		req.SetSourceID(flags.ReadStringFlag(cmd, "SourceID"))

		_, err = client.Onboard.DeleteOnboardAPIV1SourceSourceID(req, auth)
		if err != nil {
			return fmt.Errorf("[delete_onboard_api_v_1_source_source_id] : %v", err)
		}

		return nil
	},
}

var PostOnboardApiV1CredentialCredentialIdDisableCmd = &cobra.Command{
	Use:   "disable-credential",
	Short: `Disable credential`,
	Long:  `Disable credential`,
	RunE: func(cmd *cobra.Command, args []string) error {
		client, auth, err := kaytu.GetKaytuAuthClient(cmd)
		if err != nil {
			if errors.Is(err, pkg.ExpiredSession) {
				fmt.Println(err.Error())
				return nil
			}
			return fmt.Errorf("[post_onboard_api_v_1_credential_credential_id_disable] : %v", err)
		}

		req := onboard.NewPostOnboardAPIV1CredentialCredentialIDDisableParams()

		req.SetCredentialID(flags.ReadStringFlag(cmd, "CredentialID"))

		_, err = client.Onboard.PostOnboardAPIV1CredentialCredentialIDDisable(req, auth)
		if err != nil {
			return fmt.Errorf("[post_onboard_api_v_1_credential_credential_id_disable] : %v", err)
		}

		return nil
	},
}

var PostOnboardApiV1CredentialCredentialIdEnableCmd = &cobra.Command{
	Use:   "enable-credential",
	Short: `Enable credential`,
	Long:  `Enable credential`,
	RunE: func(cmd *cobra.Command, args []string) error {
		client, auth, err := kaytu.GetKaytuAuthClient(cmd)
		if err != nil {
			if errors.Is(err, pkg.ExpiredSession) {
				fmt.Println(err.Error())
				return nil
			}
			return fmt.Errorf("[post_onboard_api_v_1_credential_credential_id_enable] : %v", err)
		}

		req := onboard.NewPostOnboardAPIV1CredentialCredentialIDEnableParams()

		req.SetCredentialID(flags.ReadStringFlag(cmd, "CredentialID"))

		_, err = client.Onboard.PostOnboardAPIV1CredentialCredentialIDEnable(req, auth)
		if err != nil {
			return fmt.Errorf("[post_onboard_api_v_1_credential_credential_id_enable] : %v", err)
		}

		return nil
	},
}

var GetOnboardApiV1SourceAccountAccountIdCmd = &cobra.Command{
	Use:   "get-account-source",
	Short: `Returning account source either AWS / Azure.`,
	Long:  `Returning account source either AWS / Azure.`,
	RunE: func(cmd *cobra.Command, args []string) error {
		client, auth, err := kaytu.GetKaytuAuthClient(cmd)
		if err != nil {
			if errors.Is(err, pkg.ExpiredSession) {
				fmt.Println(err.Error())
				return nil
			}
			return fmt.Errorf("[get_onboard_api_v_1_source_account_account_id] : %v", err)
		}

		req := onboard.NewGetOnboardAPIV1SourceAccountAccountIDParams()

		req.SetAccountID(flags.ReadInt64Flag(cmd, "AccountID"))

		resp, err := client.Onboard.GetOnboardAPIV1SourceAccountAccountID(req, auth)
		if err != nil {
			return fmt.Errorf("[get_onboard_api_v_1_source_account_account_id] : %v", err)
		}

		err = pkg.PrintOutput(cmd, resp.GetPayload())
		if err != nil {
			return fmt.Errorf("[get_onboard_api_v_1_source_account_account_id] : %v", err)
		}

		return nil
	},
}

var GetOnboardApiV1CatalogMetricsCmd = &cobra.Command{
	Use:   "get-catalog-metrics",
	Short: `Returns the list of metrics for catalog page.`,
	Long:  `Returns the list of metrics for catalog page.`,
	RunE: func(cmd *cobra.Command, args []string) error {
		client, auth, err := kaytu.GetKaytuAuthClient(cmd)
		if err != nil {
			if errors.Is(err, pkg.ExpiredSession) {
				fmt.Println(err.Error())
				return nil
			}
			return fmt.Errorf("[get_onboard_api_v_1_catalog_metrics] : %v", err)
		}

		req := onboard.NewGetOnboardAPIV1CatalogMetricsParams()

		resp, err := client.Onboard.GetOnboardAPIV1CatalogMetrics(req, auth)
		if err != nil {
			return fmt.Errorf("[get_onboard_api_v_1_catalog_metrics] : %v", err)
		}

		err = pkg.PrintOutput(cmd, resp.GetPayload())
		if err != nil {
			return fmt.Errorf("[get_onboard_api_v_1_catalog_metrics] : %v", err)
		}

		return nil
	},
}

var GetOnboardApiV1ConnectionsCountCmd = &cobra.Command{
	Use:   "get-connections-count",
	Short: `Returns a count of connections`,
	Long:  `Returns a count of connections`,
	RunE: func(cmd *cobra.Command, args []string) error {
		client, auth, err := kaytu.GetKaytuAuthClient(cmd)
		if err != nil {
			if errors.Is(err, pkg.ExpiredSession) {
				fmt.Println(err.Error())
				return nil
			}
			return fmt.Errorf("[get_onboard_api_v_1_connections_count] : %v", err)
		}

		req := onboard.NewGetOnboardAPIV1ConnectionsCountParams()

		req.SetType(&models.GithubComKaytuIoKaytuEnginePkgOnboardAPIConnectionCountRequest{
			Connectors: flags.ReadStringArrayFlag(cmd, "Type-Connectors"),
			State:      models.GithubComKaytuIoKaytuEnginePkgOnboardAPIConnectionLifecycleState(flags.ReadStringFlag(cmd, "Type-State")),
		})

		resp, err := client.Onboard.GetOnboardAPIV1ConnectionsCount(req, auth)
		if err != nil {
			return fmt.Errorf("[get_onboard_api_v_1_connections_count] : %v", err)
		}

		err = pkg.PrintOutput(cmd, resp.GetPayload())
		if err != nil {
			return fmt.Errorf("[get_onboard_api_v_1_connections_count] : %v", err)
		}

		return nil
	},
}

var GetOnboardApiV1ConnectorConnectorNameCmd = &cobra.Command{
	Use:   "get-connector",
	Short: `Returns connector details by name`,
	Long:  `Returns connector details by name`,
	RunE: func(cmd *cobra.Command, args []string) error {
		client, auth, err := kaytu.GetKaytuAuthClient(cmd)
		if err != nil {
			if errors.Is(err, pkg.ExpiredSession) {
				fmt.Println(err.Error())
				return nil
			}
			return fmt.Errorf("[get_onboard_api_v_1_connector_connector_name] : %v", err)
		}

		req := onboard.NewGetOnboardAPIV1ConnectorConnectorNameParams()

		req.SetConnectorName(flags.ReadStringFlag(cmd, "ConnectorName"))

		resp, err := client.Onboard.GetOnboardAPIV1ConnectorConnectorName(req, auth)
		if err != nil {
			return fmt.Errorf("[get_onboard_api_v_1_connector_connector_name] : %v", err)
		}

		err = pkg.PrintOutput(cmd, resp.GetPayload())
		if err != nil {
			return fmt.Errorf("[get_onboard_api_v_1_connector_connector_name] : %v", err)
		}

		return nil
	},
}

var GetOnboardApiV1ConnectorCmd = &cobra.Command{
	Use:   "get-connectors",
	Short: `Returns list of all connectors`,
	Long:  `Returns list of all connectors`,
	RunE: func(cmd *cobra.Command, args []string) error {
		client, auth, err := kaytu.GetKaytuAuthClient(cmd)
		if err != nil {
			if errors.Is(err, pkg.ExpiredSession) {
				fmt.Println(err.Error())
				return nil
			}
			return fmt.Errorf("[get_onboard_api_v_1_connector] : %v", err)
		}

		req := onboard.NewGetOnboardAPIV1ConnectorParams()

		resp, err := client.Onboard.GetOnboardAPIV1Connector(req, auth)
		if err != nil {
			return fmt.Errorf("[get_onboard_api_v_1_connector] : %v", err)
		}

		err = pkg.PrintOutput(cmd, resp.GetPayload())
		if err != nil {
			return fmt.Errorf("[get_onboard_api_v_1_connector] : %v", err)
		}

		return nil
	},
}

var GetOnboardApiV1CredentialCredentialIdCmd = &cobra.Command{
	Use:   "get-credential",
	Short: `Retrieving credential details by credential ID`,
	Long:  `Retrieving credential details by credential ID`,
	RunE: func(cmd *cobra.Command, args []string) error {
		client, auth, err := kaytu.GetKaytuAuthClient(cmd)
		if err != nil {
			if errors.Is(err, pkg.ExpiredSession) {
				fmt.Println(err.Error())
				return nil
			}
			return fmt.Errorf("[get_onboard_api_v_1_credential_credential_id] : %v", err)
		}

		req := onboard.NewGetOnboardAPIV1CredentialCredentialIDParams()

		req.SetCredentialID(flags.ReadStringFlag(cmd, "CredentialID"))

		resp, err := client.Onboard.GetOnboardAPIV1CredentialCredentialID(req, auth)
		if err != nil {
			return fmt.Errorf("[get_onboard_api_v_1_credential_credential_id] : %v", err)
		}

		err = pkg.PrintOutput(cmd, resp.GetPayload())
		if err != nil {
			return fmt.Errorf("[get_onboard_api_v_1_credential_credential_id] : %v", err)
		}

		return nil
	},
}

var GetOnboardApiV1SourceSourceIdCmd = &cobra.Command{
	Use:   "get-source",
	Short: `Returning single source either AWS / Azure.`,
	Long:  `Returning single source either AWS / Azure.`,
	RunE: func(cmd *cobra.Command, args []string) error {
		client, auth, err := kaytu.GetKaytuAuthClient(cmd)
		if err != nil {
			if errors.Is(err, pkg.ExpiredSession) {
				fmt.Println(err.Error())
				return nil
			}
			return fmt.Errorf("[get_onboard_api_v_1_source_source_id] : %v", err)
		}

		req := onboard.NewGetOnboardAPIV1SourceSourceIDParams()

		req.SetSourceID(flags.ReadInt64Flag(cmd, "SourceID"))

		resp, err := client.Onboard.GetOnboardAPIV1SourceSourceID(req, auth)
		if err != nil {
			return fmt.Errorf("[get_onboard_api_v_1_source_source_id] : %v", err)
		}

		err = pkg.PrintOutput(cmd, resp.GetPayload())
		if err != nil {
			return fmt.Errorf("[get_onboard_api_v_1_source_source_id] : %v", err)
		}

		return nil
	},
}

var GetOnboardApiV1CredentialCredentialIdHealthcheckCmd = &cobra.Command{
	Use:   "healthcheck-credential",
	Short: ``,
	Long:  ``,
	RunE: func(cmd *cobra.Command, args []string) error {
		client, auth, err := kaytu.GetKaytuAuthClient(cmd)
		if err != nil {
			if errors.Is(err, pkg.ExpiredSession) {
				fmt.Println(err.Error())
				return nil
			}
			return fmt.Errorf("[get_onboard_api_v_1_credential_credential_id_healthcheck] : %v", err)
		}

		req := onboard.NewGetOnboardAPIV1CredentialCredentialIDHealthcheckParams()

		req.SetCredentialID(flags.ReadStringFlag(cmd, "CredentialID"))

		_, err = client.Onboard.GetOnboardAPIV1CredentialCredentialIDHealthcheck(req, auth)
		if err != nil {
			return fmt.Errorf("[get_onboard_api_v_1_credential_credential_id_healthcheck] : %v", err)
		}

		return nil
	},
}

var PostOnboardApiV1SourceSourceIdHealthcheckCmd = &cobra.Command{
	Use:   "healthchek-source",
	Short: `Get live source health status with given source ID.`,
	Long:  `Get live source health status with given source ID.`,
	RunE: func(cmd *cobra.Command, args []string) error {
		client, auth, err := kaytu.GetKaytuAuthClient(cmd)
		if err != nil {
			if errors.Is(err, pkg.ExpiredSession) {
				fmt.Println(err.Error())
				return nil
			}
			return fmt.Errorf("[post_onboard_api_v_1_source_source_id_healthcheck] : %v", err)
		}

		req := onboard.NewPostOnboardAPIV1SourceSourceIDHealthcheckParams()

		req.SetSourceID(flags.ReadStringFlag(cmd, "SourceID"))

		resp, err := client.Onboard.PostOnboardAPIV1SourceSourceIDHealthcheck(req, auth)
		if err != nil {
			return fmt.Errorf("[post_onboard_api_v_1_source_source_id_healthcheck] : %v", err)
		}

		err = pkg.PrintOutput(cmd, resp.GetPayload())
		if err != nil {
			return fmt.Errorf("[post_onboard_api_v_1_source_source_id_healthcheck] : %v", err)
		}

		return nil
	},
}

var GetOnboardApiV1CredentialCmd = &cobra.Command{
	Use:   "list-credentials",
	Short: `Retrieving list of credentials with their details`,
	Long:  `Retrieving list of credentials with their details`,
	RunE: func(cmd *cobra.Command, args []string) error {
		client, auth, err := kaytu.GetKaytuAuthClient(cmd)
		if err != nil {
			if errors.Is(err, pkg.ExpiredSession) {
				fmt.Println(err.Error())
				return nil
			}
			return fmt.Errorf("[get_onboard_api_v_1_credential] : %v", err)
		}

		req := onboard.NewGetOnboardAPIV1CredentialParams()

		req.SetConnector(flags.ReadStringOptionalFlag(cmd, "Connector"))
		req.SetCredentialType(flags.ReadStringOptionalFlag(cmd, "CredentialType"))
		req.SetHealth(flags.ReadStringOptionalFlag(cmd, "Health"))
		req.SetPageNumber(flags.ReadInt64OptionalFlag(cmd, "PageNumber"))
		req.SetPageSize(flags.ReadInt64OptionalFlag(cmd, "PageSize"))

		resp, err := client.Onboard.GetOnboardAPIV1Credential(req, auth)
		if err != nil {
			return fmt.Errorf("[get_onboard_api_v_1_credential] : %v", err)
		}

		err = pkg.PrintOutput(cmd, resp.GetPayload())
		if err != nil {
			return fmt.Errorf("[get_onboard_api_v_1_credential] : %v", err)
		}

		return nil
	},
}

var GetOnboardApiV1CredentialSourcesListCmd = &cobra.Command{
	Use:   "list-credentials-sources",
	Short: `Returning a list of sources including both AWS and Azure unless filtered by Type.`,
	Long:  `Returning a list of sources including both AWS and Azure unless filtered by Type.`,
	RunE: func(cmd *cobra.Command, args []string) error {
		client, auth, err := kaytu.GetKaytuAuthClient(cmd)
		if err != nil {
			if errors.Is(err, pkg.ExpiredSession) {
				fmt.Println(err.Error())
				return nil
			}
			return fmt.Errorf("[get_onboard_api_v_1_credential_sources_list] : %v", err)
		}

		req := onboard.NewGetOnboardAPIV1CredentialSourcesListParams()

		req.SetConnector(flags.ReadStringOptionalFlag(cmd, "Connector"))
		req.SetCredentialType(flags.ReadStringOptionalFlag(cmd, "CredentialType"))
		req.SetPageNumber(flags.ReadInt64OptionalFlag(cmd, "PageNumber"))
		req.SetPageSize(flags.ReadInt64OptionalFlag(cmd, "PageSize"))

		resp, err := client.Onboard.GetOnboardAPIV1CredentialSourcesList(req, auth)
		if err != nil {
			return fmt.Errorf("[get_onboard_api_v_1_credential_sources_list] : %v", err)
		}

		err = pkg.PrintOutput(cmd, resp.GetPayload())
		if err != nil {
			return fmt.Errorf("[get_onboard_api_v_1_credential_sources_list] : %v", err)
		}

		return nil
	},
}

var GetOnboardApiV1SourcesCmd = &cobra.Command{
	Use:   "list-sources",
	Short: `Returning a list of sources including both AWS and Azure unless filtered by Type.`,
	Long:  `Returning a list of sources including both AWS and Azure unless filtered by Type.`,
	RunE: func(cmd *cobra.Command, args []string) error {
		client, auth, err := kaytu.GetKaytuAuthClient(cmd)
		if err != nil {
			if errors.Is(err, pkg.ExpiredSession) {
				fmt.Println(err.Error())
				return nil
			}
			return fmt.Errorf("[get_onboard_api_v_1_sources] : %v", err)
		}

		req := onboard.NewGetOnboardAPIV1SourcesParams()

		req.SetConnector(flags.ReadStringArrayFlag(cmd, "Connector"))

		resp, err := client.Onboard.GetOnboardAPIV1Sources(req, auth)
		if err != nil {
			return fmt.Errorf("[get_onboard_api_v_1_sources] : %v", err)
		}

		err = pkg.PrintOutput(cmd, resp.GetPayload())
		if err != nil {
			return fmt.Errorf("[get_onboard_api_v_1_sources] : %v", err)
		}

		return nil
	},
}

var PutOnboardApiV1SourceSourceIdCredentialsCmd = &cobra.Command{
	Use:   "put-source-credentials",
	Short: `Update source credential`,
	Long:  `Update source credential`,
	RunE: func(cmd *cobra.Command, args []string) error {
		client, auth, err := kaytu.GetKaytuAuthClient(cmd)
		if err != nil {
			if errors.Is(err, pkg.ExpiredSession) {
				fmt.Println(err.Error())
				return nil
			}
			return fmt.Errorf("[put_onboard_api_v_1_source_source_id_credentials] : %v", err)
		}

		req := onboard.NewPutOnboardAPIV1SourceSourceIDCredentialsParams()

		req.SetSourceID(flags.ReadStringFlag(cmd, "SourceID"))

		_, err = client.Onboard.PutOnboardAPIV1SourceSourceIDCredentials(req, auth)
		if err != nil {
			return fmt.Errorf("[put_onboard_api_v_1_source_source_id_credentials] : %v", err)
		}

		return nil
	},
}

var GetOnboardApiV1SourceSourceIdCredentialsCmd = &cobra.Command{
	Use:   "source-credentials",
	Short: `Returns credential for a source with given source ID.`,
	Long: `Returns credential for a source with given source ID.
The responses are different for different source types.`,
	RunE: func(cmd *cobra.Command, args []string) error {
		client, auth, err := kaytu.GetKaytuAuthClient(cmd)
		if err != nil {
			if errors.Is(err, pkg.ExpiredSession) {
				fmt.Println(err.Error())
				return nil
			}
			return fmt.Errorf("[get_onboard_api_v_1_source_source_id_credentials] : %v", err)
		}

		req := onboard.NewGetOnboardAPIV1SourceSourceIDCredentialsParams()

		req.SetSourceID(flags.ReadStringFlag(cmd, "SourceID"))

		resp, err := client.Onboard.GetOnboardAPIV1SourceSourceIDCredentials(req, auth)
		if err != nil {
			return fmt.Errorf("[get_onboard_api_v_1_source_source_id_credentials] : %v", err)
		}

		err = pkg.PrintOutput(cmd, resp.GetPayload())
		if err != nil {
			return fmt.Errorf("[get_onboard_api_v_1_source_source_id_credentials] : %v", err)
		}

		return nil
	},
}

var GetOnboardApiV1SourcesCountCmd = &cobra.Command{
	Use:   "sources-count",
	Short: `Returning number of sources including both AWS and Azure unless filtered by Type.`,
	Long:  `Returning number of sources including both AWS and Azure unless filtered by Type.`,
	RunE: func(cmd *cobra.Command, args []string) error {
		client, auth, err := kaytu.GetKaytuAuthClient(cmd)
		if err != nil {
			if errors.Is(err, pkg.ExpiredSession) {
				fmt.Println(err.Error())
				return nil
			}
			return fmt.Errorf("[get_onboard_api_v_1_sources_count] : %v", err)
		}

		req := onboard.NewGetOnboardAPIV1SourcesCountParams()

		req.SetConnector(flags.ReadStringOptionalFlag(cmd, "Connector"))

		resp, err := client.Onboard.GetOnboardAPIV1SourcesCount(req, auth)
		if err != nil {
			return fmt.Errorf("[get_onboard_api_v_1_sources_count] : %v", err)
		}

		err = pkg.PrintOutput(cmd, resp.GetPayload())
		if err != nil {
			return fmt.Errorf("[get_onboard_api_v_1_sources_count] : %v", err)
		}

		return nil
	},
}

var PostOnboardApiV1ConnectionsConnectionIdStateCmd = &cobra.Command{
	Use:   "update-connection-state",
	Short: `Enabling a single source either with connection ID.`,
	Long:  `Enabling a single source either with connection ID.`,
	RunE: func(cmd *cobra.Command, args []string) error {
		client, auth, err := kaytu.GetKaytuAuthClient(cmd)
		if err != nil {
			if errors.Is(err, pkg.ExpiredSession) {
				fmt.Println(err.Error())
				return nil
			}
			return fmt.Errorf("[post_onboard_api_v_1_connections_connection_id_state] : %v", err)
		}

		req := onboard.NewPostOnboardAPIV1ConnectionsConnectionIDStateParams()

		req.SetConnectionID(flags.ReadInt64Flag(cmd, "ConnectionID"))
		req.SetRequest(&models.GithubComKaytuIoKaytuEnginePkgOnboardAPIChangeConnectionLifecycleStateRequest{
			State: models.GithubComKaytuIoKaytuEnginePkgOnboardAPIConnectionLifecycleState(flags.ReadStringFlag(cmd, "State")),
		})

		_, err = client.Onboard.PostOnboardAPIV1ConnectionsConnectionIDState(req, auth)
		if err != nil {
			return fmt.Errorf("[post_onboard_api_v_1_connections_connection_id_state] : %v", err)
		}

		return nil
	},
}

var PutOnboardApiV1CredentialCredentialIdCmd = &cobra.Command{
	Use:   "update-credential",
	Short: `Edit a credential by Id`,
	Long:  `Edit a credential by Id`,
	RunE: func(cmd *cobra.Command, args []string) error {
		client, auth, err := kaytu.GetKaytuAuthClient(cmd)
		if err != nil {
			if errors.Is(err, pkg.ExpiredSession) {
				fmt.Println(err.Error())
				return nil
			}
			return fmt.Errorf("[put_onboard_api_v_1_credential_credential_id] : %v", err)
		}

		req := onboard.NewPutOnboardAPIV1CredentialCredentialIDParams()

		req.SetConfig(&models.GithubComKaytuIoKaytuEnginePkgOnboardAPIUpdateCredentialRequest{
			Config:    interface{}(flags.ReadStringFlag(cmd, "Config-Config")),
			Connector: models.SourceType(flags.ReadStringFlag(cmd, "Config-Connector")),
			Name:      flags.ReadStringFlag(cmd, "Config-Name"),
		})
		req.SetCredentialID(flags.ReadStringFlag(cmd, "CredentialID"))

		_, err = client.Onboard.PutOnboardAPIV1CredentialCredentialID(req, auth)
		if err != nil {
			return fmt.Errorf("[put_onboard_api_v_1_credential_credential_id] : %v", err)
		}

		return nil
	},
}
