// ========== DO NOT EDIT THIS FILE! AUTO GENERATED!!! =========
package gen

import (
	"errors"
	"fmt"

	"github.com/kaytu-io/cli-program/cmd/flags"
	"github.com/kaytu-io/cli-program/pkg"
	"github.com/kaytu-io/cli-program/pkg/api/kaytu"
	"github.com/kaytu-io/cli-program/pkg/api/kaytu/client/compliance"
	"github.com/kaytu-io/cli-program/pkg/api/kaytu/models"
	"github.com/spf13/cobra"
)

var GetComplianceApiV1FindingsBenchmarkIdFieldTopCountCmd = &cobra.Command{
	Use:   "benchmark-findings-top-count",
	Short: `Retrieving the top field by finding count.`,
	Long:  `Retrieving the top field by finding count.`,
	RunE: func(cmd *cobra.Command, args []string) error {
		client, auth, err := kaytu.GetKaytuAuthClient(cmd)
		if err != nil {
			if errors.Is(err, pkg.ExpiredSession) {
				fmt.Println(err.Error())
				return nil
			}
			return fmt.Errorf("[get_compliance_api_v_1_findings_benchmark_id_field_top_count] : %v", err)
		}

		req := compliance.NewGetComplianceAPIV1FindingsBenchmarkIDFieldTopCountParams()

		req.SetBenchmarkID(flags.ReadStringFlag(cmd, "BenchmarkID"))
		req.SetConnectionGroup(flags.ReadStringArrayFlag(cmd, "ConnectionGroup"))
		req.SetConnectionID(flags.ReadStringArrayFlag(cmd, "ConnectionID"))
		req.SetConnector(flags.ReadStringArrayFlag(cmd, "Connector"))
		req.SetCount(flags.ReadInt64Flag(cmd, "Count"))
		req.SetField(flags.ReadStringFlag(cmd, "Field"))
		req.SetSeverities(flags.ReadStringArrayFlag(cmd, "Severities"))

		resp, err := client.Compliance.GetComplianceAPIV1FindingsBenchmarkIDFieldTopCount(req, auth)
		if err != nil {
			return fmt.Errorf("[get_compliance_api_v_1_findings_benchmark_id_field_top_count] : %v", err)
		}

		err = pkg.PrintOutput(cmd, "get-compliance-api-v1-findings-benchmark-id-field-top-count", resp.GetPayload())
		if err != nil {
			return fmt.Errorf("[get_compliance_api_v_1_findings_benchmark_id_field_top_count] : %v", err)
		}

		return nil
	},
}

var GetComplianceApiV1BenchmarksSummaryCmd = &cobra.Command{
	Use:   "benchmarks-summary",
	Short: `Retrieving a summary of all benchmarks and their associated checks and results within a specified time interval.`,
	Long:  `Retrieving a summary of all benchmarks and their associated checks and results within a specified time interval.`,
	RunE: func(cmd *cobra.Command, args []string) error {
		client, auth, err := kaytu.GetKaytuAuthClient(cmd)
		if err != nil {
			if errors.Is(err, pkg.ExpiredSession) {
				fmt.Println(err.Error())
				return nil
			}
			return fmt.Errorf("[get_compliance_api_v_1_benchmarks_summary] : %v", err)
		}

		req := compliance.NewGetComplianceAPIV1BenchmarksSummaryParams()

		req.SetConnectionGroup(flags.ReadStringArrayFlag(cmd, "ConnectionGroup"))
		req.SetConnectionID(flags.ReadStringArrayFlag(cmd, "ConnectionID"))
		req.SetConnector(flags.ReadStringArrayFlag(cmd, "Connector"))
		req.SetTimeAt(flags.ReadInt64OptionalFlag(cmd, "TimeAt"))

		resp, err := client.Compliance.GetComplianceAPIV1BenchmarksSummary(req, auth)
		if err != nil {
			return fmt.Errorf("[get_compliance_api_v_1_benchmarks_summary] : %v", err)
		}

		err = pkg.PrintOutput(cmd, "get-compliance-api-v1-benchmarks-summary", resp.GetPayload())
		if err != nil {
			return fmt.Errorf("[get_compliance_api_v_1_benchmarks_summary] : %v", err)
		}

		return nil
	},
}

var GetComplianceApiV1BenchmarksBenchmarkIdSummaryCmd = &cobra.Command{
	Use:   "get-benchmark-summary",
	Short: `Retrieving a summary of a benchmark and its associated checks and results.`,
	Long:  `Retrieving a summary of a benchmark and its associated checks and results.`,
	RunE: func(cmd *cobra.Command, args []string) error {
		client, auth, err := kaytu.GetKaytuAuthClient(cmd)
		if err != nil {
			if errors.Is(err, pkg.ExpiredSession) {
				fmt.Println(err.Error())
				return nil
			}
			return fmt.Errorf("[get_compliance_api_v_1_benchmarks_benchmark_id_summary] : %v", err)
		}

		req := compliance.NewGetComplianceAPIV1BenchmarksBenchmarkIDSummaryParams()

		req.SetBenchmarkID(flags.ReadStringFlag(cmd, "BenchmarkID"))
		req.SetConnectionGroup(flags.ReadStringArrayFlag(cmd, "ConnectionGroup"))
		req.SetConnectionID(flags.ReadStringArrayFlag(cmd, "ConnectionID"))
		req.SetConnector(flags.ReadStringArrayFlag(cmd, "Connector"))
		req.SetTimeAt(flags.ReadInt64OptionalFlag(cmd, "TimeAt"))

		resp, err := client.Compliance.GetComplianceAPIV1BenchmarksBenchmarkIDSummary(req, auth)
		if err != nil {
			return fmt.Errorf("[get_compliance_api_v_1_benchmarks_benchmark_id_summary] : %v", err)
		}

		err = pkg.PrintOutput(cmd, "get-compliance-api-v1-benchmarks-benchmark-id-summary", resp.GetPayload())
		if err != nil {
			return fmt.Errorf("[get_compliance_api_v_1_benchmarks_benchmark_id_summary] : %v", err)
		}

		return nil
	},
}

var GetComplianceApiV1BenchmarksBenchmarkIdTreeCmd = &cobra.Command{
	Use:   "get-benchmark-tree",
	Short: `Retrieving the benchmark tree, including all of its child benchmarks.`,
	Long:  `Retrieving the benchmark tree, including all of its child benchmarks.`,
	RunE: func(cmd *cobra.Command, args []string) error {
		client, auth, err := kaytu.GetKaytuAuthClient(cmd)
		if err != nil {
			if errors.Is(err, pkg.ExpiredSession) {
				fmt.Println(err.Error())
				return nil
			}
			return fmt.Errorf("[get_compliance_api_v_1_benchmarks_benchmark_id_tree] : %v", err)
		}

		req := compliance.NewGetComplianceAPIV1BenchmarksBenchmarkIDTreeParams()

		req.SetBenchmarkID(flags.ReadStringFlag(cmd, "BenchmarkID"))

		resp, err := client.Compliance.GetComplianceAPIV1BenchmarksBenchmarkIDTree(req, auth)
		if err != nil {
			return fmt.Errorf("[get_compliance_api_v_1_benchmarks_benchmark_id_tree] : %v", err)
		}

		err = pkg.PrintOutput(cmd, "get-compliance-api-v1-benchmarks-benchmark-id-tree", resp.GetPayload())
		if err != nil {
			return fmt.Errorf("[get_compliance_api_v_1_benchmarks_benchmark_id_tree] : %v", err)
		}

		return nil
	},
}

var GetComplianceApiV1BenchmarksBenchmarkIdTrendCmd = &cobra.Command{
	Use:   "get-benchmark-trend",
	Short: `Retrieving a trend of a benchmark result and checks.`,
	Long:  `Retrieving a trend of a benchmark result and checks.`,
	RunE: func(cmd *cobra.Command, args []string) error {
		client, auth, err := kaytu.GetKaytuAuthClient(cmd)
		if err != nil {
			if errors.Is(err, pkg.ExpiredSession) {
				fmt.Println(err.Error())
				return nil
			}
			return fmt.Errorf("[get_compliance_api_v_1_benchmarks_benchmark_id_trend] : %v", err)
		}

		req := compliance.NewGetComplianceAPIV1BenchmarksBenchmarkIDTrendParams()

		req.SetBenchmarkID(flags.ReadStringFlag(cmd, "BenchmarkID"))
		req.SetConnectionGroup(flags.ReadStringArrayFlag(cmd, "ConnectionGroup"))
		req.SetConnectionID(flags.ReadStringArrayFlag(cmd, "ConnectionID"))
		req.SetConnector(flags.ReadStringArrayFlag(cmd, "Connector"))
		req.SetEndTime(flags.ReadTimeOptionalFlag(cmd, "EndTime"))
		req.SetStartTime(flags.ReadTimeOptionalFlag(cmd, "StartTime"))

		resp, err := client.Compliance.GetComplianceAPIV1BenchmarksBenchmarkIDTrend(req, auth)
		if err != nil {
			return fmt.Errorf("[get_compliance_api_v_1_benchmarks_benchmark_id_trend] : %v", err)
		}

		err = pkg.PrintOutput(cmd, "get-compliance-api-v1-benchmarks-benchmark-id-trend", resp.GetPayload())
		if err != nil {
			return fmt.Errorf("[get_compliance_api_v_1_benchmarks_benchmark_id_trend] : %v", err)
		}

		return nil
	},
}

var PostComplianceApiV1FindingsCmd = &cobra.Command{
	Use:   "get-findings",
	Short: `Retrieving all compliance run findings with respect to filters.`,
	Long:  `Retrieving all compliance run findings with respect to filters.`,
	RunE: func(cmd *cobra.Command, args []string) error {
		client, auth, err := kaytu.GetKaytuAuthClient(cmd)
		if err != nil {
			if errors.Is(err, pkg.ExpiredSession) {
				fmt.Println(err.Error())
				return nil
			}
			return fmt.Errorf("[post_compliance_api_v_1_findings] : %v", err)
		}

		req := compliance.NewPostComplianceAPIV1FindingsParams()

		req.SetRequest(&models.GithubComKaytuIoKaytuEnginePkgComplianceAPIGetFindingsRequest{
			Filters: &models.GithubComKaytuIoKaytuEnginePkgComplianceAPIFindingFilters{
				BenchmarkID:    flags.ReadStringArrayFlag(cmd, "Filters-BenchmarkID"),
				ConnectionID:   flags.ReadStringArrayFlag(cmd, "Filters-ConnectionID"),
				Connector:      flags.ReadEnumArrayFlag[models.SourceType](cmd, "Filters-Connector"),
				PolicyID:       flags.ReadStringArrayFlag(cmd, "Filters-PolicyID"),
				ResourceID:     flags.ReadStringArrayFlag(cmd, "Filters-ResourceID"),
				ResourceTypeID: flags.ReadStringArrayFlag(cmd, "Filters-ResourceTypeID"),
				Severity:       flags.ReadStringArrayFlag(cmd, "Filters-Severity"),
				Status:         flags.ReadEnumArrayFlag[models.TypesComplianceResult](cmd, "Filters-Status"),
			},
			Page: &models.GithubComKaytuIoKaytuEnginePkgComplianceAPIPage{
				No:   flags.ReadInt64Flag(cmd, "Page-No"),
				Size: flags.ReadInt64Flag(cmd, "Page-Size"),
			},
			Sorts: []*models.GithubComKaytuIoKaytuEnginePkgComplianceAPIFindingSortItem{
				{
					Direction: models.GithubComKaytuIoKaytuEnginePkgComplianceAPIDirectionType(flags.ReadStringFlag(cmd, "Sorts-Direction")),
					Field:     models.GithubComKaytuIoKaytuEnginePkgComplianceAPISortFieldType(flags.ReadStringFlag(cmd, "Sorts-Field")),
				},
			},
		})

		resp, err := client.Compliance.PostComplianceAPIV1Findings(req, auth)
		if err != nil {
			return fmt.Errorf("[post_compliance_api_v_1_findings] : %v", err)
		}

		err = pkg.PrintOutput(cmd, "post-compliance-api-v1-findings", resp.GetPayload())
		if err != nil {
			return fmt.Errorf("[post_compliance_api_v_1_findings] : %v", err)
		}

		return nil
	},
}

var GetComplianceApiV1QueriesSyncCmd = &cobra.Command{
	Use:   "sync-queries",
	Short: `Syncs queries with the git backend.`,
	Long:  `Syncs queries with the git backend.`,
	RunE: func(cmd *cobra.Command, args []string) error {
		client, auth, err := kaytu.GetKaytuAuthClient(cmd)
		if err != nil {
			if errors.Is(err, pkg.ExpiredSession) {
				fmt.Println(err.Error())
				return nil
			}
			return fmt.Errorf("[get_compliance_api_v_1_queries_sync] : %v", err)
		}

		req := compliance.NewGetComplianceAPIV1QueriesSyncParams()

		_, err = client.Compliance.GetComplianceAPIV1QueriesSync(req, auth)
		if err != nil {
			return fmt.Errorf("[get_compliance_api_v_1_queries_sync] : %v", err)
		}

		return nil
	},
}
