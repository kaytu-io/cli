// ========== DO NOT EDIT THIS FILE! AUTO GENERATED!!! =========
package gen

import (
	"errors"
	"fmt"

	"github.com/kaytu-io/cli-program/cmd/flags"
	"github.com/kaytu-io/cli-program/pkg"
	"github.com/kaytu-io/cli-program/pkg/api/kaytu"
	"github.com/kaytu-io/cli-program/pkg/api/kaytu/client/compliance"
	"github.com/kaytu-io/cli-program/pkg/api/kaytu/models"
	"github.com/spf13/cobra"
)

var GetComplianceApiV1FindingsBenchmarkIdFieldTopCountCmd = &cobra.Command{
	Use:   "benchmark-findings-top-count",
	Short: `This API enables users to retrieve the top field by finding count.`,
	Long:  `This API enables users to retrieve the top field by finding count.`,
	RunE: func(cmd *cobra.Command, args []string) error {
		client, auth, err := kaytu.GetKaytuAuthClient(cmd)
		if err != nil {
			if errors.Is(err, pkg.ExpiredSession) {
				fmt.Println(err.Error())
				return nil
			}
			return fmt.Errorf("[get_compliance_api_v_1_findings_benchmark_id_field_top_count] : %v", err)
		}

		req := compliance.NewGetComplianceAPIV1FindingsBenchmarkIDFieldTopCountParams()

		req.SetBenchmarkID(flags.ReadStringFlag(cmd, "BenchmarkID"))
		req.SetCount(flags.ReadInt64Flag(cmd, "Count"))
		req.SetField(flags.ReadStringFlag(cmd, "Field"))

		resp, err := client.Compliance.GetComplianceAPIV1FindingsBenchmarkIDFieldTopCount(req, auth)
		if err != nil {
			return fmt.Errorf("[get_compliance_api_v_1_findings_benchmark_id_field_top_count] : %v", err)
		}

		err = pkg.PrintOutput(cmd, "get-compliance-api-v1-findings-benchmark-id-field-top-count", resp.GetPayload())
		if err != nil {
			return fmt.Errorf("[get_compliance_api_v_1_findings_benchmark_id_field_top_count] : %v", err)
		}

		return nil
	},
}

var GetComplianceApiV1BenchmarksBenchmarkIdPoliciesCmd = &cobra.Command{
	Use:   "benchmark-policies",
	Short: `This API returns a list of all policies associated with a specific benchmark. Users can use this API to obtain a comprehensive overview of the policies related to a particular benchmark and their corresponding details, such as their names, descriptions, and IDs.`,
	Long:  `This API returns a list of all policies associated with a specific benchmark. Users can use this API to obtain a comprehensive overview of the policies related to a particular benchmark and their corresponding details, such as their names, descriptions, and IDs.`,
	RunE: func(cmd *cobra.Command, args []string) error {
		client, auth, err := kaytu.GetKaytuAuthClient(cmd)
		if err != nil {
			if errors.Is(err, pkg.ExpiredSession) {
				fmt.Println(err.Error())
				return nil
			}
			return fmt.Errorf("[get_compliance_api_v_1_benchmarks_benchmark_id_policies] : %v", err)
		}

		req := compliance.NewGetComplianceAPIV1BenchmarksBenchmarkIDPoliciesParams()

		req.SetBenchmarkID(flags.ReadStringFlag(cmd, "BenchmarkID"))

		resp, err := client.Compliance.GetComplianceAPIV1BenchmarksBenchmarkIDPolicies(req, auth)
		if err != nil {
			return fmt.Errorf("[get_compliance_api_v_1_benchmarks_benchmark_id_policies] : %v", err)
		}

		err = pkg.PrintOutput(cmd, "get-compliance-api-v1-benchmarks-benchmark-id-policies", resp.GetPayload())
		if err != nil {
			return fmt.Errorf("[get_compliance_api_v_1_benchmarks_benchmark_id_policies] : %v", err)
		}

		return nil
	},
}

var GetComplianceApiV1BenchmarksSummaryCmd = &cobra.Command{
	Use:   "benchmarks-summary",
	Short: `This API enables users to retrieve a summary of all benchmarks and their associated checks and results within a specified time interval. Users can use this API to obtain an overview of all benchmarks, including their names, descriptions, and other relevant information, as well as the checks and their corresponding results within the specified time period.`,
	Long:  `This API enables users to retrieve a summary of all benchmarks and their associated checks and results within a specified time interval. Users can use this API to obtain an overview of all benchmarks, including their names, descriptions, and other relevant information, as well as the checks and their corresponding results within the specified time period.`,
	RunE: func(cmd *cobra.Command, args []string) error {
		client, auth, err := kaytu.GetKaytuAuthClient(cmd)
		if err != nil {
			if errors.Is(err, pkg.ExpiredSession) {
				fmt.Println(err.Error())
				return nil
			}
			return fmt.Errorf("[get_compliance_api_v_1_benchmarks_summary] : %v", err)
		}

		req := compliance.NewGetComplianceAPIV1BenchmarksSummaryParams()

		req.SetConnectionID(flags.ReadStringArrayFlag(cmd, "ConnectionID"))
		req.SetConnector(flags.ReadStringArrayFlag(cmd, "Connector"))
		req.SetTimeAt(flags.ReadInt64OptionalFlag(cmd, "TimeAt"))

		resp, err := client.Compliance.GetComplianceAPIV1BenchmarksSummary(req, auth)
		if err != nil {
			return fmt.Errorf("[get_compliance_api_v_1_benchmarks_summary] : %v", err)
		}

		err = pkg.PrintOutput(cmd, "get-compliance-api-v1-benchmarks-summary", resp.GetPayload())
		if err != nil {
			return fmt.Errorf("[get_compliance_api_v_1_benchmarks_summary] : %v", err)
		}

		return nil
	},
}

var GetComplianceApiV1BenchmarksBenchmarkIdCmd = &cobra.Command{
	Use:   "get-benchmark",
	Short: `This API enables users to retrieve benchmark details by specifying the benchmark ID. Users can use this API to obtain specific details about a particular benchmark, such as its name, description, and other relevant information.`,
	Long:  `This API enables users to retrieve benchmark details by specifying the benchmark ID. Users can use this API to obtain specific details about a particular benchmark, such as its name, description, and other relevant information.`,
	RunE: func(cmd *cobra.Command, args []string) error {
		client, auth, err := kaytu.GetKaytuAuthClient(cmd)
		if err != nil {
			if errors.Is(err, pkg.ExpiredSession) {
				fmt.Println(err.Error())
				return nil
			}
			return fmt.Errorf("[get_compliance_api_v_1_benchmarks_benchmark_id] : %v", err)
		}

		req := compliance.NewGetComplianceAPIV1BenchmarksBenchmarkIDParams()

		req.SetBenchmarkID(flags.ReadStringFlag(cmd, "BenchmarkID"))

		resp, err := client.Compliance.GetComplianceAPIV1BenchmarksBenchmarkID(req, auth)
		if err != nil {
			return fmt.Errorf("[get_compliance_api_v_1_benchmarks_benchmark_id] : %v", err)
		}

		err = pkg.PrintOutput(cmd, "get-compliance-api-v1-benchmarks-benchmark-id", resp.GetPayload())
		if err != nil {
			return fmt.Errorf("[get_compliance_api_v_1_benchmarks_benchmark_id] : %v", err)
		}

		return nil
	},
}

var GetComplianceApiV1BenchmarksBenchmarkIdSummaryCmd = &cobra.Command{
	Use:   "get-benchmark-summary",
	Short: `This API enables users to retrieve a summary of a benchmark and its associated checks and results. Users can use this API to obtain an overview of the benchmark, including its name, description, and other relevant information, as well as the checks and their corresponding results.`,
	Long:  `This API enables users to retrieve a summary of a benchmark and its associated checks and results. Users can use this API to obtain an overview of the benchmark, including its name, description, and other relevant information, as well as the checks and their corresponding results.`,
	RunE: func(cmd *cobra.Command, args []string) error {
		client, auth, err := kaytu.GetKaytuAuthClient(cmd)
		if err != nil {
			if errors.Is(err, pkg.ExpiredSession) {
				fmt.Println(err.Error())
				return nil
			}
			return fmt.Errorf("[get_compliance_api_v_1_benchmarks_benchmark_id_summary] : %v", err)
		}

		req := compliance.NewGetComplianceAPIV1BenchmarksBenchmarkIDSummaryParams()

		req.SetBenchmarkID(flags.ReadStringFlag(cmd, "BenchmarkID"))
		req.SetConnectionID(flags.ReadStringArrayFlag(cmd, "ConnectionID"))
		req.SetConnector(flags.ReadStringArrayFlag(cmd, "Connector"))
		req.SetTimeAt(flags.ReadInt64OptionalFlag(cmd, "TimeAt"))

		resp, err := client.Compliance.GetComplianceAPIV1BenchmarksBenchmarkIDSummary(req, auth)
		if err != nil {
			return fmt.Errorf("[get_compliance_api_v_1_benchmarks_benchmark_id_summary] : %v", err)
		}

		err = pkg.PrintOutput(cmd, "get-compliance-api-v1-benchmarks-benchmark-id-summary", resp.GetPayload())
		if err != nil {
			return fmt.Errorf("[get_compliance_api_v_1_benchmarks_benchmark_id_summary] : %v", err)
		}

		return nil
	},
}

var GetComplianceApiV1BenchmarksBenchmarkIdTrendCmd = &cobra.Command{
	Use:   "get-benchmark-trend",
	Short: `This API enables users to retrieve a trend of a benchmark result and checks`,
	Long:  `This API enables users to retrieve a trend of a benchmark result and checks`,
	RunE: func(cmd *cobra.Command, args []string) error {
		client, auth, err := kaytu.GetKaytuAuthClient(cmd)
		if err != nil {
			if errors.Is(err, pkg.ExpiredSession) {
				fmt.Println(err.Error())
				return nil
			}
			return fmt.Errorf("[get_compliance_api_v_1_benchmarks_benchmark_id_trend] : %v", err)
		}

		req := compliance.NewGetComplianceAPIV1BenchmarksBenchmarkIDTrendParams()

		req.SetBenchmarkID(flags.ReadStringFlag(cmd, "BenchmarkID"))
		req.SetConnectionID(flags.ReadStringArrayFlag(cmd, "ConnectionID"))
		req.SetConnector(flags.ReadStringArrayFlag(cmd, "Connector"))
		req.SetEndTime(flags.ReadInt64OptionalFlag(cmd, "EndTime"))
		req.SetStartTime(flags.ReadInt64OptionalFlag(cmd, "StartTime"))

		resp, err := client.Compliance.GetComplianceAPIV1BenchmarksBenchmarkIDTrend(req, auth)
		if err != nil {
			return fmt.Errorf("[get_compliance_api_v_1_benchmarks_benchmark_id_trend] : %v", err)
		}

		err = pkg.PrintOutput(cmd, "get-compliance-api-v1-benchmarks-benchmark-id-trend", resp.GetPayload())
		if err != nil {
			return fmt.Errorf("[get_compliance_api_v_1_benchmarks_benchmark_id_trend] : %v", err)
		}

		return nil
	},
}

var PostComplianceApiV1FindingsCmd = &cobra.Command{
	Use:   "get-findings",
	Short: `This API enables users to retrieve all compliance run findings with respect to filters. Users can use this API to obtain a list of all compliance run findings that match specific filters, such as compliance run ID, resource ID, results, and other relevant parameters.`,
	Long:  `This API enables users to retrieve all compliance run findings with respect to filters. Users can use this API to obtain a list of all compliance run findings that match specific filters, such as compliance run ID, resource ID, results, and other relevant parameters.`,
	RunE: func(cmd *cobra.Command, args []string) error {
		client, auth, err := kaytu.GetKaytuAuthClient(cmd)
		if err != nil {
			if errors.Is(err, pkg.ExpiredSession) {
				fmt.Println(err.Error())
				return nil
			}
			return fmt.Errorf("[post_compliance_api_v_1_findings] : %v", err)
		}

		req := compliance.NewPostComplianceAPIV1FindingsParams()

		req.SetRequest(&models.GithubComKaytuIoKaytuEnginePkgComplianceAPIGetFindingsRequest{
			Filters: &models.GithubComKaytuIoKaytuEnginePkgComplianceAPIFindingFilters{
				BenchmarkID:    flags.ReadStringArrayFlag(cmd, "Filters-BenchmarkID"),
				ConnectionID:   flags.ReadStringArrayFlag(cmd, "Filters-ConnectionID"),
				Connector:      flags.ReadEnumArrayFlag[models.SourceType](cmd, "Filters-Connector"),
				PolicyID:       flags.ReadStringArrayFlag(cmd, "Filters-PolicyID"),
				ResourceID:     flags.ReadStringArrayFlag(cmd, "Filters-ResourceID"),
				ResourceTypeID: flags.ReadStringArrayFlag(cmd, "Filters-ResourceTypeID"),
				Severity:       flags.ReadStringArrayFlag(cmd, "Filters-Severity"),
				Status:         flags.ReadEnumArrayFlag[models.TypesComplianceResult](cmd, "Filters-Status"),
			},
			Page: &models.GithubComKaytuIoKaytuEnginePkgComplianceAPIPage{
				No:   flags.ReadInt64Flag(cmd, "Page-No"),
				Size: flags.ReadInt64Flag(cmd, "Page-Size"),
			},
			Sorts: []*models.GithubComKaytuIoKaytuEnginePkgComplianceAPIFindingSortItem{
				{
					Direction: models.GithubComKaytuIoKaytuEnginePkgComplianceAPIDirectionType(flags.ReadStringFlag(cmd, "Sorts-Direction")),
					Field:     models.GithubComKaytuIoKaytuEnginePkgComplianceAPISortFieldType(flags.ReadStringFlag(cmd, "Sorts-Field")),
				},
			},
		})

		resp, err := client.Compliance.PostComplianceAPIV1Findings(req, auth)
		if err != nil {
			return fmt.Errorf("[post_compliance_api_v_1_findings] : %v", err)
		}

		err = pkg.PrintOutput(cmd, "post-compliance-api-v1-findings", resp.GetPayload())
		if err != nil {
			return fmt.Errorf("[post_compliance_api_v_1_findings] : %v", err)
		}

		return nil
	},
}

var GetComplianceApiV1BenchmarksPoliciesPolicyIdCmd = &cobra.Command{
	Use:   "get-policy",
	Short: `This API enables users to retrieve policy details by specifying the policy ID. Users can use this API to obtain specific details about a particular policy, such as its title, description, and other relevant information.`,
	Long:  `This API enables users to retrieve policy details by specifying the policy ID. Users can use this API to obtain specific details about a particular policy, such as its title, description, and other relevant information.`,
	RunE: func(cmd *cobra.Command, args []string) error {
		client, auth, err := kaytu.GetKaytuAuthClient(cmd)
		if err != nil {
			if errors.Is(err, pkg.ExpiredSession) {
				fmt.Println(err.Error())
				return nil
			}
			return fmt.Errorf("[get_compliance_api_v_1_benchmarks_policies_policy_id] : %v", err)
		}

		req := compliance.NewGetComplianceAPIV1BenchmarksPoliciesPolicyIDParams()

		req.SetPolicyID(flags.ReadStringFlag(cmd, "PolicyID"))

		resp, err := client.Compliance.GetComplianceAPIV1BenchmarksPoliciesPolicyID(req, auth)
		if err != nil {
			return fmt.Errorf("[get_compliance_api_v_1_benchmarks_policies_policy_id] : %v", err)
		}

		err = pkg.PrintOutput(cmd, "get-compliance-api-v1-benchmarks-policies-policy-id", resp.GetPayload())
		if err != nil {
			return fmt.Errorf("[get_compliance_api_v_1_benchmarks_policies_policy_id] : %v", err)
		}

		return nil
	},
}

var GetComplianceApiV1QueriesQueryIdCmd = &cobra.Command{
	Use:   "get-query",
	Short: `This API enables users to retrieve query details by specifying the query ID.`,
	Long:  `This API enables users to retrieve query details by specifying the query ID.`,
	RunE: func(cmd *cobra.Command, args []string) error {
		client, auth, err := kaytu.GetKaytuAuthClient(cmd)
		if err != nil {
			if errors.Is(err, pkg.ExpiredSession) {
				fmt.Println(err.Error())
				return nil
			}
			return fmt.Errorf("[get_compliance_api_v_1_queries_query_id] : %v", err)
		}

		req := compliance.NewGetComplianceAPIV1QueriesQueryIDParams()

		req.SetQueryID(flags.ReadStringFlag(cmd, "QueryID"))

		resp, err := client.Compliance.GetComplianceAPIV1QueriesQueryID(req, auth)
		if err != nil {
			return fmt.Errorf("[get_compliance_api_v_1_queries_query_id] : %v", err)
		}

		err = pkg.PrintOutput(cmd, "get-compliance-api-v1-queries-query-id", resp.GetPayload())
		if err != nil {
			return fmt.Errorf("[get_compliance_api_v_1_queries_query_id] : %v", err)
		}

		return nil
	},
}

var GetComplianceApiV1BenchmarksCmd = &cobra.Command{
	Use:   "list-benchmarks",
	Short: `This API returns a comprehensive list of all available benchmarks. Users can use this API to obtain an overview of the entire set of benchmarks and their corresponding details, such as their names, descriptions, and IDs.`,
	Long:  `This API returns a comprehensive list of all available benchmarks. Users can use this API to obtain an overview of the entire set of benchmarks and their corresponding details, such as their names, descriptions, and IDs.`,
	RunE: func(cmd *cobra.Command, args []string) error {
		client, auth, err := kaytu.GetKaytuAuthClient(cmd)
		if err != nil {
			if errors.Is(err, pkg.ExpiredSession) {
				fmt.Println(err.Error())
				return nil
			}
			return fmt.Errorf("[get_compliance_api_v_1_benchmarks] : %v", err)
		}

		req := compliance.NewGetComplianceAPIV1BenchmarksParams()

		resp, err := client.Compliance.GetComplianceAPIV1Benchmarks(req, auth)
		if err != nil {
			return fmt.Errorf("[get_compliance_api_v_1_benchmarks] : %v", err)
		}

		err = pkg.PrintOutput(cmd, "get-compliance-api-v1-benchmarks", resp.GetPayload())
		if err != nil {
			return fmt.Errorf("[get_compliance_api_v_1_benchmarks] : %v", err)
		}

		return nil
	},
}

var GetComplianceApiV1QueriesSyncCmd = &cobra.Command{
	Use:   "sync-queries",
	Short: `This API syncs queries with the git backend.`,
	Long:  `This API syncs queries with the git backend.`,
	RunE: func(cmd *cobra.Command, args []string) error {
		client, auth, err := kaytu.GetKaytuAuthClient(cmd)
		if err != nil {
			if errors.Is(err, pkg.ExpiredSession) {
				fmt.Println(err.Error())
				return nil
			}
			return fmt.Errorf("[get_compliance_api_v_1_queries_sync] : %v", err)
		}

		req := compliance.NewGetComplianceAPIV1QueriesSyncParams()

		_, err = client.Compliance.GetComplianceAPIV1QueriesSync(req, auth)
		if err != nil {
			return fmt.Errorf("[get_compliance_api_v_1_queries_sync] : %v", err)
		}

		return nil
	},
}
