// ========== DO NOT EDIT THIS FILE! AUTO GENERATED!!! =========
package gen

import (
	"errors"
	"fmt"

	"github.com/kaytu-io/cli-program/cmd/flags"
	"github.com/kaytu-io/cli-program/pkg"
	"github.com/kaytu-io/cli-program/pkg/api/kaytu"
	"github.com/kaytu-io/cli-program/pkg/api/kaytu/client/alerting"
	"github.com/kaytu-io/cli-program/pkg/api/kaytu/models"
	"github.com/spf13/cobra"
)

var PostAlertingApiV1ActionCreateCmd = &cobra.Command{
	Use:   "create-action",
	Short: `create an action by the specified input`,
	Long:  `create an action by the specified input`,
	RunE: func(cmd *cobra.Command, args []string) error {
		client, auth, err := kaytu.GetKaytuAuthClient(cmd)
		if err != nil {
			if errors.Is(err, pkg.ExpiredSession) {
				fmt.Println(err.Error())
				return nil
			}
			return fmt.Errorf("[post_alerting_api_v_1_action_create] : %v", err)
		}

		req := alerting.NewPostAlertingAPIV1ActionCreateParams()

		req.SetRequest(&models.GithubComKaytuIoKaytuEnginePkgAlertingAPICreateActionReq{
			Body:    flags.ReadStringFlag(cmd, "Body"),
			Headers: flags.ReadMapStringFlag(cmd, "Headers"),
			Method:  flags.ReadStringFlag(cmd, "Method"),
			Name:    flags.ReadStringFlag(cmd, "Name"),
			URL:     flags.ReadStringFlag(cmd, "URL"),
		})

		resp, err := client.Alerting.PostAlertingAPIV1ActionCreate(req, auth)
		if err != nil {
			return fmt.Errorf("[post_alerting_api_v_1_action_create] : %v", err)
		}

		err = pkg.PrintOutput(cmd, "post-alerting-api-v1-action-create", resp.GetPayload())
		if err != nil {
			return fmt.Errorf("[post_alerting_api_v_1_action_create] : %v", err)
		}

		return nil
	},
}

var DeleteAlertingApiV1ActionDeleteActionIdCmd = &cobra.Command{
	Use:   "delete-action",
	Short: `Deleting a single action for the given action id`,
	Long:  `Deleting a single action for the given action id`,
	RunE: func(cmd *cobra.Command, args []string) error {
		client, auth, err := kaytu.GetKaytuAuthClient(cmd)
		if err != nil {
			if errors.Is(err, pkg.ExpiredSession) {
				fmt.Println(err.Error())
				return nil
			}
			return fmt.Errorf("[delete_alerting_api_v_1_action_delete_action_id] : %v", err)
		}

		req := alerting.NewDeleteAlertingAPIV1ActionDeleteActionIDParams()

		req.SetActionID(flags.ReadStringFlag(cmd, "ActionID"))

		resp, err := client.Alerting.DeleteAlertingAPIV1ActionDeleteActionID(req, auth)
		if err != nil {
			return fmt.Errorf("[delete_alerting_api_v_1_action_delete_action_id] : %v", err)
		}

		err = pkg.PrintOutput(cmd, "delete-alerting-api-v1-action-delete-action-id", resp.GetPayload())
		if err != nil {
			return fmt.Errorf("[delete_alerting_api_v_1_action_delete_action_id] : %v", err)
		}

		return nil
	},
}

var DeleteAlertingApiV1RuleDeleteRuleIdCmd = &cobra.Command{
	Use:   "delete-rule",
	Short: `Deleting a single rule for the given rule id`,
	Long:  `Deleting a single rule for the given rule id`,
	RunE: func(cmd *cobra.Command, args []string) error {
		client, auth, err := kaytu.GetKaytuAuthClient(cmd)
		if err != nil {
			if errors.Is(err, pkg.ExpiredSession) {
				fmt.Println(err.Error())
				return nil
			}
			return fmt.Errorf("[delete_alerting_api_v_1_rule_delete_rule_id] : %v", err)
		}

		req := alerting.NewDeleteAlertingAPIV1RuleDeleteRuleIDParams()

		req.SetRuleID(flags.ReadStringFlag(cmd, "RuleID"))

		resp, err := client.Alerting.DeleteAlertingAPIV1RuleDeleteRuleID(req, auth)
		if err != nil {
			return fmt.Errorf("[delete_alerting_api_v_1_rule_delete_rule_id] : %v", err)
		}

		err = pkg.PrintOutput(cmd, "delete-alerting-api-v1-rule-delete-rule-id", resp.GetPayload())
		if err != nil {
			return fmt.Errorf("[delete_alerting_api_v_1_rule_delete_rule_id] : %v", err)
		}

		return nil
	},
}

var GetAlertingApiV1ActionListCmd = &cobra.Command{
	Use:   "list-actions",
	Short: `returns list of all actions`,
	Long:  `returns list of all actions`,
	RunE: func(cmd *cobra.Command, args []string) error {
		client, auth, err := kaytu.GetKaytuAuthClient(cmd)
		if err != nil {
			if errors.Is(err, pkg.ExpiredSession) {
				fmt.Println(err.Error())
				return nil
			}
			return fmt.Errorf("[get_alerting_api_v_1_action_list] : %v", err)
		}

		req := alerting.NewGetAlertingAPIV1ActionListParams()

		resp, err := client.Alerting.GetAlertingAPIV1ActionList(req, auth)
		if err != nil {
			return fmt.Errorf("[get_alerting_api_v_1_action_list] : %v", err)
		}

		err = pkg.PrintOutput(cmd, "get-alerting-api-v1-action-list", resp.GetPayload())
		if err != nil {
			return fmt.Errorf("[get_alerting_api_v_1_action_list] : %v", err)
		}

		return nil
	},
}

var GetAlertingApiV1RuleListCmd = &cobra.Command{
	Use:   "list-rules",
	Short: `returns list of all rules`,
	Long:  `returns list of all rules`,
	RunE: func(cmd *cobra.Command, args []string) error {
		client, auth, err := kaytu.GetKaytuAuthClient(cmd)
		if err != nil {
			if errors.Is(err, pkg.ExpiredSession) {
				fmt.Println(err.Error())
				return nil
			}
			return fmt.Errorf("[get_alerting_api_v_1_rule_list] : %v", err)
		}

		req := alerting.NewGetAlertingAPIV1RuleListParams()

		resp, err := client.Alerting.GetAlertingAPIV1RuleList(req, auth)
		if err != nil {
			return fmt.Errorf("[get_alerting_api_v_1_rule_list] : %v", err)
		}

		err = pkg.PrintOutput(cmd, "get-alerting-api-v1-rule-list", resp.GetPayload())
		if err != nil {
			return fmt.Errorf("[get_alerting_api_v_1_rule_list] : %v", err)
		}

		return nil
	},
}

var GetAlertingApiV1RuleRuleIdTriggerCmd = &cobra.Command{
	Use:   "trigger-rule",
	Short: `Trigger one rule manually`,
	Long:  `Trigger one rule manually`,
	RunE: func(cmd *cobra.Command, args []string) error {
		client, auth, err := kaytu.GetKaytuAuthClient(cmd)
		if err != nil {
			if errors.Is(err, pkg.ExpiredSession) {
				fmt.Println(err.Error())
				return nil
			}
			return fmt.Errorf("[get_alerting_api_v_1_rule_rule_id_trigger] : %v", err)
		}

		req := alerting.NewGetAlertingAPIV1RuleRuleIDTriggerParams()

		req.SetRuleID(flags.ReadStringFlag(cmd, "RuleID"))

		resp, err := client.Alerting.GetAlertingAPIV1RuleRuleIDTrigger(req, auth)
		if err != nil {
			return fmt.Errorf("[get_alerting_api_v_1_rule_rule_id_trigger] : %v", err)
		}

		err = pkg.PrintOutput(cmd, "get-alerting-api-v1-rule-rule-id-trigger", resp.GetPayload())
		if err != nil {
			return fmt.Errorf("[get_alerting_api_v_1_rule_rule_id_trigger] : %v", err)
		}

		return nil
	},
}

var PutAlertingApiV1ActionUpdateActionIdCmd = &cobra.Command{
	Use:   "update-action",
	Short: `Retrieving an action by the specified input`,
	Long:  `Retrieving an action by the specified input`,
	RunE: func(cmd *cobra.Command, args []string) error {
		client, auth, err := kaytu.GetKaytuAuthClient(cmd)
		if err != nil {
			if errors.Is(err, pkg.ExpiredSession) {
				fmt.Println(err.Error())
				return nil
			}
			return fmt.Errorf("[put_alerting_api_v_1_action_update_action_id] : %v", err)
		}

		req := alerting.NewPutAlertingAPIV1ActionUpdateActionIDParams()

		req.SetActionID(flags.ReadStringFlag(cmd, "ActionID"))
		req.SetRequest(&models.GithubComKaytuIoKaytuEnginePkgAlertingAPIUpdateActionRequest{
			Body:    flags.ReadStringFlag(cmd, "Body"),
			Headers: flags.ReadMapStringFlag(cmd, "Headers"),
			Method:  flags.ReadStringFlag(cmd, "Method"),
			Name:    flags.ReadStringFlag(cmd, "Name"),
			URL:     flags.ReadStringFlag(cmd, "URL"),
		})

		resp, err := client.Alerting.PutAlertingAPIV1ActionUpdateActionID(req, auth)
		if err != nil {
			return fmt.Errorf("[put_alerting_api_v_1_action_update_action_id] : %v", err)
		}

		err = pkg.PrintOutput(cmd, "put-alerting-api-v1-action-update-action-id", resp.GetPayload())
		if err != nil {
			return fmt.Errorf("[put_alerting_api_v_1_action_update_action_id] : %v", err)
		}

		return nil
	},
}
