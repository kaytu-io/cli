// ========== DO NOT EDIT THIS FILE! AUTO GENERATED!!! =========
package gen

import (
	"errors"
	"fmt"

	"github.com/kaytu-io/cli-program/cmd/flags"
	"github.com/kaytu-io/cli-program/pkg"
	"github.com/kaytu-io/cli-program/pkg/api/kaytu"
	"github.com/kaytu-io/cli-program/pkg/api/kaytu/client/keys"
	"github.com/kaytu-io/cli-program/pkg/api/kaytu/models"
	"github.com/spf13/cobra"
)

var PostAuthApiV1KeyCreateCmd = &cobra.Command{
	Use:   "create-key",
	Short: `Creates workspace key for the defined role with the defined name in the workspace.`,
	Long:  `Creates workspace key for the defined role with the defined name in the workspace.`,
	RunE: func(cmd *cobra.Command, args []string) error {
		client, auth, err := kaytu.GetKaytuAuthClient(cmd)
		if err != nil {
			if errors.Is(err, pkg.ExpiredSession) {
				fmt.Println(err.Error())
				return nil
			}
			return fmt.Errorf("[post_auth_api_v_1_key_create] : %v", err)
		}

		req := keys.NewPostAuthAPIV1KeyCreateParams()

		req.SetRequest(&models.GithubComKaytuIoKaytuEnginePkgAuthAPICreateAPIKeyRequest{
			Name:     flags.ReadStringFlag(cmd, "Name"),
			RoleName: models.GithubComKaytuIoKaytuEnginePkgAuthAPIRole(flags.ReadStringFlag(cmd, "RoleName")),
		})

		resp, err := client.Keys.PostAuthAPIV1KeyCreate(req, auth)
		if err != nil {
			return fmt.Errorf("[post_auth_api_v_1_key_create] : %v", err)
		}

		err = pkg.PrintOutput(cmd, "post-auth-api-v1-key-create", resp.GetPayload())
		if err != nil {
			return fmt.Errorf("[post_auth_api_v_1_key_create] : %v", err)
		}

		return nil
	},
}

var GetAuthApiV1KeysCmd = &cobra.Command{
	Use:   "list-keys",
	Short: `Gets list of all keys in the workspace.`,
	Long:  `Gets list of all keys in the workspace.`,
	RunE: func(cmd *cobra.Command, args []string) error {
		client, auth, err := kaytu.GetKaytuAuthClient(cmd)
		if err != nil {
			if errors.Is(err, pkg.ExpiredSession) {
				fmt.Println(err.Error())
				return nil
			}
			return fmt.Errorf("[get_auth_api_v_1_keys] : %v", err)
		}

		req := keys.NewGetAuthAPIV1KeysParams()

		resp, err := client.Keys.GetAuthAPIV1Keys(req, auth)
		if err != nil {
			return fmt.Errorf("[get_auth_api_v_1_keys] : %v", err)
		}

		err = pkg.PrintOutput(cmd, "get-auth-api-v1-keys", resp.GetPayload())
		if err != nil {
			return fmt.Errorf("[get_auth_api_v_1_keys] : %v", err)
		}

		return nil
	},
}

var DeleteAuthApiV1KeyIdDeleteCmd = &cobra.Command{
	Use:   "remove-key",
	Short: `Deletes the specified workspace key by ID.`,
	Long:  `Deletes the specified workspace key by ID.`,
	RunE: func(cmd *cobra.Command, args []string) error {
		client, auth, err := kaytu.GetKaytuAuthClient(cmd)
		if err != nil {
			if errors.Is(err, pkg.ExpiredSession) {
				fmt.Println(err.Error())
				return nil
			}
			return fmt.Errorf("[delete_auth_api_v_1_key_id_delete] : %v", err)
		}

		req := keys.NewDeleteAuthAPIV1KeyIDDeleteParams()

		req.SetID(flags.ReadStringFlag(cmd, "ID"))

		_, err = client.Keys.DeleteAuthAPIV1KeyIDDelete(req, auth)
		if err != nil {
			return fmt.Errorf("[delete_auth_api_v_1_key_id_delete] : %v", err)
		}

		return nil
	},
}
