// ========== DO NOT EDIT THIS FILE! AUTO GENERATED!!! =========
package gen

import (
	"errors"
	"fmt"

	"github.com/kaytu-io/cli-program/cmd/flags"
	"github.com/kaytu-io/cli-program/pkg"
	"github.com/kaytu-io/cli-program/pkg/api/kaytu"
	"github.com/kaytu-io/cli-program/pkg/api/kaytu/client/metadata"
	"github.com/kaytu-io/cli-program/pkg/api/kaytu/models"
	"github.com/spf13/cobra"
)

var PostMetadataApiV1FilterCmd = &cobra.Command{
	Use:   "add-filter",
	Short: ``,
	Long:  ``,
	RunE: func(cmd *cobra.Command, args []string) error {
		client, auth, err := kaytu.GetKaytuAuthClient(cmd)
		if err != nil {
			if errors.Is(err, pkg.ExpiredSession) {
				fmt.Println(err.Error())
				return nil
			}
			return fmt.Errorf("[post_metadata_api_v_1_filter] : %v", err)
		}

		req := metadata.NewPostMetadataAPIV1FilterParams()

		req.SetReq(&models.GithubComKaytuIoKaytuEnginePkgMetadataModelsFilter{
			KayValue: flags.ReadMapStringFlag(cmd, "KayValue"),
			Name:     flags.ReadStringFlag(cmd, "Name"),
		})

		_, err = client.Metadata.PostMetadataAPIV1Filter(req, auth)
		if err != nil {
			return fmt.Errorf("[post_metadata_api_v_1_filter] : %v", err)
		}

		return nil
	},
}

var GetMetadataApiV1MetadataKeyCmd = &cobra.Command{
	Use:   "get-config-metadata",
	Short: `Returns the config metadata for the given key`,
	Long:  `Returns the config metadata for the given key`,
	RunE: func(cmd *cobra.Command, args []string) error {
		client, auth, err := kaytu.GetKaytuAuthClient(cmd)
		if err != nil {
			if errors.Is(err, pkg.ExpiredSession) {
				fmt.Println(err.Error())
				return nil
			}
			return fmt.Errorf("[get_metadata_api_v_1_metadata_key] : %v", err)
		}

		req := metadata.NewGetMetadataAPIV1MetadataKeyParams()

		req.SetKey(flags.ReadStringFlag(cmd, "Key"))

		resp, err := client.Metadata.GetMetadataAPIV1MetadataKey(req, auth)
		if err != nil {
			return fmt.Errorf("[get_metadata_api_v_1_metadata_key] : %v", err)
		}

		err = pkg.PrintOutput(cmd, "get-metadata-api-v1-metadata-key", resp.GetPayload())
		if err != nil {
			return fmt.Errorf("[get_metadata_api_v_1_metadata_key] : %v", err)
		}

		return nil
	},
}

var GetMetadataApiV1FilterCmd = &cobra.Command{
	Use:   "list-filters",
	Short: ``,
	Long:  ``,
	RunE: func(cmd *cobra.Command, args []string) error {
		client, auth, err := kaytu.GetKaytuAuthClient(cmd)
		if err != nil {
			if errors.Is(err, pkg.ExpiredSession) {
				fmt.Println(err.Error())
				return nil
			}
			return fmt.Errorf("[get_metadata_api_v_1_filter] : %v", err)
		}

		req := metadata.NewGetMetadataAPIV1FilterParams()

		resp, err := client.Metadata.GetMetadataAPIV1Filter(req, auth)
		if err != nil {
			return fmt.Errorf("[get_metadata_api_v_1_filter] : %v", err)
		}

		err = pkg.PrintOutput(cmd, "get-metadata-api-v1-filter", resp.GetPayload())
		if err != nil {
			return fmt.Errorf("[get_metadata_api_v_1_filter] : %v", err)
		}

		return nil
	},
}

var PostMetadataApiV1MetadataCmd = &cobra.Command{
	Use:   "set-config-metadata",
	Short: `Sets the config metadata for the given key`,
	Long:  `Sets the config metadata for the given key`,
	RunE: func(cmd *cobra.Command, args []string) error {
		client, auth, err := kaytu.GetKaytuAuthClient(cmd)
		if err != nil {
			if errors.Is(err, pkg.ExpiredSession) {
				fmt.Println(err.Error())
				return nil
			}
			return fmt.Errorf("[post_metadata_api_v_1_metadata] : %v", err)
		}

		req := metadata.NewPostMetadataAPIV1MetadataParams()

		req.SetReq(&models.GithubComKaytuIoKaytuEnginePkgMetadataAPISetConfigMetadataRequest{
			Key:   flags.ReadStringFlag(cmd, "Key"),
			Value: interface{}(flags.ReadStringFlag(cmd, "Value")),
		})

		_, err = client.Metadata.PostMetadataAPIV1Metadata(req, auth)
		if err != nil {
			return fmt.Errorf("[post_metadata_api_v_1_metadata] : %v", err)
		}

		return nil
	},
}
