// ========== DO NOT EDIT THIS FILE! AUTO GENERATED!!! =========
package gen

import (
	"errors"
	"fmt"

	"github.com/kaytu-io/cli-program/cmd/flags"
	"github.com/kaytu-io/cli-program/pkg"
	"github.com/kaytu-io/cli-program/pkg/api/kaytu"
	"github.com/kaytu-io/cli-program/pkg/api/kaytu/client/smart_query"
	"github.com/kaytu-io/cli-program/pkg/api/kaytu/models"
	"github.com/spf13/cobra"
)

var GetInventoryApiV1QueryRunHistoryCmd = &cobra.Command{
	Use:   "get-query-run-history",
	Short: `List queries which have been run recently`,
	Long:  `List queries which have been run recently`,
	RunE: func(cmd *cobra.Command, args []string) error {
		client, auth, err := kaytu.GetKaytuAuthClient(cmd)
		if err != nil {
			if errors.Is(err, pkg.ExpiredSession) {
				fmt.Println(err.Error())
				return nil
			}
			return fmt.Errorf("[get_inventory_api_v_1_query_run_history] : %v", err)
		}

		req := smart_query.NewGetInventoryAPIV1QueryRunHistoryParams()

		resp, err := client.SmartQuery.GetInventoryAPIV1QueryRunHistory(req, auth)
		if err != nil {
			return fmt.Errorf("[get_inventory_api_v_1_query_run_history] : %v", err)
		}

		err = pkg.PrintOutput(cmd, "get-inventory-api-v1-query-run-history", resp.GetPayload())
		if err != nil {
			return fmt.Errorf("[get_inventory_api_v_1_query_run_history] : %v", err)
		}

		return nil
	},
}

var GetInventoryApiV1QueryCmd = &cobra.Command{
	Use:   "list-queries",
	Short: `Retrieving list of smart queries by specified filters`,
	Long:  `Retrieving list of smart queries by specified filters`,
	RunE: func(cmd *cobra.Command, args []string) error {
		client, auth, err := kaytu.GetKaytuAuthClient(cmd)
		if err != nil {
			if errors.Is(err, pkg.ExpiredSession) {
				fmt.Println(err.Error())
				return nil
			}
			return fmt.Errorf("[get_inventory_api_v_1_query] : %v", err)
		}

		req := smart_query.NewGetInventoryAPIV1QueryParams()

		req.SetRequest(&models.GithubComKaytuIoKaytuEnginePkgInventoryAPIListQueryRequest{
			ConnectorsFilter: flags.ReadEnumArrayFlag[models.SourceType](cmd, "ConnectorsFilter"),
			TitleFilter:      flags.ReadStringFlag(cmd, "TitleFilter"),
		})

		resp, err := client.SmartQuery.GetInventoryAPIV1Query(req, auth)
		if err != nil {
			return fmt.Errorf("[get_inventory_api_v_1_query] : %v", err)
		}

		err = pkg.PrintOutput(cmd, "get-inventory-api-v1-query", resp.GetPayload())
		if err != nil {
			return fmt.Errorf("[get_inventory_api_v_1_query] : %v", err)
		}

		return nil
	},
}

var PostInventoryApiV1QueryRunCmd = &cobra.Command{
	Use:   "run-query",
	Short: `Run provided smart query and returns the result.`,
	Long:  `Run provided smart query and returns the result.`,
	RunE: func(cmd *cobra.Command, args []string) error {
		client, auth, err := kaytu.GetKaytuAuthClient(cmd)
		if err != nil {
			if errors.Is(err, pkg.ExpiredSession) {
				fmt.Println(err.Error())
				return nil
			}
			return fmt.Errorf("[post_inventory_api_v_1_query_run] : %v", err)
		}

		req := smart_query.NewPostInventoryAPIV1QueryRunParams()

		req.SetAccept(flags.ReadStringFlag(cmd, "Accept"))
		req.SetRequest(&models.GithubComKaytuIoKaytuEnginePkgInventoryAPIRunQueryRequest{
			Page: &models.GithubComKaytuIoKaytuEnginePkgInventoryAPIPage{
				No:   flags.ReadInt64Flag(cmd, "Page-No"),
				Size: flags.ReadInt64Flag(cmd, "Page-Size"),
			},
			Query: flags.ReadStringFlag(cmd, "Query"),
			Sorts: []*models.GithubComKaytuIoKaytuEnginePkgInventoryAPISmartQuerySortItem{
				{
					Direction: models.GithubComKaytuIoKaytuEnginePkgInventoryAPIDirectionType(flags.ReadStringFlag(cmd, "Sorts-Direction")),
					Field:     flags.ReadStringFlag(cmd, "Sorts-Field"),
				},
			},
		})

		resp, err := client.SmartQuery.PostInventoryAPIV1QueryRun(req, auth)
		if err != nil {
			return fmt.Errorf("[post_inventory_api_v_1_query_run] : %v", err)
		}

		err = pkg.PrintOutput(cmd, "post-inventory-api-v1-query-run", resp.GetPayload())
		if err != nil {
			return fmt.Errorf("[post_inventory_api_v_1_query_run] : %v", err)
		}

		return nil
	},
}
