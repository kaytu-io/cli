// ========== DO NOT EDIT THIS FILE! AUTO GENERATED!!! =========
package asset

import (
	"errors"
	"fmt"

	"github.com/kaytu-io/cli-program/cmd/flags"
	"github.com/kaytu-io/cli-program/pkg"
	kaytuSDK "github.com/kaytu-io/cli-program/pkg/api/kaytu"
	"github.com/kaytu-io/cli-program/pkg/api/kaytu/client/analytics"
	"github.com/spf13/cobra"
)

var MetricsCmd = &cobra.Command{
	Use: "metrics",
	RunE: func(cmd *cobra.Command, args []string) error {

		client, auth, err := kaytuSDK.GetKaytuAuthClient(cmd)
		if err != nil {
			if errors.Is(err, pkg.ExpiredSession) {
				fmt.Println(err.Error())
				return nil
			}
			panic(err)
		}

		req := analytics.NewGetInventoryAPIV2AnalyticsMetricParams()

		req.SetConnectionGroup(flags.ReadStringArrayFlag(cmd, "ConnectionGroup"))

		req.SetConnectionID(flags.ReadStringArrayFlag(cmd, "ConnectionID"))

		req.SetConnector(flags.ReadStringArrayFlag(cmd, "Connector"))

		req.SetEndTime(flags.ReadInt64OptionalFlag(cmd, "EndTime"))

		req.SetMetricIDs(flags.ReadStringArrayFlag(cmd, "MetricIDs"))

		req.SetMetricType(flags.ReadStringOptionalFlag(cmd, "MetricType"))

		req.SetMinCount(flags.ReadInt64OptionalFlag(cmd, "MinCount"))

		req.SetPageNumber(flags.ReadInt64OptionalFlag(cmd, "PageNumber"))

		req.SetPageSize(flags.ReadInt64OptionalFlag(cmd, "PageSize"))

		req.SetResourceCollection(flags.ReadStringArrayFlag(cmd, "ResourceCollection"))

		req.SetSortBy(flags.ReadStringOptionalFlag(cmd, "SortBy"))

		req.SetStartTime(flags.ReadInt64OptionalFlag(cmd, "StartTime"))

		req.SetTag(flags.ReadStringArrayFlag(cmd, "Tag"))

		resp, err := client.Analytics.GetInventoryAPIV2AnalyticsMetric(req, auth)
		if err != nil {
			return fmt.Errorf("[GetInventoryAPIV2AnalyticsMetric] : %v", err)
		}

		err = pkg.PrintOutput(cmd, "GetInventoryAPIV2AnalyticsMetric", resp.GetPayload())
		if err != nil {
			return fmt.Errorf("[GetInventoryAPIV2AnalyticsMetric] : %v", err)
		}

		return nil

	},
}

func init() {

	MetricsCmd.Flags().StringArray("connection-group", nil, "Connection group to filter by - mutually exclusive with connectionId")

	MetricsCmd.Flags().StringArray("connection-id", nil, "Connection IDs to filter by - mutually exclusive with connectionGroup")

	MetricsCmd.Flags().StringArray("connector", nil, "Connector type to filter by")

	MetricsCmd.Flags().Int64("end-time", 0, "timestamp for resource count in epoch seconds")

	MetricsCmd.Flags().StringArray("metric-i-ds", nil, "Metric IDs")

	MetricsCmd.Flags().String("metric-type", "", "Metric type, default: assets")

	MetricsCmd.Flags().Int64("min-count", 0, "Minimum number of resources with this tag value, default 1")

	MetricsCmd.Flags().Int64("page-number", 0, "page number - default is 1")

	MetricsCmd.Flags().Int64("page-size", 0, "page size - default is 20")

	MetricsCmd.Flags().StringArray("resource-collection", nil, "Resource collection IDs to filter by")

	MetricsCmd.Flags().String("sort-by", "", "Sort by field - default is count")

	MetricsCmd.Flags().Int64("start-time", 0, "timestamp for resource count change comparison in epoch seconds")

	MetricsCmd.Flags().StringArray("tag", nil, "Key-Value tags in key=value format to filter by")

}
