// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GitlabComKeibiengineKeibiEnginePkgAuthAPIRoleUser gitlab com keibiengine keibi engine pkg auth api role user
//
// swagger:model gitlab_com_keibiengine_keibi-engine_pkg_auth_api.RoleUser
type GitlabComKeibiengineKeibiEnginePkgAuthAPIRoleUser struct {

	// Is the user blocked or not
	// Example: false
	Blocked bool `json:"blocked,omitempty"`

	// Creation timestamp in UTC
	CreatedAt string `json:"createdAt,omitempty"`

	// Email address of the user
	// Example: sample@gmail.com
	Email string `json:"email,omitempty"`

	// Is email verified or not
	// Example: true
	EmailVerified bool `json:"emailVerified,omitempty"`

	// Last activity timestamp in UTC
	LastActivity string `json:"lastActivity,omitempty"`

	// Name of the role
	// Example: admin
	// Enum: [admin editor viewer]
	RoleName struct {
		GitlabComKeibiengineKeibiEnginePkgAuthAPIRole
	} `json:"roleName,omitempty"`

	// Invite status
	// Example: pending
	// Enum: [accepted pending]
	Status struct {
		GitlabComKeibiengineKeibiEnginePkgAuthAPIInviteStatus
	} `json:"status,omitempty"`

	// Unique identifier for the user
	// Example: sampleID
	UserID string `json:"userId,omitempty"`

	// Username
	// Example: sampleName
	UserName string `json:"userName,omitempty"`

	// A list of workspace ids which the user has the specified role in them
	// Example: ["demo"]
	Workspaces []string `json:"workspaces"`
}

// Validate validates this gitlab com keibiengine keibi engine pkg auth api role user
func (m *GitlabComKeibiengineKeibiEnginePkgAuthAPIRoleUser) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRoleName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var gitlabComKeibiengineKeibiEnginePkgAuthApiRoleUserTypeRoleNamePropEnum []interface{}

func init() {
	var res []GitlabComKeibiengineKeibiEnginePkgAuthAPIRole
	if err := json.Unmarshal([]byte(`["admin","editor","viewer"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		gitlabComKeibiengineKeibiEnginePkgAuthApiRoleUserTypeRoleNamePropEnum = append(gitlabComKeibiengineKeibiEnginePkgAuthApiRoleUserTypeRoleNamePropEnum, v)
	}
}

// prop value enum
func (m *GitlabComKeibiengineKeibiEnginePkgAuthAPIRoleUser) validateRoleNameEnum(path, location string, value *struct {
	GitlabComKeibiengineKeibiEnginePkgAuthAPIRole
}) error {
	if err := validate.EnumCase(path, location, value, gitlabComKeibiengineKeibiEnginePkgAuthApiRoleUserTypeRoleNamePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *GitlabComKeibiengineKeibiEnginePkgAuthAPIRoleUser) validateRoleName(formats strfmt.Registry) error {
	if swag.IsZero(m.RoleName) { // not required
		return nil
	}

	return nil
}

var gitlabComKeibiengineKeibiEnginePkgAuthApiRoleUserTypeStatusPropEnum []interface{}

func init() {
	var res []GitlabComKeibiengineKeibiEnginePkgAuthAPIInviteStatus
	if err := json.Unmarshal([]byte(`["accepted","pending"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		gitlabComKeibiengineKeibiEnginePkgAuthApiRoleUserTypeStatusPropEnum = append(gitlabComKeibiengineKeibiEnginePkgAuthApiRoleUserTypeStatusPropEnum, v)
	}
}

// prop value enum
func (m *GitlabComKeibiengineKeibiEnginePkgAuthAPIRoleUser) validateStatusEnum(path, location string, value *struct {
	GitlabComKeibiengineKeibiEnginePkgAuthAPIInviteStatus
}) error {
	if err := validate.EnumCase(path, location, value, gitlabComKeibiengineKeibiEnginePkgAuthApiRoleUserTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *GitlabComKeibiengineKeibiEnginePkgAuthAPIRoleUser) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	return nil
}

// ContextValidate validate this gitlab com keibiengine keibi engine pkg auth api role user based on the context it is used
func (m *GitlabComKeibiengineKeibiEnginePkgAuthAPIRoleUser) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateRoleName(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GitlabComKeibiengineKeibiEnginePkgAuthAPIRoleUser) contextValidateRoleName(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *GitlabComKeibiengineKeibiEnginePkgAuthAPIRoleUser) contextValidateStatus(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

// MarshalBinary interface implementation
func (m *GitlabComKeibiengineKeibiEnginePkgAuthAPIRoleUser) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GitlabComKeibiengineKeibiEnginePkgAuthAPIRoleUser) UnmarshalBinary(b []byte) error {
	var res GitlabComKeibiengineKeibiEnginePkgAuthAPIRoleUser
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
