// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// GitlabComKeibiengineKeibiEnginePkgInventoryAPIResourceFiltersResponse gitlab com keibiengine keibi engine pkg inventory api resource filters response
//
// swagger:model gitlab_com_keibiengine_keibi-engine_pkg_inventory_api.ResourceFiltersResponse
type GitlabComKeibiengineKeibiEnginePkgInventoryAPIResourceFiltersResponse struct {

	// if you dont need to use this filter, leave them empty. (e.g. [])
	Category map[string]string `json:"category,omitempty"`

	// if you dont need to use this filter, leave them empty. (e.g. [])
	Connections []*GitlabComKeibiengineKeibiEnginePkgInventoryAPIConnectionFull `json:"connections"`

	// if you dont need to use this filter, leave them empty. (e.g. [])
	Location []string `json:"location"`

	// if you dont need to use this filter, leave them empty. (e.g. [])
	Provider []string `json:"provider"`

	// if you dont need to use this filter, leave them empty. (e.g. [])
	ResourceType []*GitlabComKeibiengineKeibiEnginePkgInventoryAPIResourceTypeFull `json:"resourceType"`

	// if you dont need to use this filter, leave them empty. (e.g. [])
	Service map[string]string `json:"service,omitempty"`

	// if you dont need to use this filter, leave them empty. (e.g. [])
	TagKeys []string `json:"tagKeys"`

	// if you dont need to use this filter, leave them empty. (e.g. [])
	TagValues map[string][]string `json:"tagValues,omitempty"`
}

// Validate validates this gitlab com keibiengine keibi engine pkg inventory api resource filters response
func (m *GitlabComKeibiengineKeibiEnginePkgInventoryAPIResourceFiltersResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConnections(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResourceType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GitlabComKeibiengineKeibiEnginePkgInventoryAPIResourceFiltersResponse) validateConnections(formats strfmt.Registry) error {
	if swag.IsZero(m.Connections) { // not required
		return nil
	}

	for i := 0; i < len(m.Connections); i++ {
		if swag.IsZero(m.Connections[i]) { // not required
			continue
		}

		if m.Connections[i] != nil {
			if err := m.Connections[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("connections" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("connections" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *GitlabComKeibiengineKeibiEnginePkgInventoryAPIResourceFiltersResponse) validateResourceType(formats strfmt.Registry) error {
	if swag.IsZero(m.ResourceType) { // not required
		return nil
	}

	for i := 0; i < len(m.ResourceType); i++ {
		if swag.IsZero(m.ResourceType[i]) { // not required
			continue
		}

		if m.ResourceType[i] != nil {
			if err := m.ResourceType[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("resourceType" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("resourceType" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this gitlab com keibiengine keibi engine pkg inventory api resource filters response based on the context it is used
func (m *GitlabComKeibiengineKeibiEnginePkgInventoryAPIResourceFiltersResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateConnections(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateResourceType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GitlabComKeibiengineKeibiEnginePkgInventoryAPIResourceFiltersResponse) contextValidateConnections(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Connections); i++ {

		if m.Connections[i] != nil {
			if err := m.Connections[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("connections" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("connections" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *GitlabComKeibiengineKeibiEnginePkgInventoryAPIResourceFiltersResponse) contextValidateResourceType(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ResourceType); i++ {

		if m.ResourceType[i] != nil {
			if err := m.ResourceType[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("resourceType" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("resourceType" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *GitlabComKeibiengineKeibiEnginePkgInventoryAPIResourceFiltersResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GitlabComKeibiengineKeibiEnginePkgInventoryAPIResourceFiltersResponse) UnmarshalBinary(b []byte) error {
	var res GitlabComKeibiengineKeibiEnginePkgInventoryAPIResourceFiltersResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
