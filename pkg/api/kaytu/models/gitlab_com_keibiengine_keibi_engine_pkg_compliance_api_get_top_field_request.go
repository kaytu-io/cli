// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GitlabComKeibiengineKeibiEnginePkgComplianceAPIGetTopFieldRequest gitlab com keibiengine keibi engine pkg compliance api get top field request
//
// swagger:model gitlab_com_keibiengine_keibi-engine_pkg_compliance_api.GetTopFieldRequest
type GitlabComKeibiengineKeibiEnginePkgComplianceAPIGetTopFieldRequest struct {

	// count
	Count int64 `json:"count,omitempty"`

	// field
	// Enum: [resourceType serviceName sourceID resourceID]
	Field struct {
		GitlabComKeibiengineKeibiEnginePkgComplianceAPITopField
	} `json:"field,omitempty"`

	// filters
	Filters *GitlabComKeibiengineKeibiEnginePkgComplianceAPIFindingFilters `json:"filters,omitempty"`
}

// Validate validates this gitlab com keibiengine keibi engine pkg compliance api get top field request
func (m *GitlabComKeibiengineKeibiEnginePkgComplianceAPIGetTopFieldRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateField(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFilters(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var gitlabComKeibiengineKeibiEnginePkgComplianceApiGetTopFieldRequestTypeFieldPropEnum []interface{}

func init() {
	var res []GitlabComKeibiengineKeibiEnginePkgComplianceAPITopField
	if err := json.Unmarshal([]byte(`["resourceType","serviceName","sourceID","resourceID"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		gitlabComKeibiengineKeibiEnginePkgComplianceApiGetTopFieldRequestTypeFieldPropEnum = append(gitlabComKeibiengineKeibiEnginePkgComplianceApiGetTopFieldRequestTypeFieldPropEnum, v)
	}
}

// prop value enum
func (m *GitlabComKeibiengineKeibiEnginePkgComplianceAPIGetTopFieldRequest) validateFieldEnum(path, location string, value *struct {
	GitlabComKeibiengineKeibiEnginePkgComplianceAPITopField
}) error {
	if err := validate.EnumCase(path, location, value, gitlabComKeibiengineKeibiEnginePkgComplianceApiGetTopFieldRequestTypeFieldPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *GitlabComKeibiengineKeibiEnginePkgComplianceAPIGetTopFieldRequest) validateField(formats strfmt.Registry) error {
	if swag.IsZero(m.Field) { // not required
		return nil
	}

	return nil
}

func (m *GitlabComKeibiengineKeibiEnginePkgComplianceAPIGetTopFieldRequest) validateFilters(formats strfmt.Registry) error {
	if swag.IsZero(m.Filters) { // not required
		return nil
	}

	if m.Filters != nil {
		if err := m.Filters.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("filters")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("filters")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this gitlab com keibiengine keibi engine pkg compliance api get top field request based on the context it is used
func (m *GitlabComKeibiengineKeibiEnginePkgComplianceAPIGetTopFieldRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateField(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFilters(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GitlabComKeibiengineKeibiEnginePkgComplianceAPIGetTopFieldRequest) contextValidateField(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *GitlabComKeibiengineKeibiEnginePkgComplianceAPIGetTopFieldRequest) contextValidateFilters(ctx context.Context, formats strfmt.Registry) error {

	if m.Filters != nil {
		if err := m.Filters.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("filters")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("filters")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GitlabComKeibiengineKeibiEnginePkgComplianceAPIGetTopFieldRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GitlabComKeibiengineKeibiEnginePkgComplianceAPIGetTopFieldRequest) UnmarshalBinary(b []byte) error {
	var res GitlabComKeibiengineKeibiEnginePkgComplianceAPIGetTopFieldRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
