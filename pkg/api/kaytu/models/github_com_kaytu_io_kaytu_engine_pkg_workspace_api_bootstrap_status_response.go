// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// GithubComKaytuIoKaytuEnginePkgWorkspaceAPIBootstrapStatusResponse github com kaytu io kaytu engine pkg workspace api bootstrap status response
//
// swagger:model github_com_kaytu-io_kaytu-engine_pkg_workspace_api.BootstrapStatusResponse
type GithubComKaytuIoKaytuEnginePkgWorkspaceAPIBootstrapStatusResponse struct {

	// analytics status
	AnalyticsStatus *GithubComKaytuIoKaytuEnginePkgWorkspaceAPIBootstrapProgress `json:"analyticsStatus,omitempty"`

	// compliance status
	ComplianceStatus *GithubComKaytuIoKaytuEnginePkgWorkspaceAPIBootstrapProgress `json:"complianceStatus,omitempty"`

	// connection count
	ConnectionCount map[string]int64 `json:"connection_count,omitempty"`

	// discovery status
	DiscoveryStatus *GithubComKaytuIoKaytuEnginePkgWorkspaceAPIBootstrapProgress `json:"discoveryStatus,omitempty"`

	// insights status
	InsightsStatus *GithubComKaytuIoKaytuEnginePkgWorkspaceAPIBootstrapProgress `json:"insightsStatus,omitempty"`

	// max connections
	MaxConnections int64 `json:"maxConnections,omitempty"`

	// min required connections
	MinRequiredConnections int64 `json:"minRequiredConnections,omitempty"`

	// workspace creation status
	WorkspaceCreationStatus *GithubComKaytuIoKaytuEnginePkgWorkspaceAPIBootstrapProgress `json:"workspaceCreationStatus,omitempty"`
}

// Validate validates this github com kaytu io kaytu engine pkg workspace api bootstrap status response
func (m *GithubComKaytuIoKaytuEnginePkgWorkspaceAPIBootstrapStatusResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAnalyticsStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateComplianceStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDiscoveryStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInsightsStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWorkspaceCreationStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GithubComKaytuIoKaytuEnginePkgWorkspaceAPIBootstrapStatusResponse) validateAnalyticsStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.AnalyticsStatus) { // not required
		return nil
	}

	if m.AnalyticsStatus != nil {
		if err := m.AnalyticsStatus.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("analyticsStatus")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("analyticsStatus")
			}
			return err
		}
	}

	return nil
}

func (m *GithubComKaytuIoKaytuEnginePkgWorkspaceAPIBootstrapStatusResponse) validateComplianceStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.ComplianceStatus) { // not required
		return nil
	}

	if m.ComplianceStatus != nil {
		if err := m.ComplianceStatus.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("complianceStatus")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("complianceStatus")
			}
			return err
		}
	}

	return nil
}

func (m *GithubComKaytuIoKaytuEnginePkgWorkspaceAPIBootstrapStatusResponse) validateDiscoveryStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.DiscoveryStatus) { // not required
		return nil
	}

	if m.DiscoveryStatus != nil {
		if err := m.DiscoveryStatus.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("discoveryStatus")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("discoveryStatus")
			}
			return err
		}
	}

	return nil
}

func (m *GithubComKaytuIoKaytuEnginePkgWorkspaceAPIBootstrapStatusResponse) validateInsightsStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.InsightsStatus) { // not required
		return nil
	}

	if m.InsightsStatus != nil {
		if err := m.InsightsStatus.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("insightsStatus")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("insightsStatus")
			}
			return err
		}
	}

	return nil
}

func (m *GithubComKaytuIoKaytuEnginePkgWorkspaceAPIBootstrapStatusResponse) validateWorkspaceCreationStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.WorkspaceCreationStatus) { // not required
		return nil
	}

	if m.WorkspaceCreationStatus != nil {
		if err := m.WorkspaceCreationStatus.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("workspaceCreationStatus")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("workspaceCreationStatus")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this github com kaytu io kaytu engine pkg workspace api bootstrap status response based on the context it is used
func (m *GithubComKaytuIoKaytuEnginePkgWorkspaceAPIBootstrapStatusResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAnalyticsStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateComplianceStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDiscoveryStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateInsightsStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateWorkspaceCreationStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GithubComKaytuIoKaytuEnginePkgWorkspaceAPIBootstrapStatusResponse) contextValidateAnalyticsStatus(ctx context.Context, formats strfmt.Registry) error {

	if m.AnalyticsStatus != nil {

		if swag.IsZero(m.AnalyticsStatus) { // not required
			return nil
		}

		if err := m.AnalyticsStatus.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("analyticsStatus")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("analyticsStatus")
			}
			return err
		}
	}

	return nil
}

func (m *GithubComKaytuIoKaytuEnginePkgWorkspaceAPIBootstrapStatusResponse) contextValidateComplianceStatus(ctx context.Context, formats strfmt.Registry) error {

	if m.ComplianceStatus != nil {

		if swag.IsZero(m.ComplianceStatus) { // not required
			return nil
		}

		if err := m.ComplianceStatus.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("complianceStatus")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("complianceStatus")
			}
			return err
		}
	}

	return nil
}

func (m *GithubComKaytuIoKaytuEnginePkgWorkspaceAPIBootstrapStatusResponse) contextValidateDiscoveryStatus(ctx context.Context, formats strfmt.Registry) error {

	if m.DiscoveryStatus != nil {

		if swag.IsZero(m.DiscoveryStatus) { // not required
			return nil
		}

		if err := m.DiscoveryStatus.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("discoveryStatus")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("discoveryStatus")
			}
			return err
		}
	}

	return nil
}

func (m *GithubComKaytuIoKaytuEnginePkgWorkspaceAPIBootstrapStatusResponse) contextValidateInsightsStatus(ctx context.Context, formats strfmt.Registry) error {

	if m.InsightsStatus != nil {

		if swag.IsZero(m.InsightsStatus) { // not required
			return nil
		}

		if err := m.InsightsStatus.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("insightsStatus")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("insightsStatus")
			}
			return err
		}
	}

	return nil
}

func (m *GithubComKaytuIoKaytuEnginePkgWorkspaceAPIBootstrapStatusResponse) contextValidateWorkspaceCreationStatus(ctx context.Context, formats strfmt.Registry) error {

	if m.WorkspaceCreationStatus != nil {

		if swag.IsZero(m.WorkspaceCreationStatus) { // not required
			return nil
		}

		if err := m.WorkspaceCreationStatus.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("workspaceCreationStatus")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("workspaceCreationStatus")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GithubComKaytuIoKaytuEnginePkgWorkspaceAPIBootstrapStatusResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GithubComKaytuIoKaytuEnginePkgWorkspaceAPIBootstrapStatusResponse) UnmarshalBinary(b []byte) error {
	var res GithubComKaytuIoKaytuEnginePkgWorkspaceAPIBootstrapStatusResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
