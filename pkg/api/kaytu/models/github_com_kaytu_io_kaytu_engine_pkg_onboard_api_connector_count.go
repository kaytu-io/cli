// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// GithubComKaytuIoKaytuEnginePkgOnboardAPIConnectorCount github com kaytu io kaytu engine pkg onboard api connector count
//
// swagger:model github_com_kaytu-io_kaytu-engine_pkg_onboard_api.ConnectorCount
type GithubComKaytuIoKaytuEnginePkgOnboardAPIConnectorCount struct {

	// allow new connections
	AllowNewConnections bool `json:"allowNewConnections,omitempty"`

	// auto onboard support
	AutoOnboardSupport bool `json:"autoOnboardSupport,omitempty"`

	// connection count
	ConnectionCount int64 `json:"connection_count,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// direction
	Direction SourceConnectorDirectionType `json:"direction,omitempty"`

	// label
	// Example: Azure
	Label string `json:"label,omitempty"`

	// logo
	Logo string `json:"logo,omitempty"`

	// max connection limit
	MaxConnectionLimit int64 `json:"maxConnectionLimit,omitempty"`

	// name
	// Example: Azure
	Name SourceType `json:"name,omitempty"`

	// short description
	ShortDescription string `json:"shortDescription,omitempty"`

	// status
	Status SourceConnectorStatus `json:"status,omitempty"`

	// tags
	Tags interface{} `json:"tags,omitempty"`
}

// Validate validates this github com kaytu io kaytu engine pkg onboard api connector count
func (m *GithubComKaytuIoKaytuEnginePkgOnboardAPIConnectorCount) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDirection(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GithubComKaytuIoKaytuEnginePkgOnboardAPIConnectorCount) validateDirection(formats strfmt.Registry) error {
	if swag.IsZero(m.Direction) { // not required
		return nil
	}

	if err := m.Direction.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("direction")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("direction")
		}
		return err
	}

	return nil
}

func (m *GithubComKaytuIoKaytuEnginePkgOnboardAPIConnectorCount) validateName(formats strfmt.Registry) error {
	if swag.IsZero(m.Name) { // not required
		return nil
	}

	return nil
}

func (m *GithubComKaytuIoKaytuEnginePkgOnboardAPIConnectorCount) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	if err := m.Status.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("status")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("status")
		}
		return err
	}

	return nil
}

// ContextValidate validate this github com kaytu io kaytu engine pkg onboard api connector count based on the context it is used
func (m *GithubComKaytuIoKaytuEnginePkgOnboardAPIConnectorCount) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDirection(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateName(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GithubComKaytuIoKaytuEnginePkgOnboardAPIConnectorCount) contextValidateDirection(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.Direction) { // not required
		return nil
	}

	if err := m.Direction.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("direction")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("direction")
		}
		return err
	}

	return nil
}

func (m *GithubComKaytuIoKaytuEnginePkgOnboardAPIConnectorCount) contextValidateName(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *GithubComKaytuIoKaytuEnginePkgOnboardAPIConnectorCount) contextValidateStatus(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	if err := m.Status.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("status")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("status")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GithubComKaytuIoKaytuEnginePkgOnboardAPIConnectorCount) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GithubComKaytuIoKaytuEnginePkgOnboardAPIConnectorCount) UnmarshalBinary(b []byte) error {
	var res GithubComKaytuIoKaytuEnginePkgOnboardAPIConnectorCount
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
