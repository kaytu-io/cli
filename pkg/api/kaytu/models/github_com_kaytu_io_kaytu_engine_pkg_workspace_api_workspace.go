// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// GithubComKaytuIoKaytuEnginePkgWorkspaceAPIWorkspace github com kaytu io kaytu engine pkg workspace api workspace
//
// swagger:model github_com_kaytu-io_kaytu-engine_pkg_workspace_api.Workspace
type GithubComKaytuIoKaytuEnginePkgWorkspaceAPIWorkspace struct {

	// created at
	// Example: 2023-05-17T14:39:02.707659Z
	CreatedAt string `json:"createdAt,omitempty"`

	// description
	// Example: Lorem ipsum dolor sit amet, consectetur adipiscing elit.
	Description string `json:"description,omitempty"`

	// id
	// Example: ws-698542025141040315
	ID string `json:"id,omitempty"`

	// name
	// Example: kaytu
	Name string `json:"name,omitempty"`

	// organization
	Organization *GithubComKaytuIoKaytuEnginePkgWorkspaceAPIOrganization `json:"organization,omitempty"`

	// owner Id
	// Example: google-oauth2|204590896945502695694
	OwnerID string `json:"ownerId,omitempty"`

	// status
	// Example: PROVISIONED
	Status GithubComKaytuIoKaytuEnginePkgWorkspaceAPIWorkspaceStatus `json:"status,omitempty"`

	// tier
	// Example: ENTERPRISE
	Tier GithubComKaytuIoKaytuEnginePkgWorkspaceAPITier `json:"tier,omitempty"`

	// uri
	// Example: https://app.kaytu.dev/kaytu
	URI string `json:"uri,omitempty"`
}

// Validate validates this github com kaytu io kaytu engine pkg workspace api workspace
func (m *GithubComKaytuIoKaytuEnginePkgWorkspaceAPIWorkspace) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateOrganization(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTier(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GithubComKaytuIoKaytuEnginePkgWorkspaceAPIWorkspace) validateOrganization(formats strfmt.Registry) error {
	if swag.IsZero(m.Organization) { // not required
		return nil
	}

	if m.Organization != nil {
		if err := m.Organization.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("organization")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("organization")
			}
			return err
		}
	}

	return nil
}

func (m *GithubComKaytuIoKaytuEnginePkgWorkspaceAPIWorkspace) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	return nil
}

func (m *GithubComKaytuIoKaytuEnginePkgWorkspaceAPIWorkspace) validateTier(formats strfmt.Registry) error {
	if swag.IsZero(m.Tier) { // not required
		return nil
	}

	return nil
}

// ContextValidate validate this github com kaytu io kaytu engine pkg workspace api workspace based on the context it is used
func (m *GithubComKaytuIoKaytuEnginePkgWorkspaceAPIWorkspace) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateOrganization(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTier(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GithubComKaytuIoKaytuEnginePkgWorkspaceAPIWorkspace) contextValidateOrganization(ctx context.Context, formats strfmt.Registry) error {

	if m.Organization != nil {

		if swag.IsZero(m.Organization) { // not required
			return nil
		}

		if err := m.Organization.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("organization")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("organization")
			}
			return err
		}
	}

	return nil
}

func (m *GithubComKaytuIoKaytuEnginePkgWorkspaceAPIWorkspace) contextValidateStatus(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *GithubComKaytuIoKaytuEnginePkgWorkspaceAPIWorkspace) contextValidateTier(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

// MarshalBinary interface implementation
func (m *GithubComKaytuIoKaytuEnginePkgWorkspaceAPIWorkspace) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GithubComKaytuIoKaytuEnginePkgWorkspaceAPIWorkspace) UnmarshalBinary(b []byte) error {
	var res GithubComKaytuIoKaytuEnginePkgWorkspaceAPIWorkspace
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
