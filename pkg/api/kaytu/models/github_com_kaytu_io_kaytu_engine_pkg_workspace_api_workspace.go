// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// GithubComKaytuIoKaytuEnginePkgWorkspaceAPIWorkspace github com kaytu io kaytu engine pkg workspace api workspace
//
// swagger:model github_com_kaytu-io_kaytu-engine_pkg_workspace_api.Workspace
type GithubComKaytuIoKaytuEnginePkgWorkspaceAPIWorkspace struct {

	// description
	Description string `json:"description,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// organization id
	OrganizationID int64 `json:"organization_id,omitempty"`

	// owner id
	OwnerID string `json:"owner_id,omitempty"`

	// status
	Status string `json:"status,omitempty"`

	// tier
	Tier GithubComKaytuIoKaytuEnginePkgWorkspaceAPITier `json:"tier,omitempty"`

	// uri
	URI string `json:"uri,omitempty"`
}

// Validate validates this github com kaytu io kaytu engine pkg workspace api workspace
func (m *GithubComKaytuIoKaytuEnginePkgWorkspaceAPIWorkspace) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateTier(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GithubComKaytuIoKaytuEnginePkgWorkspaceAPIWorkspace) validateTier(formats strfmt.Registry) error {
	if swag.IsZero(m.Tier) { // not required
		return nil
	}

	if err := m.Tier.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("tier")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("tier")
		}
		return err
	}

	return nil
}

// ContextValidate validate this github com kaytu io kaytu engine pkg workspace api workspace based on the context it is used
func (m *GithubComKaytuIoKaytuEnginePkgWorkspaceAPIWorkspace) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateTier(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GithubComKaytuIoKaytuEnginePkgWorkspaceAPIWorkspace) contextValidateTier(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.Tier) { // not required
		return nil
	}

	if err := m.Tier.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("tier")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("tier")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GithubComKaytuIoKaytuEnginePkgWorkspaceAPIWorkspace) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GithubComKaytuIoKaytuEnginePkgWorkspaceAPIWorkspace) UnmarshalBinary(b []byte) error {
	var res GithubComKaytuIoKaytuEnginePkgWorkspaceAPIWorkspace
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
