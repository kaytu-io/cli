// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GithubComKaytuIoKaytuEnginePkgAuthAPIRoleDetailsResponse github com kaytu io kaytu engine pkg auth api role details response
//
// swagger:model github_com_kaytu-io_kaytu-engine_pkg_auth_api.RoleDetailsResponse
type GithubComKaytuIoKaytuEnginePkgAuthAPIRoleDetailsResponse struct {

	// Role Description and accesses
	// Example: The Administrator role is a super user role with all of the capabilities that can be assigned to a role, and its enables access to all data \u0026 configuration on a Kaytu Workspace. You cannot edit or delete the Administrator role.
	Description string `json:"description,omitempty"`

	// Name of the role
	// Example: admin
	// Enum: [admin editor viewer]
	Role GithubComKaytuIoKaytuEnginePkgAuthAPIRole `json:"role,omitempty"`

	// Number of users having this role
	// Example: 1
	UserCount int64 `json:"userCount,omitempty"`

	// List of users having the role
	Users []*GithubComKaytuIoKaytuEnginePkgAuthAPIGetUsersResponse `json:"users"`
}

// Validate validates this github com kaytu io kaytu engine pkg auth api role details response
func (m *GithubComKaytuIoKaytuEnginePkgAuthAPIRoleDetailsResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRole(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUsers(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var githubComKaytuIoKaytuEnginePkgAuthApiRoleDetailsResponseTypeRolePropEnum []interface{}

func init() {
	var res []GithubComKaytuIoKaytuEnginePkgAuthAPIRole
	if err := json.Unmarshal([]byte(`["admin","editor","viewer"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		githubComKaytuIoKaytuEnginePkgAuthApiRoleDetailsResponseTypeRolePropEnum = append(githubComKaytuIoKaytuEnginePkgAuthApiRoleDetailsResponseTypeRolePropEnum, v)
	}
}

// prop value enum
func (m *GithubComKaytuIoKaytuEnginePkgAuthAPIRoleDetailsResponse) validateRoleEnum(path, location string, value *struct {
	GithubComKaytuIoKaytuEnginePkgAuthAPIRole
}) error {
	if err := validate.EnumCase(path, location, value, githubComKaytuIoKaytuEnginePkgAuthApiRoleDetailsResponseTypeRolePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *GithubComKaytuIoKaytuEnginePkgAuthAPIRoleDetailsResponse) validateRole(formats strfmt.Registry) error {
	if swag.IsZero(m.Role) { // not required
		return nil
	}

	return nil
}

func (m *GithubComKaytuIoKaytuEnginePkgAuthAPIRoleDetailsResponse) validateUsers(formats strfmt.Registry) error {
	if swag.IsZero(m.Users) { // not required
		return nil
	}

	for i := 0; i < len(m.Users); i++ {
		if swag.IsZero(m.Users[i]) { // not required
			continue
		}

		if m.Users[i] != nil {
			if err := m.Users[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("users" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("users" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this github com kaytu io kaytu engine pkg auth api role details response based on the context it is used
func (m *GithubComKaytuIoKaytuEnginePkgAuthAPIRoleDetailsResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateRole(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUsers(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GithubComKaytuIoKaytuEnginePkgAuthAPIRoleDetailsResponse) contextValidateRole(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *GithubComKaytuIoKaytuEnginePkgAuthAPIRoleDetailsResponse) contextValidateUsers(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Users); i++ {

		if m.Users[i] != nil {

			if swag.IsZero(m.Users[i]) { // not required
				return nil
			}

			if err := m.Users[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("users" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("users" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *GithubComKaytuIoKaytuEnginePkgAuthAPIRoleDetailsResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GithubComKaytuIoKaytuEnginePkgAuthAPIRoleDetailsResponse) UnmarshalBinary(b []byte) error {
	var res GithubComKaytuIoKaytuEnginePkgAuthAPIRoleDetailsResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
