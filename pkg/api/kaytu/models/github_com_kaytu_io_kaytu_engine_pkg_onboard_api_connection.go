// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GithubComKaytuIoKaytuEnginePkgOnboardAPIConnection github com kaytu io kaytu engine pkg onboard api connection
//
// swagger:model github_com_kaytu-io_kaytu-engine_pkg_onboard_api.Connection
type GithubComKaytuIoKaytuEnginePkgOnboardAPIConnection struct {

	// asset discovery method
	// Example: scheduled
	AssetDiscoveryMethod struct {
		SourceAssetDiscoveryMethodType
	} `json:"assetDiscoveryMethod,omitempty"`

	// connector
	// Example: Azure
	Connector struct {
		SourceType
	} `json:"connector,omitempty"`

	// cost
	// Example: 1000
	// Maximum: 1e+07
	// Minimum: 0
	Cost *float64 `json:"cost,omitempty"`

	// credential
	Credential *GithubComKaytuIoKaytuEnginePkgOnboardAPICredential `json:"credential,omitempty"`

	// credential ID
	// Example: 7r6123ac-ca1c-434f-b1a3-91w2w9d277c8
	CredentialID string `json:"credentialID,omitempty"`

	// credential name
	CredentialName string `json:"credentialName,omitempty"`

	// credential type
	// Example: manual
	CredentialType struct {
		GithubComKaytuIoKaytuEnginePkgOnboardAPICredentialType
	} `json:"credentialType,omitempty"`

	// daily cost at end time
	// Example: 1000
	// Maximum: 1e+07
	// Minimum: 0
	DailyCostAtEndTime *float64 `json:"dailyCostAtEndTime,omitempty"`

	// daily cost at start time
	// Example: 1000
	// Maximum: 1e+07
	// Minimum: 0
	DailyCostAtStartTime *float64 `json:"dailyCostAtStartTime,omitempty"`

	// describe job running
	DescribeJobRunning bool `json:"describeJobRunning,omitempty"`

	// description
	// Example: This is an example connection
	Description string `json:"description,omitempty"`

	// email
	// Example: johndoe@example.com
	Email string `json:"email,omitempty"`

	// health reason
	HealthReason string `json:"healthReason,omitempty"`

	// health state
	// Example: healthy
	HealthState struct {
		SourceHealthStatus
	} `json:"healthState,omitempty"`

	// id
	// Example: 8e0f8e7a-1b1c-4e6f-b7e4-9c6af9d2b1c8
	ID string `json:"id,omitempty"`

	// last health check time
	// Example: 2023-05-07T00:00:00Z
	LastHealthCheckTime string `json:"lastHealthCheckTime,omitempty"`

	// last inventory
	// Example: 2023-05-07T00:00:00Z
	LastInventory string `json:"lastInventory,omitempty"`

	// lifecycle state
	// Example: enabled
	LifecycleState struct {
		GithubComKaytuIoKaytuEnginePkgOnboardAPIConnectionLifecycleState
	} `json:"lifecycleState,omitempty"`

	// metadata
	Metadata interface{} `json:"metadata,omitempty"`

	// old resource count
	// Example: 100
	// Maximum: 1e+06
	// Minimum: 0
	OldResourceCount *int64 `json:"oldResourceCount,omitempty"`

	// onboard date
	// Example: 2023-05-07T00:00:00Z
	OnboardDate string `json:"onboardDate,omitempty"`

	// provider connection ID
	// Example: 8e0f8e7a-1b1c-4e6f-b7e4-9c6af9d2b1c8
	ProviderConnectionID string `json:"providerConnectionID,omitempty"`

	// provider connection name
	// Example: example-connection
	ProviderConnectionName string `json:"providerConnectionName,omitempty"`

	// resource count
	// Example: 100
	// Maximum: 1e+06
	// Minimum: 0
	ResourceCount *int64 `json:"resourceCount,omitempty"`
}

// Validate validates this github com kaytu io kaytu engine pkg onboard api connection
func (m *GithubComKaytuIoKaytuEnginePkgOnboardAPIConnection) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAssetDiscoveryMethod(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConnector(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCost(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCredential(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCredentialType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDailyCostAtEndTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDailyCostAtStartTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHealthState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLifecycleState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOldResourceCount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResourceCount(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GithubComKaytuIoKaytuEnginePkgOnboardAPIConnection) validateAssetDiscoveryMethod(formats strfmt.Registry) error {
	if swag.IsZero(m.AssetDiscoveryMethod) { // not required
		return nil
	}

	return nil
}

func (m *GithubComKaytuIoKaytuEnginePkgOnboardAPIConnection) validateConnector(formats strfmt.Registry) error {
	if swag.IsZero(m.Connector) { // not required
		return nil
	}

	return nil
}

func (m *GithubComKaytuIoKaytuEnginePkgOnboardAPIConnection) validateCost(formats strfmt.Registry) error {
	if swag.IsZero(m.Cost) { // not required
		return nil
	}

	if err := validate.Minimum("cost", "body", *m.Cost, 0, false); err != nil {
		return err
	}

	if err := validate.Maximum("cost", "body", *m.Cost, 1e+07, false); err != nil {
		return err
	}

	return nil
}

func (m *GithubComKaytuIoKaytuEnginePkgOnboardAPIConnection) validateCredential(formats strfmt.Registry) error {
	if swag.IsZero(m.Credential) { // not required
		return nil
	}

	if m.Credential != nil {
		if err := m.Credential.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("credential")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("credential")
			}
			return err
		}
	}

	return nil
}

func (m *GithubComKaytuIoKaytuEnginePkgOnboardAPIConnection) validateCredentialType(formats strfmt.Registry) error {
	if swag.IsZero(m.CredentialType) { // not required
		return nil
	}

	return nil
}

func (m *GithubComKaytuIoKaytuEnginePkgOnboardAPIConnection) validateDailyCostAtEndTime(formats strfmt.Registry) error {
	if swag.IsZero(m.DailyCostAtEndTime) { // not required
		return nil
	}

	if err := validate.Minimum("dailyCostAtEndTime", "body", *m.DailyCostAtEndTime, 0, false); err != nil {
		return err
	}

	if err := validate.Maximum("dailyCostAtEndTime", "body", *m.DailyCostAtEndTime, 1e+07, false); err != nil {
		return err
	}

	return nil
}

func (m *GithubComKaytuIoKaytuEnginePkgOnboardAPIConnection) validateDailyCostAtStartTime(formats strfmt.Registry) error {
	if swag.IsZero(m.DailyCostAtStartTime) { // not required
		return nil
	}

	if err := validate.Minimum("dailyCostAtStartTime", "body", *m.DailyCostAtStartTime, 0, false); err != nil {
		return err
	}

	if err := validate.Maximum("dailyCostAtStartTime", "body", *m.DailyCostAtStartTime, 1e+07, false); err != nil {
		return err
	}

	return nil
}

func (m *GithubComKaytuIoKaytuEnginePkgOnboardAPIConnection) validateHealthState(formats strfmt.Registry) error {
	if swag.IsZero(m.HealthState) { // not required
		return nil
	}

	return nil
}

func (m *GithubComKaytuIoKaytuEnginePkgOnboardAPIConnection) validateLifecycleState(formats strfmt.Registry) error {
	if swag.IsZero(m.LifecycleState) { // not required
		return nil
	}

	return nil
}

func (m *GithubComKaytuIoKaytuEnginePkgOnboardAPIConnection) validateOldResourceCount(formats strfmt.Registry) error {
	if swag.IsZero(m.OldResourceCount) { // not required
		return nil
	}

	if err := validate.MinimumInt("oldResourceCount", "body", *m.OldResourceCount, 0, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("oldResourceCount", "body", *m.OldResourceCount, 1e+06, false); err != nil {
		return err
	}

	return nil
}

func (m *GithubComKaytuIoKaytuEnginePkgOnboardAPIConnection) validateResourceCount(formats strfmt.Registry) error {
	if swag.IsZero(m.ResourceCount) { // not required
		return nil
	}

	if err := validate.MinimumInt("resourceCount", "body", *m.ResourceCount, 0, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("resourceCount", "body", *m.ResourceCount, 1e+06, false); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this github com kaytu io kaytu engine pkg onboard api connection based on the context it is used
func (m *GithubComKaytuIoKaytuEnginePkgOnboardAPIConnection) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAssetDiscoveryMethod(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateConnector(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCredential(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCredentialType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHealthState(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLifecycleState(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GithubComKaytuIoKaytuEnginePkgOnboardAPIConnection) contextValidateAssetDiscoveryMethod(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *GithubComKaytuIoKaytuEnginePkgOnboardAPIConnection) contextValidateConnector(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *GithubComKaytuIoKaytuEnginePkgOnboardAPIConnection) contextValidateCredential(ctx context.Context, formats strfmt.Registry) error {

	if m.Credential != nil {

		if swag.IsZero(m.Credential) { // not required
			return nil
		}

		if err := m.Credential.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("credential")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("credential")
			}
			return err
		}
	}

	return nil
}

func (m *GithubComKaytuIoKaytuEnginePkgOnboardAPIConnection) contextValidateCredentialType(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *GithubComKaytuIoKaytuEnginePkgOnboardAPIConnection) contextValidateHealthState(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *GithubComKaytuIoKaytuEnginePkgOnboardAPIConnection) contextValidateLifecycleState(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

// MarshalBinary interface implementation
func (m *GithubComKaytuIoKaytuEnginePkgOnboardAPIConnection) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GithubComKaytuIoKaytuEnginePkgOnboardAPIConnection) UnmarshalBinary(b []byte) error {
	var res GithubComKaytuIoKaytuEnginePkgOnboardAPIConnection
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
