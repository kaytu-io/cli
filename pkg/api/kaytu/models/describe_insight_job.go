// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// DescribeInsightJob describe insight job
//
// swagger:model describe.InsightJob
type DescribeInsightJob struct {

	// account ID
	AccountID string `json:"accountID,omitempty"`

	// created at
	CreatedAt string `json:"createdAt,omitempty"`

	// deleted at
	DeletedAt *GormDeletedAt `json:"deletedAt,omitempty"`

	// failure message
	FailureMessage string `json:"failureMessage,omitempty"`

	// id
	ID int64 `json:"id,omitempty"`

	// insight ID
	InsightID int64 `json:"insightID,omitempty"`

	// is stack
	IsStack bool `json:"isStack,omitempty"`

	// schedule UUID
	ScheduleUUID string `json:"scheduleUUID,omitempty"`

	// source ID
	SourceID string `json:"sourceID,omitempty"`

	// source type
	SourceType SourceType `json:"sourceType,omitempty"`

	// status
	Status GithubComKaytuIoKaytuEnginePkgInsightAPIInsightJobStatus `json:"status,omitempty"`

	// updated at
	UpdatedAt string `json:"updatedAt,omitempty"`
}

// Validate validates this describe insight job
func (m *DescribeInsightJob) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDeletedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSourceType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DescribeInsightJob) validateDeletedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.DeletedAt) { // not required
		return nil
	}

	if m.DeletedAt != nil {
		if err := m.DeletedAt.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("deletedAt")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("deletedAt")
			}
			return err
		}
	}

	return nil
}

func (m *DescribeInsightJob) validateSourceType(formats strfmt.Registry) error {
	if swag.IsZero(m.SourceType) { // not required
		return nil
	}

	if err := m.SourceType.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("sourceType")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("sourceType")
		}
		return err
	}

	return nil
}

func (m *DescribeInsightJob) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	if err := m.Status.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("status")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("status")
		}
		return err
	}

	return nil
}

// ContextValidate validate this describe insight job based on the context it is used
func (m *DescribeInsightJob) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDeletedAt(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSourceType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DescribeInsightJob) contextValidateDeletedAt(ctx context.Context, formats strfmt.Registry) error {

	if m.DeletedAt != nil {

		if swag.IsZero(m.DeletedAt) { // not required
			return nil
		}

		if err := m.DeletedAt.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("deletedAt")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("deletedAt")
			}
			return err
		}
	}

	return nil
}

func (m *DescribeInsightJob) contextValidateSourceType(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.SourceType) { // not required
		return nil
	}

	if err := m.SourceType.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("sourceType")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("sourceType")
		}
		return err
	}

	return nil
}

func (m *DescribeInsightJob) contextValidateStatus(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	if err := m.Status.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("status")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("status")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DescribeInsightJob) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DescribeInsightJob) UnmarshalBinary(b []byte) error {
	var res DescribeInsightJob
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
