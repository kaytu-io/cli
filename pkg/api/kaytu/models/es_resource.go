// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// EsResource es resource
//
// swagger:model es.Resource
type EsResource struct {

	// ID is the globally unique ID of the resource.
	Arn string `json:"arn,omitempty"`

	// Tags is the list of tags associated with the resource
	CanonicalTags []*EsTag `json:"canonical_tags"`

	// CreatedAt is when the DescribeSourceJob is created
	CreatedAt int64 `json:"created_at,omitempty"`

	// Description is the description of the resource based on the describe call.
	Description interface{} `json:"description,omitempty"`

	// es id
	EsID string `json:"es_id,omitempty"`

	// es index
	EsIndex string `json:"es_index,omitempty"`

	// ID is the globally unique ID of the resource.
	ID string `json:"id,omitempty"`

	// Location is location/region of the resource
	Location string `json:"location,omitempty"`

	// Metadata is arbitrary data associated with each resource
	Metadata map[string]string `json:"metadata,omitempty"`

	// Name is the name of the resource.
	Name string `json:"name,omitempty"`

	// ResourceGroup is the group of resource (Azure only)
	ResourceGroup string `json:"resource_group,omitempty"`

	// ResourceJobID is the DescribeResourceJob ID that described this resource
	ResourceJobID int64 `json:"resource_job_id,omitempty"`

	// ResourceType is the type of the resource.
	ResourceType string `json:"resource_type,omitempty"`

	// ScheduleJobID
	ScheduleJobID int64 `json:"schedule_job_id,omitempty"`

	// SourceID is the Source ID that the resource belongs to
	SourceID string `json:"source_id,omitempty"`

	// SourceJobID is the DescribeSourceJob ID that the ResourceJobID was created for
	SourceJobID int64 `json:"source_job_id,omitempty"`

	// SourceType is the type of the source of the resource, i.e. AWS Cloud, Azure Cloud.
	SourceType SourceType `json:"source_type,omitempty"`
}

// Validate validates this es resource
func (m *EsResource) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCanonicalTags(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSourceType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EsResource) validateCanonicalTags(formats strfmt.Registry) error {
	if swag.IsZero(m.CanonicalTags) { // not required
		return nil
	}

	for i := 0; i < len(m.CanonicalTags); i++ {
		if swag.IsZero(m.CanonicalTags[i]) { // not required
			continue
		}

		if m.CanonicalTags[i] != nil {
			if err := m.CanonicalTags[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("canonical_tags" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("canonical_tags" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *EsResource) validateSourceType(formats strfmt.Registry) error {
	if swag.IsZero(m.SourceType) { // not required
		return nil
	}

	return nil
}

// ContextValidate validate this es resource based on the context it is used
func (m *EsResource) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCanonicalTags(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSourceType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EsResource) contextValidateCanonicalTags(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.CanonicalTags); i++ {

		if m.CanonicalTags[i] != nil {

			if swag.IsZero(m.CanonicalTags[i]) { // not required
				return nil
			}

			if err := m.CanonicalTags[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("canonical_tags" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("canonical_tags" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *EsResource) contextValidateSourceType(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

// MarshalBinary interface implementation
func (m *EsResource) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EsResource) UnmarshalBinary(b []byte) error {
	var res EsResource
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
