// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GithubComKaytuIoKaytuEnginePkgOnboardAPIListConnectionSummaryResponse github com kaytu io kaytu engine pkg onboard api list connection summary response
//
// swagger:model github_com_kaytu-io_kaytu-engine_pkg_onboard_api.ListConnectionSummaryResponse
type GithubComKaytuIoKaytuEnginePkgOnboardAPIListConnectionSummaryResponse struct {

	// connection count
	// Example: 10
	// Maximum: 1000
	// Minimum: 0
	ConnectionCount *int64 `json:"connectionCount,omitempty"`

	// connections
	Connections []*GithubComKaytuIoKaytuEnginePkgOnboardAPIConnection `json:"connections"`

	// total archived count
	// Example: 10
	// Maximum: 100
	// Minimum: 0
	TotalArchivedCount *int64 `json:"totalArchivedCount,omitempty"`

	// total cost
	// Example: 1000
	// Maximum: 1e+07
	// Minimum: 0
	TotalCost *float64 `json:"totalCost,omitempty"`

	// total disabled count
	// Example: 10
	// Maximum: 100
	// Minimum: 0
	TotalDisabledCount *int64 `json:"totalDisabledCount,omitempty"`

	// total discovered count
	// Example: 10
	// Maximum: 100
	// Minimum: 0
	TotalDiscoveredCount *int64 `json:"totalDiscoveredCount,omitempty"`

	// total old resource count
	// Example: 100
	// Maximum: 1e+06
	// Minimum: 0
	TotalOldResourceCount *int64 `json:"totalOldResourceCount,omitempty"`

	// Also includes in-progress
	// Example: 10
	// Maximum: 100
	// Minimum: 0
	TotalOnboardedCount *int64 `json:"totalOnboardedCount,omitempty"`

	// total resource count
	// Example: 100
	// Maximum: 1e+06
	// Minimum: 0
	TotalResourceCount *int64 `json:"totalResourceCount,omitempty"`

	// total unhealthy count
	// Example: 10
	// Maximum: 100
	// Minimum: 0
	TotalUnhealthyCount *int64 `json:"totalUnhealthyCount,omitempty"`
}

// Validate validates this github com kaytu io kaytu engine pkg onboard api list connection summary response
func (m *GithubComKaytuIoKaytuEnginePkgOnboardAPIListConnectionSummaryResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConnectionCount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConnections(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTotalArchivedCount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTotalCost(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTotalDisabledCount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTotalDiscoveredCount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTotalOldResourceCount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTotalOnboardedCount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTotalResourceCount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTotalUnhealthyCount(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GithubComKaytuIoKaytuEnginePkgOnboardAPIListConnectionSummaryResponse) validateConnectionCount(formats strfmt.Registry) error {
	if swag.IsZero(m.ConnectionCount) { // not required
		return nil
	}

	if err := validate.MinimumInt("connectionCount", "body", *m.ConnectionCount, 0, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("connectionCount", "body", *m.ConnectionCount, 1000, false); err != nil {
		return err
	}

	return nil
}

func (m *GithubComKaytuIoKaytuEnginePkgOnboardAPIListConnectionSummaryResponse) validateConnections(formats strfmt.Registry) error {
	if swag.IsZero(m.Connections) { // not required
		return nil
	}

	for i := 0; i < len(m.Connections); i++ {
		if swag.IsZero(m.Connections[i]) { // not required
			continue
		}

		if m.Connections[i] != nil {
			if err := m.Connections[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("connections" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("connections" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *GithubComKaytuIoKaytuEnginePkgOnboardAPIListConnectionSummaryResponse) validateTotalArchivedCount(formats strfmt.Registry) error {
	if swag.IsZero(m.TotalArchivedCount) { // not required
		return nil
	}

	if err := validate.MinimumInt("totalArchivedCount", "body", *m.TotalArchivedCount, 0, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("totalArchivedCount", "body", *m.TotalArchivedCount, 100, false); err != nil {
		return err
	}

	return nil
}

func (m *GithubComKaytuIoKaytuEnginePkgOnboardAPIListConnectionSummaryResponse) validateTotalCost(formats strfmt.Registry) error {
	if swag.IsZero(m.TotalCost) { // not required
		return nil
	}

	if err := validate.Minimum("totalCost", "body", *m.TotalCost, 0, false); err != nil {
		return err
	}

	if err := validate.Maximum("totalCost", "body", *m.TotalCost, 1e+07, false); err != nil {
		return err
	}

	return nil
}

func (m *GithubComKaytuIoKaytuEnginePkgOnboardAPIListConnectionSummaryResponse) validateTotalDisabledCount(formats strfmt.Registry) error {
	if swag.IsZero(m.TotalDisabledCount) { // not required
		return nil
	}

	if err := validate.MinimumInt("totalDisabledCount", "body", *m.TotalDisabledCount, 0, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("totalDisabledCount", "body", *m.TotalDisabledCount, 100, false); err != nil {
		return err
	}

	return nil
}

func (m *GithubComKaytuIoKaytuEnginePkgOnboardAPIListConnectionSummaryResponse) validateTotalDiscoveredCount(formats strfmt.Registry) error {
	if swag.IsZero(m.TotalDiscoveredCount) { // not required
		return nil
	}

	if err := validate.MinimumInt("totalDiscoveredCount", "body", *m.TotalDiscoveredCount, 0, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("totalDiscoveredCount", "body", *m.TotalDiscoveredCount, 100, false); err != nil {
		return err
	}

	return nil
}

func (m *GithubComKaytuIoKaytuEnginePkgOnboardAPIListConnectionSummaryResponse) validateTotalOldResourceCount(formats strfmt.Registry) error {
	if swag.IsZero(m.TotalOldResourceCount) { // not required
		return nil
	}

	if err := validate.MinimumInt("totalOldResourceCount", "body", *m.TotalOldResourceCount, 0, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("totalOldResourceCount", "body", *m.TotalOldResourceCount, 1e+06, false); err != nil {
		return err
	}

	return nil
}

func (m *GithubComKaytuIoKaytuEnginePkgOnboardAPIListConnectionSummaryResponse) validateTotalOnboardedCount(formats strfmt.Registry) error {
	if swag.IsZero(m.TotalOnboardedCount) { // not required
		return nil
	}

	if err := validate.MinimumInt("totalOnboardedCount", "body", *m.TotalOnboardedCount, 0, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("totalOnboardedCount", "body", *m.TotalOnboardedCount, 100, false); err != nil {
		return err
	}

	return nil
}

func (m *GithubComKaytuIoKaytuEnginePkgOnboardAPIListConnectionSummaryResponse) validateTotalResourceCount(formats strfmt.Registry) error {
	if swag.IsZero(m.TotalResourceCount) { // not required
		return nil
	}

	if err := validate.MinimumInt("totalResourceCount", "body", *m.TotalResourceCount, 0, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("totalResourceCount", "body", *m.TotalResourceCount, 1e+06, false); err != nil {
		return err
	}

	return nil
}

func (m *GithubComKaytuIoKaytuEnginePkgOnboardAPIListConnectionSummaryResponse) validateTotalUnhealthyCount(formats strfmt.Registry) error {
	if swag.IsZero(m.TotalUnhealthyCount) { // not required
		return nil
	}

	if err := validate.MinimumInt("totalUnhealthyCount", "body", *m.TotalUnhealthyCount, 0, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("totalUnhealthyCount", "body", *m.TotalUnhealthyCount, 100, false); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this github com kaytu io kaytu engine pkg onboard api list connection summary response based on the context it is used
func (m *GithubComKaytuIoKaytuEnginePkgOnboardAPIListConnectionSummaryResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateConnections(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GithubComKaytuIoKaytuEnginePkgOnboardAPIListConnectionSummaryResponse) contextValidateConnections(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Connections); i++ {

		if m.Connections[i] != nil {

			if swag.IsZero(m.Connections[i]) { // not required
				return nil
			}

			if err := m.Connections[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("connections" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("connections" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *GithubComKaytuIoKaytuEnginePkgOnboardAPIListConnectionSummaryResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GithubComKaytuIoKaytuEnginePkgOnboardAPIListConnectionSummaryResponse) UnmarshalBinary(b []byte) error {
	var res GithubComKaytuIoKaytuEnginePkgOnboardAPIListConnectionSummaryResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
