// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// SourceConnectorStatus source connector status
//
// swagger:model source.ConnectorStatus
type SourceConnectorStatus string

func NewSourceConnectorStatus(value SourceConnectorStatus) *SourceConnectorStatus {
	return &value
}

// Pointer returns a pointer to a freshly-allocated SourceConnectorStatus.
func (m SourceConnectorStatus) Pointer() *SourceConnectorStatus {
	return &m
}

const (

	// SourceConnectorStatusEnabled captures enum value "enabled"
	SourceConnectorStatusEnabled SourceConnectorStatus = "enabled"

	// SourceConnectorStatusDisabled captures enum value "disabled"
	SourceConnectorStatusDisabled SourceConnectorStatus = "disabled"

	// SourceConnectorStatusComingSoon captures enum value "coming_soon"
	SourceConnectorStatusComingSoon SourceConnectorStatus = "coming_soon"
)

// for schema
var sourceConnectorStatusEnum []interface{}

func init() {
	var res []SourceConnectorStatus
	if err := json.Unmarshal([]byte(`["enabled","disabled","coming_soon"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		sourceConnectorStatusEnum = append(sourceConnectorStatusEnum, v)
	}
}

func (m SourceConnectorStatus) validateSourceConnectorStatusEnum(path, location string, value SourceConnectorStatus) error {
	if err := validate.EnumCase(path, location, value, sourceConnectorStatusEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this source connector status
func (m SourceConnectorStatus) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateSourceConnectorStatusEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this source connector status based on context it is used
func (m SourceConnectorStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
