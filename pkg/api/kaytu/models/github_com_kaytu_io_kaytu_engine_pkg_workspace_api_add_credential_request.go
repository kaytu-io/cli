// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// GithubComKaytuIoKaytuEnginePkgWorkspaceAPIAddCredentialRequest github com kaytu io kaytu engine pkg workspace api add credential request
//
// swagger:model github_com_kaytu-io_kaytu-engine_pkg_workspace_api.AddCredentialRequest
type GithubComKaytuIoKaytuEnginePkgWorkspaceAPIAddCredentialRequest struct {

	// aws config
	AwsConfig *GithubComKaytuIoKaytuEnginePkgOnboardAPIV2AWSCredentialV2Config `json:"awsConfig,omitempty"`

	// azure config
	AzureConfig *GithubComKaytuIoKaytuEnginePkgOnboardAPIAzureCredentialConfig `json:"azureConfig,omitempty"`

	// connector type
	ConnectorType SourceType `json:"connectorType,omitempty"`
}

// Validate validates this github com kaytu io kaytu engine pkg workspace api add credential request
func (m *GithubComKaytuIoKaytuEnginePkgWorkspaceAPIAddCredentialRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAwsConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAzureConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConnectorType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GithubComKaytuIoKaytuEnginePkgWorkspaceAPIAddCredentialRequest) validateAwsConfig(formats strfmt.Registry) error {
	if swag.IsZero(m.AwsConfig) { // not required
		return nil
	}

	if m.AwsConfig != nil {
		if err := m.AwsConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("awsConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("awsConfig")
			}
			return err
		}
	}

	return nil
}

func (m *GithubComKaytuIoKaytuEnginePkgWorkspaceAPIAddCredentialRequest) validateAzureConfig(formats strfmt.Registry) error {
	if swag.IsZero(m.AzureConfig) { // not required
		return nil
	}

	if m.AzureConfig != nil {
		if err := m.AzureConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("azureConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("azureConfig")
			}
			return err
		}
	}

	return nil
}

func (m *GithubComKaytuIoKaytuEnginePkgWorkspaceAPIAddCredentialRequest) validateConnectorType(formats strfmt.Registry) error {
	if swag.IsZero(m.ConnectorType) { // not required
		return nil
	}

	if err := m.ConnectorType.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("connectorType")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("connectorType")
		}
		return err
	}

	return nil
}

// ContextValidate validate this github com kaytu io kaytu engine pkg workspace api add credential request based on the context it is used
func (m *GithubComKaytuIoKaytuEnginePkgWorkspaceAPIAddCredentialRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAwsConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAzureConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateConnectorType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GithubComKaytuIoKaytuEnginePkgWorkspaceAPIAddCredentialRequest) contextValidateAwsConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.AwsConfig != nil {

		if swag.IsZero(m.AwsConfig) { // not required
			return nil
		}

		if err := m.AwsConfig.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("awsConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("awsConfig")
			}
			return err
		}
	}

	return nil
}

func (m *GithubComKaytuIoKaytuEnginePkgWorkspaceAPIAddCredentialRequest) contextValidateAzureConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.AzureConfig != nil {

		if swag.IsZero(m.AzureConfig) { // not required
			return nil
		}

		if err := m.AzureConfig.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("azureConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("azureConfig")
			}
			return err
		}
	}

	return nil
}

func (m *GithubComKaytuIoKaytuEnginePkgWorkspaceAPIAddCredentialRequest) contextValidateConnectorType(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.ConnectorType) { // not required
		return nil
	}

	if err := m.ConnectorType.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("connectorType")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("connectorType")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GithubComKaytuIoKaytuEnginePkgWorkspaceAPIAddCredentialRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GithubComKaytuIoKaytuEnginePkgWorkspaceAPIAddCredentialRequest) UnmarshalBinary(b []byte) error {
	var res GithubComKaytuIoKaytuEnginePkgWorkspaceAPIAddCredentialRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
