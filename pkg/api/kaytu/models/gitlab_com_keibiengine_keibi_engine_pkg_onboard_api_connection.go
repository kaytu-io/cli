// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// GitlabComKeibiengineKeibiEnginePkgOnboardAPIConnection gitlab com keibiengine keibi engine pkg onboard api connection
//
// swagger:model gitlab_com_keibiengine_keibi-engine_pkg_onboard_api.Connection
type GitlabComKeibiengineKeibiEnginePkgOnboardAPIConnection struct {

	// asset discovery method
	AssetDiscoveryMethod SourceAssetDiscoveryMethodType `json:"assetDiscoveryMethod,omitempty"`

	// connector
	Connector SourceType `json:"connector,omitempty"`

	// cost
	Cost float64 `json:"cost,omitempty"`

	// credential ID
	CredentialID string `json:"credentialID,omitempty"`

	// credential name
	CredentialName string `json:"credentialName,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// email
	Email string `json:"email,omitempty"`

	// health reason
	HealthReason string `json:"healthReason,omitempty"`

	// health state
	HealthState SourceHealthStatus `json:"healthState,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// last health check time
	LastHealthCheckTime string `json:"lastHealthCheckTime,omitempty"`

	// last inventory
	LastInventory string `json:"lastInventory,omitempty"`

	// lifecycle state
	LifecycleState GitlabComKeibiengineKeibiEnginePkgOnboardAPIConnectionLifecycleState `json:"lifecycleState,omitempty"`

	// metadata
	Metadata interface{} `json:"metadata,omitempty"`

	// onboard date
	OnboardDate string `json:"onboardDate,omitempty"`

	// provider connection ID
	ProviderConnectionID string `json:"providerConnectionID,omitempty"`

	// provider connection name
	ProviderConnectionName string `json:"providerConnectionName,omitempty"`

	// resource count
	ResourceCount int64 `json:"resourceCount,omitempty"`
}

// Validate validates this gitlab com keibiengine keibi engine pkg onboard api connection
func (m *GitlabComKeibiengineKeibiEnginePkgOnboardAPIConnection) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAssetDiscoveryMethod(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConnector(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHealthState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLifecycleState(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GitlabComKeibiengineKeibiEnginePkgOnboardAPIConnection) validateAssetDiscoveryMethod(formats strfmt.Registry) error {
	if swag.IsZero(m.AssetDiscoveryMethod) { // not required
		return nil
	}

	if err := m.AssetDiscoveryMethod.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("assetDiscoveryMethod")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("assetDiscoveryMethod")
		}
		return err
	}

	return nil
}

func (m *GitlabComKeibiengineKeibiEnginePkgOnboardAPIConnection) validateConnector(formats strfmt.Registry) error {
	if swag.IsZero(m.Connector) { // not required
		return nil
	}

	if err := m.Connector.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("connector")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("connector")
		}
		return err
	}

	return nil
}

func (m *GitlabComKeibiengineKeibiEnginePkgOnboardAPIConnection) validateHealthState(formats strfmt.Registry) error {
	if swag.IsZero(m.HealthState) { // not required
		return nil
	}

	if err := m.HealthState.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("healthState")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("healthState")
		}
		return err
	}

	return nil
}

func (m *GitlabComKeibiengineKeibiEnginePkgOnboardAPIConnection) validateLifecycleState(formats strfmt.Registry) error {
	if swag.IsZero(m.LifecycleState) { // not required
		return nil
	}

	if err := m.LifecycleState.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("lifecycleState")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("lifecycleState")
		}
		return err
	}

	return nil
}

// ContextValidate validate this gitlab com keibiengine keibi engine pkg onboard api connection based on the context it is used
func (m *GitlabComKeibiengineKeibiEnginePkgOnboardAPIConnection) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAssetDiscoveryMethod(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateConnector(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHealthState(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLifecycleState(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GitlabComKeibiengineKeibiEnginePkgOnboardAPIConnection) contextValidateAssetDiscoveryMethod(ctx context.Context, formats strfmt.Registry) error {

	if err := m.AssetDiscoveryMethod.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("assetDiscoveryMethod")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("assetDiscoveryMethod")
		}
		return err
	}

	return nil
}

func (m *GitlabComKeibiengineKeibiEnginePkgOnboardAPIConnection) contextValidateConnector(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Connector.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("connector")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("connector")
		}
		return err
	}

	return nil
}

func (m *GitlabComKeibiengineKeibiEnginePkgOnboardAPIConnection) contextValidateHealthState(ctx context.Context, formats strfmt.Registry) error {

	if err := m.HealthState.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("healthState")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("healthState")
		}
		return err
	}

	return nil
}

func (m *GitlabComKeibiengineKeibiEnginePkgOnboardAPIConnection) contextValidateLifecycleState(ctx context.Context, formats strfmt.Registry) error {

	if err := m.LifecycleState.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("lifecycleState")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("lifecycleState")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GitlabComKeibiengineKeibiEnginePkgOnboardAPIConnection) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GitlabComKeibiengineKeibiEnginePkgOnboardAPIConnection) UnmarshalBinary(b []byte) error {
	var res GitlabComKeibiengineKeibiEnginePkgOnboardAPIConnection
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
