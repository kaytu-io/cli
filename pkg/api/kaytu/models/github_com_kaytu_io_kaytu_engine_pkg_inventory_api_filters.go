// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// GithubComKaytuIoKaytuEnginePkgInventoryAPIFilters if you provide two values for same filter OR operation would be used if you provide value for two filters AND operation would be used
//
// swagger:model github_com_kaytu-io_kaytu-engine_pkg_inventory_api.Filters
type GithubComKaytuIoKaytuEnginePkgInventoryAPIFilters struct {

	// if you dont need to use this filter, leave them empty. (e.g. [])
	ConnectionID []string `json:"connectionID"`

	// if you dont need to use this filter, leave them empty. (e.g. [])
	Connectors []SourceType `json:"connectors"`

	// if you dont need to use this filter, leave them empty. (e.g. [])
	Location []string `json:"location"`

	// if you dont need to use this filter, leave them empty. (e.g. [])
	ResourceType []string `json:"resourceType"`

	// if you dont need to use this filter, leave them empty. (e.g. [])
	Service []string `json:"service"`
}

// Validate validates this github com kaytu io kaytu engine pkg inventory api filters
func (m *GithubComKaytuIoKaytuEnginePkgInventoryAPIFilters) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConnectors(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GithubComKaytuIoKaytuEnginePkgInventoryAPIFilters) validateConnectors(formats strfmt.Registry) error {
	if swag.IsZero(m.Connectors) { // not required
		return nil
	}

	for i := 0; i < len(m.Connectors); i++ {

		if err := m.Connectors[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("connectors" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("connectors" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

// ContextValidate validate this github com kaytu io kaytu engine pkg inventory api filters based on the context it is used
func (m *GithubComKaytuIoKaytuEnginePkgInventoryAPIFilters) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateConnectors(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GithubComKaytuIoKaytuEnginePkgInventoryAPIFilters) contextValidateConnectors(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Connectors); i++ {

		if swag.IsZero(m.Connectors[i]) { // not required
			return nil
		}

		if err := m.Connectors[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("connectors" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("connectors" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *GithubComKaytuIoKaytuEnginePkgInventoryAPIFilters) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GithubComKaytuIoKaytuEnginePkgInventoryAPIFilters) UnmarshalBinary(b []byte) error {
	var res GithubComKaytuIoKaytuEnginePkgInventoryAPIFilters
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
