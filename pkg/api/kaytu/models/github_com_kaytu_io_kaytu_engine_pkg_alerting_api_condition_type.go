// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// GithubComKaytuIoKaytuEnginePkgAlertingAPIConditionType github com kaytu io kaytu engine pkg alerting api condition type
//
// swagger:model github_com_kaytu-io_kaytu-engine_pkg_alerting_api.ConditionType
type GithubComKaytuIoKaytuEnginePkgAlertingAPIConditionType string

func NewGithubComKaytuIoKaytuEnginePkgAlertingAPIConditionType(value GithubComKaytuIoKaytuEnginePkgAlertingAPIConditionType) *GithubComKaytuIoKaytuEnginePkgAlertingAPIConditionType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated GithubComKaytuIoKaytuEnginePkgAlertingAPIConditionType.
func (m GithubComKaytuIoKaytuEnginePkgAlertingAPIConditionType) Pointer() *GithubComKaytuIoKaytuEnginePkgAlertingAPIConditionType {
	return &m
}

const (

	// GithubComKaytuIoKaytuEnginePkgAlertingAPIConditionTypeAND captures enum value "AND"
	GithubComKaytuIoKaytuEnginePkgAlertingAPIConditionTypeAND GithubComKaytuIoKaytuEnginePkgAlertingAPIConditionType = "AND"

	// GithubComKaytuIoKaytuEnginePkgAlertingAPIConditionTypeOR captures enum value "OR"
	GithubComKaytuIoKaytuEnginePkgAlertingAPIConditionTypeOR GithubComKaytuIoKaytuEnginePkgAlertingAPIConditionType = "OR"
)

// for schema
var githubComKaytuIoKaytuEnginePkgAlertingApiConditionTypeEnum []interface{}

func init() {
	var res []GithubComKaytuIoKaytuEnginePkgAlertingAPIConditionType
	if err := json.Unmarshal([]byte(`["AND","OR"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		githubComKaytuIoKaytuEnginePkgAlertingApiConditionTypeEnum = append(githubComKaytuIoKaytuEnginePkgAlertingApiConditionTypeEnum, v)
	}
}

func (m GithubComKaytuIoKaytuEnginePkgAlertingAPIConditionType) validateGithubComKaytuIoKaytuEnginePkgAlertingAPIConditionTypeEnum(path, location string, value GithubComKaytuIoKaytuEnginePkgAlertingAPIConditionType) error {
	if err := validate.EnumCase(path, location, value, githubComKaytuIoKaytuEnginePkgAlertingApiConditionTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this github com kaytu io kaytu engine pkg alerting api condition type
func (m GithubComKaytuIoKaytuEnginePkgAlertingAPIConditionType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateGithubComKaytuIoKaytuEnginePkgAlertingAPIConditionTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this github com kaytu io kaytu engine pkg alerting api condition type based on context it is used
func (m GithubComKaytuIoKaytuEnginePkgAlertingAPIConditionType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
