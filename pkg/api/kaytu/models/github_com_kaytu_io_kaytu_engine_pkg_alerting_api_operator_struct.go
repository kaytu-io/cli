// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// GithubComKaytuIoKaytuEnginePkgAlertingAPIOperatorStruct github com kaytu io kaytu engine pkg alerting api operator struct
//
// swagger:model github_com_kaytu-io_kaytu-engine_pkg_alerting_api.OperatorStruct
type GithubComKaytuIoKaytuEnginePkgAlertingAPIOperatorStruct struct {

	// condition
	Condition *GithubComKaytuIoKaytuEnginePkgAlertingAPIConditionStruct `json:"condition,omitempty"`

	// operator type
	OperatorType GithubComKaytuIoKaytuEnginePkgAlertingAPIOperatorType `json:"operator_type,omitempty"`

	// value
	Value int64 `json:"value,omitempty"`
}

// Validate validates this github com kaytu io kaytu engine pkg alerting api operator struct
func (m *GithubComKaytuIoKaytuEnginePkgAlertingAPIOperatorStruct) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCondition(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOperatorType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GithubComKaytuIoKaytuEnginePkgAlertingAPIOperatorStruct) validateCondition(formats strfmt.Registry) error {
	if swag.IsZero(m.Condition) { // not required
		return nil
	}

	if m.Condition != nil {
		if err := m.Condition.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("condition")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("condition")
			}
			return err
		}
	}

	return nil
}

func (m *GithubComKaytuIoKaytuEnginePkgAlertingAPIOperatorStruct) validateOperatorType(formats strfmt.Registry) error {
	if swag.IsZero(m.OperatorType) { // not required
		return nil
	}

	if err := m.OperatorType.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("operator_type")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("operator_type")
		}
		return err
	}

	return nil
}

// ContextValidate validate this github com kaytu io kaytu engine pkg alerting api operator struct based on the context it is used
func (m *GithubComKaytuIoKaytuEnginePkgAlertingAPIOperatorStruct) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCondition(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOperatorType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GithubComKaytuIoKaytuEnginePkgAlertingAPIOperatorStruct) contextValidateCondition(ctx context.Context, formats strfmt.Registry) error {

	if m.Condition != nil {

		if swag.IsZero(m.Condition) { // not required
			return nil
		}

		if err := m.Condition.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("condition")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("condition")
			}
			return err
		}
	}

	return nil
}

func (m *GithubComKaytuIoKaytuEnginePkgAlertingAPIOperatorStruct) contextValidateOperatorType(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.OperatorType) { // not required
		return nil
	}

	if err := m.OperatorType.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("operator_type")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("operator_type")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GithubComKaytuIoKaytuEnginePkgAlertingAPIOperatorStruct) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GithubComKaytuIoKaytuEnginePkgAlertingAPIOperatorStruct) UnmarshalBinary(b []byte) error {
	var res GithubComKaytuIoKaytuEnginePkgAlertingAPIOperatorStruct
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
