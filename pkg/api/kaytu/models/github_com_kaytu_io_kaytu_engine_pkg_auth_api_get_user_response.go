// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GithubComKaytuIoKaytuEnginePkgAuthAPIGetUserResponse github com kaytu io kaytu engine pkg auth api get user response
//
// swagger:model github_com_kaytu-io_kaytu-engine_pkg_auth_api.GetUserResponse
type GithubComKaytuIoKaytuEnginePkgAuthAPIGetUserResponse struct {

	// Is the user blocked or not
	// Example: false
	Blocked bool `json:"blocked,omitempty"`

	// Creation timestamp in UTC
	// Example: 2023-03-31T09:36:09.855Z
	CreatedAt string `json:"createdAt,omitempty"`

	// Email address of the user
	// Example: johndoe@example.com
	Email string `json:"email,omitempty"`

	// Is email verified or not
	// Example: true
	EmailVerified bool `json:"emailVerified,omitempty"`

	// Last activity timestamp in UTC
	// Example: 2023-04-21T08:53:09.928Z
	LastActivity string `json:"lastActivity,omitempty"`

	// Name of the role
	// Example: admin
	// Enum: [admin editor viewer]
	RoleName struct {
		GithubComKaytuIoKaytuEnginePkgAuthAPIRole
	} `json:"roleName,omitempty"`

	// Invite status
	// Example: accepted
	// Enum: [accepted pending]
	Status struct {
		GithubComKaytuIoKaytuEnginePkgAuthAPIInviteStatus
	} `json:"status,omitempty"`

	// Unique identifier for the user
	// Example: auth|123456789
	UserID string `json:"userId,omitempty"`

	// Username
	// Example: John Doe
	UserName string `json:"userName,omitempty"`
}

// Validate validates this github com kaytu io kaytu engine pkg auth api get user response
func (m *GithubComKaytuIoKaytuEnginePkgAuthAPIGetUserResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRoleName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var githubComKaytuIoKaytuEnginePkgAuthApiGetUserResponseTypeRoleNamePropEnum []interface{}

func init() {
	var res []struct {
		GithubComKaytuIoKaytuEnginePkgAuthAPIRole
	}
	if err := json.Unmarshal([]byte(`["admin","editor","viewer"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		githubComKaytuIoKaytuEnginePkgAuthApiGetUserResponseTypeRoleNamePropEnum = append(githubComKaytuIoKaytuEnginePkgAuthApiGetUserResponseTypeRoleNamePropEnum, v)
	}
}

// prop value enum
func (m *GithubComKaytuIoKaytuEnginePkgAuthAPIGetUserResponse) validateRoleNameEnum(path, location string, value *struct {
	GithubComKaytuIoKaytuEnginePkgAuthAPIRole
}) error {
	if err := validate.EnumCase(path, location, value, githubComKaytuIoKaytuEnginePkgAuthApiGetUserResponseTypeRoleNamePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *GithubComKaytuIoKaytuEnginePkgAuthAPIGetUserResponse) validateRoleName(formats strfmt.Registry) error {
	if swag.IsZero(m.RoleName) { // not required
		return nil
	}

	return nil
}

var githubComKaytuIoKaytuEnginePkgAuthApiGetUserResponseTypeStatusPropEnum []interface{}

func init() {
	var res []struct {
		GithubComKaytuIoKaytuEnginePkgAuthAPIInviteStatus
	}
	if err := json.Unmarshal([]byte(`["accepted","pending"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		githubComKaytuIoKaytuEnginePkgAuthApiGetUserResponseTypeStatusPropEnum = append(githubComKaytuIoKaytuEnginePkgAuthApiGetUserResponseTypeStatusPropEnum, v)
	}
}

// prop value enum
func (m *GithubComKaytuIoKaytuEnginePkgAuthAPIGetUserResponse) validateStatusEnum(path, location string, value *struct {
	GithubComKaytuIoKaytuEnginePkgAuthAPIInviteStatus
}) error {
	if err := validate.EnumCase(path, location, value, githubComKaytuIoKaytuEnginePkgAuthApiGetUserResponseTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *GithubComKaytuIoKaytuEnginePkgAuthAPIGetUserResponse) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	return nil
}

// ContextValidate validate this github com kaytu io kaytu engine pkg auth api get user response based on the context it is used
func (m *GithubComKaytuIoKaytuEnginePkgAuthAPIGetUserResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateRoleName(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GithubComKaytuIoKaytuEnginePkgAuthAPIGetUserResponse) contextValidateRoleName(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *GithubComKaytuIoKaytuEnginePkgAuthAPIGetUserResponse) contextValidateStatus(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

// MarshalBinary interface implementation
func (m *GithubComKaytuIoKaytuEnginePkgAuthAPIGetUserResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GithubComKaytuIoKaytuEnginePkgAuthAPIGetUserResponse) UnmarshalBinary(b []byte) error {
	var res GithubComKaytuIoKaytuEnginePkgAuthAPIGetUserResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
