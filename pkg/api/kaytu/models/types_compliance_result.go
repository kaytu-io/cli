// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// TypesComplianceResult types compliance result
//
// swagger:model types.ComplianceResult
type TypesComplianceResult string

func NewTypesComplianceResult(value TypesComplianceResult) *TypesComplianceResult {
	return &value
}

// Pointer returns a pointer to a freshly-allocated TypesComplianceResult.
func (m TypesComplianceResult) Pointer() *TypesComplianceResult {
	return &m
}

const (

	// TypesComplianceResultOk captures enum value "ok"
	TypesComplianceResultOk TypesComplianceResult = "ok"

	// TypesComplianceResultAlarm captures enum value "alarm"
	TypesComplianceResultAlarm TypesComplianceResult = "alarm"

	// TypesComplianceResultInfo captures enum value "info"
	TypesComplianceResultInfo TypesComplianceResult = "info"

	// TypesComplianceResultSkip captures enum value "skip"
	TypesComplianceResultSkip TypesComplianceResult = "skip"

	// TypesComplianceResultError captures enum value "error"
	TypesComplianceResultError TypesComplianceResult = "error"
)

// for schema
var typesComplianceResultEnum []interface{}

func init() {
	var res []TypesComplianceResult
	if err := json.Unmarshal([]byte(`["ok","alarm","info","skip","error"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		typesComplianceResultEnum = append(typesComplianceResultEnum, v)
	}
}

func (m TypesComplianceResult) validateTypesComplianceResultEnum(path, location string, value TypesComplianceResult) error {
	if err := validate.EnumCase(path, location, value, typesComplianceResultEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this types compliance result
func (m TypesComplianceResult) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateTypesComplianceResultEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this types compliance result based on context it is used
func (m TypesComplianceResult) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
