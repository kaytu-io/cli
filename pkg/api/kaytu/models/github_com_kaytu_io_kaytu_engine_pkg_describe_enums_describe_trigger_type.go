// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// GithubComKaytuIoKaytuEnginePkgDescribeEnumsDescribeTriggerType github com kaytu io kaytu engine pkg describe enums describe trigger type
//
// swagger:model github_com_kaytu-io_kaytu-engine_pkg_describe_enums.DescribeTriggerType
type GithubComKaytuIoKaytuEnginePkgDescribeEnumsDescribeTriggerType string

func NewGithubComKaytuIoKaytuEnginePkgDescribeEnumsDescribeTriggerType(value GithubComKaytuIoKaytuEnginePkgDescribeEnumsDescribeTriggerType) *GithubComKaytuIoKaytuEnginePkgDescribeEnumsDescribeTriggerType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated GithubComKaytuIoKaytuEnginePkgDescribeEnumsDescribeTriggerType.
func (m GithubComKaytuIoKaytuEnginePkgDescribeEnumsDescribeTriggerType) Pointer() *GithubComKaytuIoKaytuEnginePkgDescribeEnumsDescribeTriggerType {
	return &m
}

const (

	// GithubComKaytuIoKaytuEnginePkgDescribeEnumsDescribeTriggerTypeInitialDiscovery captures enum value "initial_discovery"
	GithubComKaytuIoKaytuEnginePkgDescribeEnumsDescribeTriggerTypeInitialDiscovery GithubComKaytuIoKaytuEnginePkgDescribeEnumsDescribeTriggerType = "initial_discovery"

	// GithubComKaytuIoKaytuEnginePkgDescribeEnumsDescribeTriggerTypeScheduled captures enum value "scheduled"
	GithubComKaytuIoKaytuEnginePkgDescribeEnumsDescribeTriggerTypeScheduled GithubComKaytuIoKaytuEnginePkgDescribeEnumsDescribeTriggerType = "scheduled"

	// GithubComKaytuIoKaytuEnginePkgDescribeEnumsDescribeTriggerTypeManual captures enum value "manual"
	GithubComKaytuIoKaytuEnginePkgDescribeEnumsDescribeTriggerTypeManual GithubComKaytuIoKaytuEnginePkgDescribeEnumsDescribeTriggerType = "manual"

	// GithubComKaytuIoKaytuEnginePkgDescribeEnumsDescribeTriggerTypeStack captures enum value "stack"
	GithubComKaytuIoKaytuEnginePkgDescribeEnumsDescribeTriggerTypeStack GithubComKaytuIoKaytuEnginePkgDescribeEnumsDescribeTriggerType = "stack"
)

// for schema
var githubComKaytuIoKaytuEnginePkgDescribeEnumsDescribeTriggerTypeEnum []interface{}

func init() {
	var res []GithubComKaytuIoKaytuEnginePkgDescribeEnumsDescribeTriggerType
	if err := json.Unmarshal([]byte(`["initial_discovery","scheduled","manual","stack"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		githubComKaytuIoKaytuEnginePkgDescribeEnumsDescribeTriggerTypeEnum = append(githubComKaytuIoKaytuEnginePkgDescribeEnumsDescribeTriggerTypeEnum, v)
	}
}

func (m GithubComKaytuIoKaytuEnginePkgDescribeEnumsDescribeTriggerType) validateGithubComKaytuIoKaytuEnginePkgDescribeEnumsDescribeTriggerTypeEnum(path, location string, value GithubComKaytuIoKaytuEnginePkgDescribeEnumsDescribeTriggerType) error {
	if err := validate.EnumCase(path, location, value, githubComKaytuIoKaytuEnginePkgDescribeEnumsDescribeTriggerTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this github com kaytu io kaytu engine pkg describe enums describe trigger type
func (m GithubComKaytuIoKaytuEnginePkgDescribeEnumsDescribeTriggerType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateGithubComKaytuIoKaytuEnginePkgDescribeEnumsDescribeTriggerTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this github com kaytu io kaytu engine pkg describe enums describe trigger type based on context it is used
func (m GithubComKaytuIoKaytuEnginePkgDescribeEnumsDescribeTriggerType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
