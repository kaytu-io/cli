// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// GithubComKaytuIoKaytuEnginePkgComplianceAPIFindingFiltersWithMetadata github com kaytu io kaytu engine pkg compliance api finding filters with metadata
//
// swagger:model github_com_kaytu-io_kaytu-engine_pkg_compliance_api.FindingFiltersWithMetadata
type GithubComKaytuIoKaytuEnginePkgComplianceAPIFindingFiltersWithMetadata struct {

	// benchmark ID
	BenchmarkID []*GithubComKaytuIoKaytuEnginePkgComplianceAPIFindingFilterWithMetadata `json:"benchmarkID"`

	// connection ID
	ConnectionID []*GithubComKaytuIoKaytuEnginePkgComplianceAPIFindingFilterWithMetadata `json:"connectionID"`

	// connector
	Connector []*GithubComKaytuIoKaytuEnginePkgComplianceAPIFindingFilterWithMetadata `json:"connector"`

	// control ID
	ControlID []*GithubComKaytuIoKaytuEnginePkgComplianceAPIFindingFilterWithMetadata `json:"controlID"`

	// resource collection
	ResourceCollection []*GithubComKaytuIoKaytuEnginePkgComplianceAPIFindingFilterWithMetadata `json:"resourceCollection"`

	// resource type ID
	ResourceTypeID []*GithubComKaytuIoKaytuEnginePkgComplianceAPIFindingFilterWithMetadata `json:"resourceTypeID"`

	// severity
	Severity []*GithubComKaytuIoKaytuEnginePkgComplianceAPIFindingFilterWithMetadata `json:"severity"`
}

// Validate validates this github com kaytu io kaytu engine pkg compliance api finding filters with metadata
func (m *GithubComKaytuIoKaytuEnginePkgComplianceAPIFindingFiltersWithMetadata) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBenchmarkID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConnectionID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConnector(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateControlID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResourceCollection(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResourceTypeID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSeverity(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GithubComKaytuIoKaytuEnginePkgComplianceAPIFindingFiltersWithMetadata) validateBenchmarkID(formats strfmt.Registry) error {
	if swag.IsZero(m.BenchmarkID) { // not required
		return nil
	}

	for i := 0; i < len(m.BenchmarkID); i++ {
		if swag.IsZero(m.BenchmarkID[i]) { // not required
			continue
		}

		if m.BenchmarkID[i] != nil {
			if err := m.BenchmarkID[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("benchmarkID" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("benchmarkID" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *GithubComKaytuIoKaytuEnginePkgComplianceAPIFindingFiltersWithMetadata) validateConnectionID(formats strfmt.Registry) error {
	if swag.IsZero(m.ConnectionID) { // not required
		return nil
	}

	for i := 0; i < len(m.ConnectionID); i++ {
		if swag.IsZero(m.ConnectionID[i]) { // not required
			continue
		}

		if m.ConnectionID[i] != nil {
			if err := m.ConnectionID[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("connectionID" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("connectionID" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *GithubComKaytuIoKaytuEnginePkgComplianceAPIFindingFiltersWithMetadata) validateConnector(formats strfmt.Registry) error {
	if swag.IsZero(m.Connector) { // not required
		return nil
	}

	for i := 0; i < len(m.Connector); i++ {
		if swag.IsZero(m.Connector[i]) { // not required
			continue
		}

		if m.Connector[i] != nil {
			if err := m.Connector[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("connector" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("connector" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *GithubComKaytuIoKaytuEnginePkgComplianceAPIFindingFiltersWithMetadata) validateControlID(formats strfmt.Registry) error {
	if swag.IsZero(m.ControlID) { // not required
		return nil
	}

	for i := 0; i < len(m.ControlID); i++ {
		if swag.IsZero(m.ControlID[i]) { // not required
			continue
		}

		if m.ControlID[i] != nil {
			if err := m.ControlID[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("controlID" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("controlID" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *GithubComKaytuIoKaytuEnginePkgComplianceAPIFindingFiltersWithMetadata) validateResourceCollection(formats strfmt.Registry) error {
	if swag.IsZero(m.ResourceCollection) { // not required
		return nil
	}

	for i := 0; i < len(m.ResourceCollection); i++ {
		if swag.IsZero(m.ResourceCollection[i]) { // not required
			continue
		}

		if m.ResourceCollection[i] != nil {
			if err := m.ResourceCollection[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("resourceCollection" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("resourceCollection" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *GithubComKaytuIoKaytuEnginePkgComplianceAPIFindingFiltersWithMetadata) validateResourceTypeID(formats strfmt.Registry) error {
	if swag.IsZero(m.ResourceTypeID) { // not required
		return nil
	}

	for i := 0; i < len(m.ResourceTypeID); i++ {
		if swag.IsZero(m.ResourceTypeID[i]) { // not required
			continue
		}

		if m.ResourceTypeID[i] != nil {
			if err := m.ResourceTypeID[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("resourceTypeID" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("resourceTypeID" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *GithubComKaytuIoKaytuEnginePkgComplianceAPIFindingFiltersWithMetadata) validateSeverity(formats strfmt.Registry) error {
	if swag.IsZero(m.Severity) { // not required
		return nil
	}

	for i := 0; i < len(m.Severity); i++ {
		if swag.IsZero(m.Severity[i]) { // not required
			continue
		}

		if m.Severity[i] != nil {
			if err := m.Severity[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("severity" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("severity" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this github com kaytu io kaytu engine pkg compliance api finding filters with metadata based on the context it is used
func (m *GithubComKaytuIoKaytuEnginePkgComplianceAPIFindingFiltersWithMetadata) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBenchmarkID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateConnectionID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateConnector(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateControlID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateResourceCollection(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateResourceTypeID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSeverity(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GithubComKaytuIoKaytuEnginePkgComplianceAPIFindingFiltersWithMetadata) contextValidateBenchmarkID(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.BenchmarkID); i++ {

		if m.BenchmarkID[i] != nil {

			if swag.IsZero(m.BenchmarkID[i]) { // not required
				return nil
			}

			if err := m.BenchmarkID[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("benchmarkID" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("benchmarkID" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *GithubComKaytuIoKaytuEnginePkgComplianceAPIFindingFiltersWithMetadata) contextValidateConnectionID(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ConnectionID); i++ {

		if m.ConnectionID[i] != nil {

			if swag.IsZero(m.ConnectionID[i]) { // not required
				return nil
			}

			if err := m.ConnectionID[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("connectionID" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("connectionID" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *GithubComKaytuIoKaytuEnginePkgComplianceAPIFindingFiltersWithMetadata) contextValidateConnector(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Connector); i++ {

		if m.Connector[i] != nil {

			if swag.IsZero(m.Connector[i]) { // not required
				return nil
			}

			if err := m.Connector[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("connector" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("connector" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *GithubComKaytuIoKaytuEnginePkgComplianceAPIFindingFiltersWithMetadata) contextValidateControlID(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ControlID); i++ {

		if m.ControlID[i] != nil {

			if swag.IsZero(m.ControlID[i]) { // not required
				return nil
			}

			if err := m.ControlID[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("controlID" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("controlID" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *GithubComKaytuIoKaytuEnginePkgComplianceAPIFindingFiltersWithMetadata) contextValidateResourceCollection(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ResourceCollection); i++ {

		if m.ResourceCollection[i] != nil {

			if swag.IsZero(m.ResourceCollection[i]) { // not required
				return nil
			}

			if err := m.ResourceCollection[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("resourceCollection" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("resourceCollection" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *GithubComKaytuIoKaytuEnginePkgComplianceAPIFindingFiltersWithMetadata) contextValidateResourceTypeID(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ResourceTypeID); i++ {

		if m.ResourceTypeID[i] != nil {

			if swag.IsZero(m.ResourceTypeID[i]) { // not required
				return nil
			}

			if err := m.ResourceTypeID[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("resourceTypeID" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("resourceTypeID" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *GithubComKaytuIoKaytuEnginePkgComplianceAPIFindingFiltersWithMetadata) contextValidateSeverity(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Severity); i++ {

		if m.Severity[i] != nil {

			if swag.IsZero(m.Severity[i]) { // not required
				return nil
			}

			if err := m.Severity[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("severity" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("severity" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *GithubComKaytuIoKaytuEnginePkgComplianceAPIFindingFiltersWithMetadata) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GithubComKaytuIoKaytuEnginePkgComplianceAPIFindingFiltersWithMetadata) UnmarshalBinary(b []byte) error {
	var res GithubComKaytuIoKaytuEnginePkgComplianceAPIFindingFiltersWithMetadata
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
