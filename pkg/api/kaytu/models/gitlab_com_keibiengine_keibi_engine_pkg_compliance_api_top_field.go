// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// GitlabComKeibiengineKeibiEnginePkgComplianceAPITopField gitlab com keibiengine keibi engine pkg compliance api top field
//
// swagger:model gitlab_com_keibiengine_keibi-engine_pkg_compliance_api.TopField
type GitlabComKeibiengineKeibiEnginePkgComplianceAPITopField string

func NewGitlabComKeibiengineKeibiEnginePkgComplianceAPITopField(value GitlabComKeibiengineKeibiEnginePkgComplianceAPITopField) *GitlabComKeibiengineKeibiEnginePkgComplianceAPITopField {
	return &value
}

// Pointer returns a pointer to a freshly-allocated GitlabComKeibiengineKeibiEnginePkgComplianceAPITopField.
func (m GitlabComKeibiengineKeibiEnginePkgComplianceAPITopField) Pointer() *GitlabComKeibiengineKeibiEnginePkgComplianceAPITopField {
	return &m
}

const (

	// GitlabComKeibiengineKeibiEnginePkgComplianceAPITopFieldResourceType captures enum value "resourceType"
	GitlabComKeibiengineKeibiEnginePkgComplianceAPITopFieldResourceType GitlabComKeibiengineKeibiEnginePkgComplianceAPITopField = "resourceType"

	// GitlabComKeibiengineKeibiEnginePkgComplianceAPITopFieldServiceName captures enum value "serviceName"
	GitlabComKeibiengineKeibiEnginePkgComplianceAPITopFieldServiceName GitlabComKeibiengineKeibiEnginePkgComplianceAPITopField = "serviceName"

	// GitlabComKeibiengineKeibiEnginePkgComplianceAPITopFieldSourceID captures enum value "sourceID"
	GitlabComKeibiengineKeibiEnginePkgComplianceAPITopFieldSourceID GitlabComKeibiengineKeibiEnginePkgComplianceAPITopField = "sourceID"

	// GitlabComKeibiengineKeibiEnginePkgComplianceAPITopFieldResourceID captures enum value "resourceID"
	GitlabComKeibiengineKeibiEnginePkgComplianceAPITopFieldResourceID GitlabComKeibiengineKeibiEnginePkgComplianceAPITopField = "resourceID"
)

// for schema
var gitlabComKeibiengineKeibiEnginePkgComplianceApiTopFieldEnum []interface{}

func init() {
	var res []GitlabComKeibiengineKeibiEnginePkgComplianceAPITopField
	if err := json.Unmarshal([]byte(`["resourceType","serviceName","sourceID","resourceID"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		gitlabComKeibiengineKeibiEnginePkgComplianceApiTopFieldEnum = append(gitlabComKeibiengineKeibiEnginePkgComplianceApiTopFieldEnum, v)
	}
}

func (m GitlabComKeibiengineKeibiEnginePkgComplianceAPITopField) validateGitlabComKeibiengineKeibiEnginePkgComplianceAPITopFieldEnum(path, location string, value GitlabComKeibiengineKeibiEnginePkgComplianceAPITopField) error {
	if err := validate.EnumCase(path, location, value, gitlabComKeibiengineKeibiEnginePkgComplianceApiTopFieldEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this gitlab com keibiengine keibi engine pkg compliance api top field
func (m GitlabComKeibiengineKeibiEnginePkgComplianceAPITopField) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateGitlabComKeibiengineKeibiEnginePkgComplianceAPITopFieldEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this gitlab com keibiengine keibi engine pkg compliance api top field based on context it is used
func (m GitlabComKeibiengineKeibiEnginePkgComplianceAPITopField) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
