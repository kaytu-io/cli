// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// GitlabComKeibiengineKeibiEnginePkgComplianceAPIBenchmarkAssignedSource gitlab com keibiengine keibi engine pkg compliance api benchmark assigned source
//
// swagger:model gitlab_com_keibiengine_keibi-engine_pkg_compliance_api.BenchmarkAssignedSource
type GitlabComKeibiengineKeibiEnginePkgComplianceAPIBenchmarkAssignedSource struct {

	// connection ID
	ConnectionID string `json:"connectionID,omitempty"`

	// connection name
	ConnectionName string `json:"connectionName,omitempty"`

	// connector
	Connector SourceType `json:"connector,omitempty"`

	// status
	Status bool `json:"status,omitempty"`
}

// Validate validates this gitlab com keibiengine keibi engine pkg compliance api benchmark assigned source
func (m *GitlabComKeibiengineKeibiEnginePkgComplianceAPIBenchmarkAssignedSource) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConnector(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GitlabComKeibiengineKeibiEnginePkgComplianceAPIBenchmarkAssignedSource) validateConnector(formats strfmt.Registry) error {
	if swag.IsZero(m.Connector) { // not required
		return nil
	}

	if err := m.Connector.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("connector")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("connector")
		}
		return err
	}

	return nil
}

// ContextValidate validate this gitlab com keibiengine keibi engine pkg compliance api benchmark assigned source based on the context it is used
func (m *GitlabComKeibiengineKeibiEnginePkgComplianceAPIBenchmarkAssignedSource) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateConnector(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GitlabComKeibiengineKeibiEnginePkgComplianceAPIBenchmarkAssignedSource) contextValidateConnector(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Connector.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("connector")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("connector")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GitlabComKeibiengineKeibiEnginePkgComplianceAPIBenchmarkAssignedSource) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GitlabComKeibiengineKeibiEnginePkgComplianceAPIBenchmarkAssignedSource) UnmarshalBinary(b []byte) error {
	var res GitlabComKeibiengineKeibiEnginePkgComplianceAPIBenchmarkAssignedSource
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
