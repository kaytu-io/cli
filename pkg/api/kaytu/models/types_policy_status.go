// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// TypesPolicyStatus types policy status
//
// swagger:model types.PolicyStatus
type TypesPolicyStatus string

func NewTypesPolicyStatus(value TypesPolicyStatus) *TypesPolicyStatus {
	return &value
}

// Pointer returns a pointer to a freshly-allocated TypesPolicyStatus.
func (m TypesPolicyStatus) Pointer() *TypesPolicyStatus {
	return &m
}

const (

	// TypesPolicyStatusPassed captures enum value "passed"
	TypesPolicyStatusPassed TypesPolicyStatus = "passed"

	// TypesPolicyStatusFailed captures enum value "failed"
	TypesPolicyStatusFailed TypesPolicyStatus = "failed"

	// TypesPolicyStatusUnknown captures enum value "unknown"
	TypesPolicyStatusUnknown TypesPolicyStatus = "unknown"
)

// for schema
var typesPolicyStatusEnum []interface{}

func init() {
	var res []TypesPolicyStatus
	if err := json.Unmarshal([]byte(`["passed","failed","unknown"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		typesPolicyStatusEnum = append(typesPolicyStatusEnum, v)
	}
}

func (m TypesPolicyStatus) validateTypesPolicyStatusEnum(path, location string, value TypesPolicyStatus) error {
	if err := validate.EnumCase(path, location, value, typesPolicyStatusEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this types policy status
func (m TypesPolicyStatus) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateTypesPolicyStatusEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this types policy status based on context it is used
func (m TypesPolicyStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
