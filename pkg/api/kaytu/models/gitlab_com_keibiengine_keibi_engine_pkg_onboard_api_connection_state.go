// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// GitlabComKeibiengineKeibiEnginePkgOnboardAPIConnectionState gitlab com keibiengine keibi engine pkg onboard api connection state
//
// swagger:model gitlab_com_keibiengine_keibi-engine_pkg_onboard_api.ConnectionState
type GitlabComKeibiengineKeibiEnginePkgOnboardAPIConnectionState string

func NewGitlabComKeibiengineKeibiEnginePkgOnboardAPIConnectionState(value GitlabComKeibiengineKeibiEnginePkgOnboardAPIConnectionState) *GitlabComKeibiengineKeibiEnginePkgOnboardAPIConnectionState {
	return &value
}

// Pointer returns a pointer to a freshly-allocated GitlabComKeibiengineKeibiEnginePkgOnboardAPIConnectionState.
func (m GitlabComKeibiengineKeibiEnginePkgOnboardAPIConnectionState) Pointer() *GitlabComKeibiengineKeibiEnginePkgOnboardAPIConnectionState {
	return &m
}

const (

	// GitlabComKeibiengineKeibiEnginePkgOnboardAPIConnectionStateENABLED captures enum value "ENABLED"
	GitlabComKeibiengineKeibiEnginePkgOnboardAPIConnectionStateENABLED GitlabComKeibiengineKeibiEnginePkgOnboardAPIConnectionState = "ENABLED"

	// GitlabComKeibiengineKeibiEnginePkgOnboardAPIConnectionStateDISABLED captures enum value "DISABLED"
	GitlabComKeibiengineKeibiEnginePkgOnboardAPIConnectionStateDISABLED GitlabComKeibiengineKeibiEnginePkgOnboardAPIConnectionState = "DISABLED"
)

// for schema
var gitlabComKeibiengineKeibiEnginePkgOnboardApiConnectionStateEnum []interface{}

func init() {
	var res []GitlabComKeibiengineKeibiEnginePkgOnboardAPIConnectionState
	if err := json.Unmarshal([]byte(`["ENABLED","DISABLED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		gitlabComKeibiengineKeibiEnginePkgOnboardApiConnectionStateEnum = append(gitlabComKeibiengineKeibiEnginePkgOnboardApiConnectionStateEnum, v)
	}
}

func (m GitlabComKeibiengineKeibiEnginePkgOnboardAPIConnectionState) validateGitlabComKeibiengineKeibiEnginePkgOnboardAPIConnectionStateEnum(path, location string, value GitlabComKeibiengineKeibiEnginePkgOnboardAPIConnectionState) error {
	if err := validate.EnumCase(path, location, value, gitlabComKeibiengineKeibiEnginePkgOnboardApiConnectionStateEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this gitlab com keibiengine keibi engine pkg onboard api connection state
func (m GitlabComKeibiengineKeibiEnginePkgOnboardAPIConnectionState) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateGitlabComKeibiengineKeibiEnginePkgOnboardAPIConnectionStateEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this gitlab com keibiengine keibi engine pkg onboard api connection state based on context it is used
func (m GitlabComKeibiengineKeibiEnginePkgOnboardAPIConnectionState) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
