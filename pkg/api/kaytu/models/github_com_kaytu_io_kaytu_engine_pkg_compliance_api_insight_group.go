// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// GithubComKaytuIoKaytuEnginePkgComplianceAPIInsightGroup github com kaytu io kaytu engine pkg compliance api insight group
//
// swagger:model github_com_kaytu-io_kaytu-engine_pkg_compliance_api.InsightGroup
type GithubComKaytuIoKaytuEnginePkgComplianceAPIInsightGroup struct {

	// connectors
	// Example: ["[\"Azure\""," \"AWS\"]"]
	Connectors []SourceType `json:"connectors"`

	// description
	// Example: List clusters that have role-based access control (RBAC) disabled
	Description string `json:"description,omitempty"`

	// first old result date
	// Example: 2023-04-21T08:53:09.928Z
	FirstOldResultDate string `json:"firstOldResultDate,omitempty"`

	// id
	// Example: 23
	ID int64 `json:"id,omitempty"`

	// insights
	Insights []*GithubComKaytuIoKaytuEnginePkgComplianceAPIInsight `json:"insights"`

	// logo URL
	// Example: https://kaytu.io/logo.png
	LogoURL string `json:"logoURL,omitempty"`

	// long title
	// Example: List clusters that have role-based access control (RBAC) disabled
	LongTitle string `json:"longTitle,omitempty"`

	// old total result value
	// Example: 0
	OldTotalResultValue int64 `json:"oldTotalResultValue,omitempty"`

	// short title
	// Example: Clusters with no RBAC
	ShortTitle string `json:"shortTitle,omitempty"`

	// tags
	Tags map[string][]string `json:"tags,omitempty"`

	// total result value
	// Example: 10
	TotalResultValue int64 `json:"totalResultValue,omitempty"`
}

// Validate validates this github com kaytu io kaytu engine pkg compliance api insight group
func (m *GithubComKaytuIoKaytuEnginePkgComplianceAPIInsightGroup) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConnectors(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInsights(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GithubComKaytuIoKaytuEnginePkgComplianceAPIInsightGroup) validateConnectors(formats strfmt.Registry) error {
	if swag.IsZero(m.Connectors) { // not required
		return nil
	}

	for i := 0; i < len(m.Connectors); i++ {

		if err := m.Connectors[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("connectors" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("connectors" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *GithubComKaytuIoKaytuEnginePkgComplianceAPIInsightGroup) validateInsights(formats strfmt.Registry) error {
	if swag.IsZero(m.Insights) { // not required
		return nil
	}

	for i := 0; i < len(m.Insights); i++ {
		if swag.IsZero(m.Insights[i]) { // not required
			continue
		}

		if m.Insights[i] != nil {
			if err := m.Insights[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("insights" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("insights" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this github com kaytu io kaytu engine pkg compliance api insight group based on the context it is used
func (m *GithubComKaytuIoKaytuEnginePkgComplianceAPIInsightGroup) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateConnectors(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateInsights(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GithubComKaytuIoKaytuEnginePkgComplianceAPIInsightGroup) contextValidateConnectors(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Connectors); i++ {

		if swag.IsZero(m.Connectors[i]) { // not required
			return nil
		}

		if err := m.Connectors[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("connectors" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("connectors" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *GithubComKaytuIoKaytuEnginePkgComplianceAPIInsightGroup) contextValidateInsights(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Insights); i++ {

		if m.Insights[i] != nil {

			if swag.IsZero(m.Insights[i]) { // not required
				return nil
			}

			if err := m.Insights[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("insights" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("insights" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *GithubComKaytuIoKaytuEnginePkgComplianceAPIInsightGroup) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GithubComKaytuIoKaytuEnginePkgComplianceAPIInsightGroup) UnmarshalBinary(b []byte) error {
	var res GithubComKaytuIoKaytuEnginePkgComplianceAPIInsightGroup
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
