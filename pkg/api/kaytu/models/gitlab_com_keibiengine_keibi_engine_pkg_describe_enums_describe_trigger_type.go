// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// GitlabComKeibiengineKeibiEnginePkgDescribeEnumsDescribeTriggerType gitlab com keibiengine keibi engine pkg describe enums describe trigger type
//
// swagger:model gitlab_com_keibiengine_keibi-engine_pkg_describe_enums.DescribeTriggerType
type GitlabComKeibiengineKeibiEnginePkgDescribeEnumsDescribeTriggerType string

func NewGitlabComKeibiengineKeibiEnginePkgDescribeEnumsDescribeTriggerType(value GitlabComKeibiengineKeibiEnginePkgDescribeEnumsDescribeTriggerType) *GitlabComKeibiengineKeibiEnginePkgDescribeEnumsDescribeTriggerType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated GitlabComKeibiengineKeibiEnginePkgDescribeEnumsDescribeTriggerType.
func (m GitlabComKeibiengineKeibiEnginePkgDescribeEnumsDescribeTriggerType) Pointer() *GitlabComKeibiengineKeibiEnginePkgDescribeEnumsDescribeTriggerType {
	return &m
}

const (

	// GitlabComKeibiengineKeibiEnginePkgDescribeEnumsDescribeTriggerTypeInitialDiscovery captures enum value "initial_discovery"
	GitlabComKeibiengineKeibiEnginePkgDescribeEnumsDescribeTriggerTypeInitialDiscovery GitlabComKeibiengineKeibiEnginePkgDescribeEnumsDescribeTriggerType = "initial_discovery"

	// GitlabComKeibiengineKeibiEnginePkgDescribeEnumsDescribeTriggerTypeScheduled captures enum value "scheduled"
	GitlabComKeibiengineKeibiEnginePkgDescribeEnumsDescribeTriggerTypeScheduled GitlabComKeibiengineKeibiEnginePkgDescribeEnumsDescribeTriggerType = "scheduled"

	// GitlabComKeibiengineKeibiEnginePkgDescribeEnumsDescribeTriggerTypeManual captures enum value "manual"
	GitlabComKeibiengineKeibiEnginePkgDescribeEnumsDescribeTriggerTypeManual GitlabComKeibiengineKeibiEnginePkgDescribeEnumsDescribeTriggerType = "manual"
)

// for schema
var gitlabComKeibiengineKeibiEnginePkgDescribeEnumsDescribeTriggerTypeEnum []interface{}

func init() {
	var res []GitlabComKeibiengineKeibiEnginePkgDescribeEnumsDescribeTriggerType
	if err := json.Unmarshal([]byte(`["initial_discovery","scheduled","manual"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		gitlabComKeibiengineKeibiEnginePkgDescribeEnumsDescribeTriggerTypeEnum = append(gitlabComKeibiengineKeibiEnginePkgDescribeEnumsDescribeTriggerTypeEnum, v)
	}
}

func (m GitlabComKeibiengineKeibiEnginePkgDescribeEnumsDescribeTriggerType) validateGitlabComKeibiengineKeibiEnginePkgDescribeEnumsDescribeTriggerTypeEnum(path, location string, value GitlabComKeibiengineKeibiEnginePkgDescribeEnumsDescribeTriggerType) error {
	if err := validate.EnumCase(path, location, value, gitlabComKeibiengineKeibiEnginePkgDescribeEnumsDescribeTriggerTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this gitlab com keibiengine keibi engine pkg describe enums describe trigger type
func (m GitlabComKeibiengineKeibiEnginePkgDescribeEnumsDescribeTriggerType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateGitlabComKeibiengineKeibiEnginePkgDescribeEnumsDescribeTriggerTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this gitlab com keibiengine keibi engine pkg describe enums describe trigger type based on context it is used
func (m GitlabComKeibiengineKeibiEnginePkgDescribeEnumsDescribeTriggerType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
