// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// SourceConnectorDirectionType source connector direction type
//
// swagger:model source.ConnectorDirectionType
type SourceConnectorDirectionType string

func NewSourceConnectorDirectionType(value SourceConnectorDirectionType) *SourceConnectorDirectionType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated SourceConnectorDirectionType.
func (m SourceConnectorDirectionType) Pointer() *SourceConnectorDirectionType {
	return &m
}

const (

	// SourceConnectorDirectionTypeIngress captures enum value "ingress"
	SourceConnectorDirectionTypeIngress SourceConnectorDirectionType = "ingress"

	// SourceConnectorDirectionTypeEgress captures enum value "egress"
	SourceConnectorDirectionTypeEgress SourceConnectorDirectionType = "egress"

	// SourceConnectorDirectionTypeBoth captures enum value "both"
	SourceConnectorDirectionTypeBoth SourceConnectorDirectionType = "both"
)

// for schema
var sourceConnectorDirectionTypeEnum []interface{}

func init() {
	var res []SourceConnectorDirectionType
	if err := json.Unmarshal([]byte(`["ingress","egress","both"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		sourceConnectorDirectionTypeEnum = append(sourceConnectorDirectionTypeEnum, v)
	}
}

func (m SourceConnectorDirectionType) validateSourceConnectorDirectionTypeEnum(path, location string, value SourceConnectorDirectionType) error {
	if err := validate.EnumCase(path, location, value, sourceConnectorDirectionTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this source connector direction type
func (m SourceConnectorDirectionType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateSourceConnectorDirectionTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this source connector direction type based on context it is used
func (m SourceConnectorDirectionType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
