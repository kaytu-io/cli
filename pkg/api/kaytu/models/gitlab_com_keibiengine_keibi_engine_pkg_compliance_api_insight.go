// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// GitlabComKeibiengineKeibiEnginePkgComplianceAPIInsight gitlab com keibiengine keibi engine pkg compliance api insight
//
// swagger:model gitlab_com_keibiengine_keibi-engine_pkg_compliance_api.Insight
type GitlabComKeibiengineKeibiEnginePkgComplianceAPIInsight struct {

	// connector
	Connector SourceType `json:"connector,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// enabled
	Enabled bool `json:"enabled,omitempty"`

	// id
	ID int64 `json:"id,omitempty"`

	// internal
	Internal bool `json:"internal,omitempty"`

	// labels
	Labels map[string][]string `json:"labels,omitempty"`

	// links
	Links []string `json:"links"`

	// logo URL
	LogoURL string `json:"logoURL,omitempty"`

	// long title
	LongTitle string `json:"longTitle,omitempty"`

	// query
	Query *GitlabComKeibiengineKeibiEnginePkgComplianceAPIQuery `json:"query,omitempty"`

	// result
	Result []*GitlabComKeibiengineKeibiEnginePkgComplianceAPIInsightResult `json:"result"`

	// short title
	ShortTitle string `json:"shortTitle,omitempty"`

	// total result value
	TotalResultValue int64 `json:"totalResultValue,omitempty"`

	// total result value change percent
	TotalResultValueChangePercent float64 `json:"totalResultValueChangePercent,omitempty"`
}

// Validate validates this gitlab com keibiengine keibi engine pkg compliance api insight
func (m *GitlabComKeibiengineKeibiEnginePkgComplianceAPIInsight) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConnector(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQuery(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResult(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GitlabComKeibiengineKeibiEnginePkgComplianceAPIInsight) validateConnector(formats strfmt.Registry) error {
	if swag.IsZero(m.Connector) { // not required
		return nil
	}

	if err := m.Connector.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("connector")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("connector")
		}
		return err
	}

	return nil
}

func (m *GitlabComKeibiengineKeibiEnginePkgComplianceAPIInsight) validateQuery(formats strfmt.Registry) error {
	if swag.IsZero(m.Query) { // not required
		return nil
	}

	if m.Query != nil {
		if err := m.Query.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("query")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("query")
			}
			return err
		}
	}

	return nil
}

func (m *GitlabComKeibiengineKeibiEnginePkgComplianceAPIInsight) validateResult(formats strfmt.Registry) error {
	if swag.IsZero(m.Result) { // not required
		return nil
	}

	for i := 0; i < len(m.Result); i++ {
		if swag.IsZero(m.Result[i]) { // not required
			continue
		}

		if m.Result[i] != nil {
			if err := m.Result[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("result" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("result" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this gitlab com keibiengine keibi engine pkg compliance api insight based on the context it is used
func (m *GitlabComKeibiengineKeibiEnginePkgComplianceAPIInsight) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateConnector(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateQuery(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateResult(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GitlabComKeibiengineKeibiEnginePkgComplianceAPIInsight) contextValidateConnector(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Connector.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("connector")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("connector")
		}
		return err
	}

	return nil
}

func (m *GitlabComKeibiengineKeibiEnginePkgComplianceAPIInsight) contextValidateQuery(ctx context.Context, formats strfmt.Registry) error {

	if m.Query != nil {
		if err := m.Query.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("query")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("query")
			}
			return err
		}
	}

	return nil
}

func (m *GitlabComKeibiengineKeibiEnginePkgComplianceAPIInsight) contextValidateResult(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Result); i++ {

		if m.Result[i] != nil {
			if err := m.Result[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("result" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("result" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *GitlabComKeibiengineKeibiEnginePkgComplianceAPIInsight) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GitlabComKeibiengineKeibiEnginePkgComplianceAPIInsight) UnmarshalBinary(b []byte) error {
	var res GitlabComKeibiengineKeibiEnginePkgComplianceAPIInsight
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
