// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// GitlabComKeibiengineKeibiEnginePkgInsightEsInsightResource gitlab com keibiengine keibi engine pkg insight es insight resource
//
// swagger:model gitlab_com_keibiengine_keibi-engine_pkg_insight_es.InsightResource
type GitlabComKeibiengineKeibiEnginePkgInsightEsInsightResource struct {

	// AccountID
	AccountID string `json:"account_id,omitempty"`

	// Description
	Description string `json:"description,omitempty"`

	// ExecutedAt is when the query is executed
	ExecutedAt int64 `json:"executed_at,omitempty"`

	// IncludedConnections list of the connections ids of the resources included in this insight
	IncludedConnections []*GitlabComKeibiengineKeibiEnginePkgInsightEsInsightConnection `json:"included_connections"`

	// Internal hidden to user
	Internal bool `json:"internal,omitempty"`

	// JobID is the ID of the job which produced this resource
	JobID int64 `json:"job_id,omitempty"`

	// LastDayValue result of the same query last day
	LastDayValue int64 `json:"last_day_value,omitempty"`

	// LastMonthValue result of the same query last week
	LastMonthValue int64 `json:"last_month_value,omitempty"`

	// LastQuarterValue result of the same query last quarter
	LastQuarterValue int64 `json:"last_quarter_value,omitempty"`

	// LastWeekValue result of the same query last week
	LastWeekValue int64 `json:"last_week_value,omitempty"`

	// LastYearValue result of the same query last year
	LastYearValue int64 `json:"last_year_value,omitempty"`

	// Locations list of the locations of the resources included in this insight
	Locations []string `json:"locations"`

	// Provider
	Provider struct {
		SourceType
	} `json:"provider,omitempty"`

	// Query
	Query string `json:"query,omitempty"`

	// QueryID is the ID of steampipe query which has been executed
	QueryID int64 `json:"query_id,omitempty"`

	// ResourceType shows which collection of docs this resource belongs to
	ResourceType struct {
		GitlabComKeibiengineKeibiEnginePkgInsightEsInsightResourceType
	} `json:"resource_type,omitempty"`

	// Result of query
	Result int64 `json:"result,omitempty"`

	// s3 location
	S3Location string `json:"s3_location,omitempty"`

	// ScheduleUUID
	ScheduleUUID string `json:"schedule_uuid,omitempty"`

	// SmartQueryID is the ID of smart query id which is connected to this insight
	SmartQueryID int64 `json:"smart_query_id,omitempty"`

	// SourceID
	SourceID string `json:"source_id,omitempty"`
}

// Validate validates this gitlab com keibiengine keibi engine pkg insight es insight resource
func (m *GitlabComKeibiengineKeibiEnginePkgInsightEsInsightResource) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateIncludedConnections(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProvider(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResourceType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GitlabComKeibiengineKeibiEnginePkgInsightEsInsightResource) validateIncludedConnections(formats strfmt.Registry) error {
	if swag.IsZero(m.IncludedConnections) { // not required
		return nil
	}

	for i := 0; i < len(m.IncludedConnections); i++ {
		if swag.IsZero(m.IncludedConnections[i]) { // not required
			continue
		}

		if m.IncludedConnections[i] != nil {
			if err := m.IncludedConnections[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("included_connections" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("included_connections" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *GitlabComKeibiengineKeibiEnginePkgInsightEsInsightResource) validateProvider(formats strfmt.Registry) error {
	if swag.IsZero(m.Provider) { // not required
		return nil
	}

	return nil
}

func (m *GitlabComKeibiengineKeibiEnginePkgInsightEsInsightResource) validateResourceType(formats strfmt.Registry) error {
	if swag.IsZero(m.ResourceType) { // not required
		return nil
	}

	return nil
}

// ContextValidate validate this gitlab com keibiengine keibi engine pkg insight es insight resource based on the context it is used
func (m *GitlabComKeibiengineKeibiEnginePkgInsightEsInsightResource) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateIncludedConnections(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateProvider(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateResourceType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GitlabComKeibiengineKeibiEnginePkgInsightEsInsightResource) contextValidateIncludedConnections(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.IncludedConnections); i++ {

		if m.IncludedConnections[i] != nil {
			if err := m.IncludedConnections[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("included_connections" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("included_connections" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *GitlabComKeibiengineKeibiEnginePkgInsightEsInsightResource) contextValidateProvider(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *GitlabComKeibiengineKeibiEnginePkgInsightEsInsightResource) contextValidateResourceType(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

// MarshalBinary interface implementation
func (m *GitlabComKeibiengineKeibiEnginePkgInsightEsInsightResource) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GitlabComKeibiengineKeibiEnginePkgInsightEsInsightResource) UnmarshalBinary(b []byte) error {
	var res GitlabComKeibiengineKeibiEnginePkgInsightEsInsightResource
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
