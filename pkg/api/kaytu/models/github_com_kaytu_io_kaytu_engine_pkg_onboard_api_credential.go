// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// GithubComKaytuIoKaytuEnginePkgOnboardAPICredential github com kaytu io kaytu engine pkg onboard api credential
//
// swagger:model github_com_kaytu-io_kaytu-engine_pkg_onboard_api.Credential
type GithubComKaytuIoKaytuEnginePkgOnboardAPICredential struct {

	// connections
	Connections []*GithubComKaytuIoKaytuEnginePkgOnboardAPIConnection `json:"connections"`

	// connector type
	ConnectorType SourceType `json:"connectorType,omitempty"`

	// credential type
	CredentialType SourceCredentialType `json:"credentialType,omitempty"`

	// enabled
	Enabled bool `json:"enabled,omitempty"`

	// enabled connections
	EnabledConnections int64 `json:"enabled_connections,omitempty"`

	// health reason
	HealthReason string `json:"healthReason,omitempty"`

	// health status
	HealthStatus SourceHealthStatus `json:"healthStatus,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// last health check time
	LastHealthCheckTime string `json:"lastHealthCheckTime,omitempty"`

	// metadata
	Metadata interface{} `json:"metadata,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// onboard date
	OnboardDate string `json:"onboardDate,omitempty"`

	// total connections
	TotalConnections int64 `json:"total_connections,omitempty"`

	// unhealthy connections
	UnhealthyConnections int64 `json:"unhealthy_connections,omitempty"`
}

// Validate validates this github com kaytu io kaytu engine pkg onboard api credential
func (m *GithubComKaytuIoKaytuEnginePkgOnboardAPICredential) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConnections(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConnectorType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCredentialType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHealthStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GithubComKaytuIoKaytuEnginePkgOnboardAPICredential) validateConnections(formats strfmt.Registry) error {
	if swag.IsZero(m.Connections) { // not required
		return nil
	}

	for i := 0; i < len(m.Connections); i++ {
		if swag.IsZero(m.Connections[i]) { // not required
			continue
		}

		if m.Connections[i] != nil {
			if err := m.Connections[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("connections" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("connections" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *GithubComKaytuIoKaytuEnginePkgOnboardAPICredential) validateConnectorType(formats strfmt.Registry) error {
	if swag.IsZero(m.ConnectorType) { // not required
		return nil
	}

	if err := m.ConnectorType.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("connectorType")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("connectorType")
		}
		return err
	}

	return nil
}

func (m *GithubComKaytuIoKaytuEnginePkgOnboardAPICredential) validateCredentialType(formats strfmt.Registry) error {
	if swag.IsZero(m.CredentialType) { // not required
		return nil
	}

	if err := m.CredentialType.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("credentialType")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("credentialType")
		}
		return err
	}

	return nil
}

func (m *GithubComKaytuIoKaytuEnginePkgOnboardAPICredential) validateHealthStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.HealthStatus) { // not required
		return nil
	}

	if err := m.HealthStatus.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("healthStatus")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("healthStatus")
		}
		return err
	}

	return nil
}

// ContextValidate validate this github com kaytu io kaytu engine pkg onboard api credential based on the context it is used
func (m *GithubComKaytuIoKaytuEnginePkgOnboardAPICredential) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateConnections(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateConnectorType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCredentialType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHealthStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GithubComKaytuIoKaytuEnginePkgOnboardAPICredential) contextValidateConnections(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Connections); i++ {

		if m.Connections[i] != nil {

			if swag.IsZero(m.Connections[i]) { // not required
				return nil
			}

			if err := m.Connections[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("connections" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("connections" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *GithubComKaytuIoKaytuEnginePkgOnboardAPICredential) contextValidateConnectorType(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.ConnectorType) { // not required
		return nil
	}

	if err := m.ConnectorType.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("connectorType")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("connectorType")
		}
		return err
	}

	return nil
}

func (m *GithubComKaytuIoKaytuEnginePkgOnboardAPICredential) contextValidateCredentialType(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.CredentialType) { // not required
		return nil
	}

	if err := m.CredentialType.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("credentialType")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("credentialType")
		}
		return err
	}

	return nil
}

func (m *GithubComKaytuIoKaytuEnginePkgOnboardAPICredential) contextValidateHealthStatus(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.HealthStatus) { // not required
		return nil
	}

	if err := m.HealthStatus.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("healthStatus")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("healthStatus")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GithubComKaytuIoKaytuEnginePkgOnboardAPICredential) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GithubComKaytuIoKaytuEnginePkgOnboardAPICredential) UnmarshalBinary(b []byte) error {
	var res GithubComKaytuIoKaytuEnginePkgOnboardAPICredential
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
