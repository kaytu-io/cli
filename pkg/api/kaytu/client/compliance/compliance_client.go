// Code generated by go-swagger; DO NOT EDIT.

package compliance

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new compliance API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for compliance API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	GetComplianceAPIV1BenchmarkBenchmarkIDSummary(params *GetComplianceAPIV1BenchmarkBenchmarkIDSummaryParams, opts ...ClientOption) (*GetComplianceAPIV1BenchmarkBenchmarkIDSummaryOK, error)

	GetComplianceAPIV1BenchmarkBenchmarkIDSummaryResultTrend(params *GetComplianceAPIV1BenchmarkBenchmarkIDSummaryResultTrendParams, opts ...ClientOption) (*GetComplianceAPIV1BenchmarkBenchmarkIDSummaryResultTrendOK, error)

	GetComplianceAPIV1BenchmarkBenchmarkIDTree(params *GetComplianceAPIV1BenchmarkBenchmarkIDTreeParams, opts ...ClientOption) (*GetComplianceAPIV1BenchmarkBenchmarkIDTreeOK, error)

	GetComplianceAPIV1Benchmarks(params *GetComplianceAPIV1BenchmarksParams, opts ...ClientOption) (*GetComplianceAPIV1BenchmarksOK, error)

	GetComplianceAPIV1BenchmarksBenchmarkID(params *GetComplianceAPIV1BenchmarksBenchmarkIDParams, opts ...ClientOption) (*GetComplianceAPIV1BenchmarksBenchmarkIDOK, error)

	GetComplianceAPIV1BenchmarksBenchmarkIDPolicies(params *GetComplianceAPIV1BenchmarksBenchmarkIDPoliciesParams, opts ...ClientOption) (*GetComplianceAPIV1BenchmarksBenchmarkIDPoliciesOK, error)

	GetComplianceAPIV1BenchmarksPoliciesPolicyID(params *GetComplianceAPIV1BenchmarksPoliciesPolicyIDParams, opts ...ClientOption) (*GetComplianceAPIV1BenchmarksPoliciesPolicyIDOK, error)

	GetComplianceAPIV1BenchmarksSummary(params *GetComplianceAPIV1BenchmarksSummaryParams, opts ...ClientOption) (*GetComplianceAPIV1BenchmarksSummaryOK, error)

	GetComplianceAPIV1FindingsBenchmarkIDFieldTopCount(params *GetComplianceAPIV1FindingsBenchmarkIDFieldTopCountParams, opts ...ClientOption) (*GetComplianceAPIV1FindingsBenchmarkIDFieldTopCountOK, error)

	GetComplianceAPIV1FindingsMetrics(params *GetComplianceAPIV1FindingsMetricsParams, opts ...ClientOption) (*GetComplianceAPIV1FindingsMetricsOK, error)

	GetComplianceAPIV1QueriesQueryID(params *GetComplianceAPIV1QueriesQueryIDParams, opts ...ClientOption) (*GetComplianceAPIV1QueriesQueryIDOK, error)

	GetScheduleAPIV1BenchmarkEvaluations(params *GetScheduleAPIV1BenchmarkEvaluationsParams, opts ...ClientOption) (*GetScheduleAPIV1BenchmarkEvaluationsOK, error)

	PostComplianceAPIV1AlarmsTop(params *PostComplianceAPIV1AlarmsTopParams, opts ...ClientOption) (*PostComplianceAPIV1AlarmsTopOK, error)

	PostComplianceAPIV1Findings(params *PostComplianceAPIV1FindingsParams, opts ...ClientOption) (*PostComplianceAPIV1FindingsOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
GetComplianceAPIV1BenchmarkBenchmarkIDSummary gets benchmark summary
*/
func (a *Client) GetComplianceAPIV1BenchmarkBenchmarkIDSummary(params *GetComplianceAPIV1BenchmarkBenchmarkIDSummaryParams, opts ...ClientOption) (*GetComplianceAPIV1BenchmarkBenchmarkIDSummaryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetComplianceAPIV1BenchmarkBenchmarkIDSummaryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetComplianceAPIV1BenchmarkBenchmarkIDSummary",
		Method:             "GET",
		PathPattern:        "/compliance/api/v1/benchmark/{benchmark_id}/summary",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetComplianceAPIV1BenchmarkBenchmarkIDSummaryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetComplianceAPIV1BenchmarkBenchmarkIDSummaryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetComplianceAPIV1BenchmarkBenchmarkIDSummary: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetComplianceAPIV1BenchmarkBenchmarkIDSummaryResultTrend gets result trend
*/
func (a *Client) GetComplianceAPIV1BenchmarkBenchmarkIDSummaryResultTrend(params *GetComplianceAPIV1BenchmarkBenchmarkIDSummaryResultTrendParams, opts ...ClientOption) (*GetComplianceAPIV1BenchmarkBenchmarkIDSummaryResultTrendOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetComplianceAPIV1BenchmarkBenchmarkIDSummaryResultTrendParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetComplianceAPIV1BenchmarkBenchmarkIDSummaryResultTrend",
		Method:             "GET",
		PathPattern:        "/compliance/api/v1/benchmark/{benchmark_id}/summary/result/trend",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetComplianceAPIV1BenchmarkBenchmarkIDSummaryResultTrendReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetComplianceAPIV1BenchmarkBenchmarkIDSummaryResultTrendOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetComplianceAPIV1BenchmarkBenchmarkIDSummaryResultTrend: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetComplianceAPIV1BenchmarkBenchmarkIDTree gets benchmark tree
*/
func (a *Client) GetComplianceAPIV1BenchmarkBenchmarkIDTree(params *GetComplianceAPIV1BenchmarkBenchmarkIDTreeParams, opts ...ClientOption) (*GetComplianceAPIV1BenchmarkBenchmarkIDTreeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetComplianceAPIV1BenchmarkBenchmarkIDTreeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetComplianceAPIV1BenchmarkBenchmarkIDTree",
		Method:             "GET",
		PathPattern:        "/compliance/api/v1/benchmark/{benchmark_id}/tree",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetComplianceAPIV1BenchmarkBenchmarkIDTreeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetComplianceAPIV1BenchmarkBenchmarkIDTreeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetComplianceAPIV1BenchmarkBenchmarkIDTree: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetComplianceAPIV1Benchmarks lists benchmarks
*/
func (a *Client) GetComplianceAPIV1Benchmarks(params *GetComplianceAPIV1BenchmarksParams, opts ...ClientOption) (*GetComplianceAPIV1BenchmarksOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetComplianceAPIV1BenchmarksParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetComplianceAPIV1Benchmarks",
		Method:             "GET",
		PathPattern:        "/compliance/api/v1/benchmarks",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetComplianceAPIV1BenchmarksReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetComplianceAPIV1BenchmarksOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetComplianceAPIV1Benchmarks: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetComplianceAPIV1BenchmarksBenchmarkID gets benchmark
*/
func (a *Client) GetComplianceAPIV1BenchmarksBenchmarkID(params *GetComplianceAPIV1BenchmarksBenchmarkIDParams, opts ...ClientOption) (*GetComplianceAPIV1BenchmarksBenchmarkIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetComplianceAPIV1BenchmarksBenchmarkIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetComplianceAPIV1BenchmarksBenchmarkID",
		Method:             "GET",
		PathPattern:        "/compliance/api/v1/benchmarks/{benchmark_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetComplianceAPIV1BenchmarksBenchmarkIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetComplianceAPIV1BenchmarksBenchmarkIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetComplianceAPIV1BenchmarksBenchmarkID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetComplianceAPIV1BenchmarksBenchmarkIDPolicies lists policies
*/
func (a *Client) GetComplianceAPIV1BenchmarksBenchmarkIDPolicies(params *GetComplianceAPIV1BenchmarksBenchmarkIDPoliciesParams, opts ...ClientOption) (*GetComplianceAPIV1BenchmarksBenchmarkIDPoliciesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetComplianceAPIV1BenchmarksBenchmarkIDPoliciesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetComplianceAPIV1BenchmarksBenchmarkIDPolicies",
		Method:             "GET",
		PathPattern:        "/compliance/api/v1/benchmarks/{benchmark_id}/policies",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetComplianceAPIV1BenchmarksBenchmarkIDPoliciesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetComplianceAPIV1BenchmarksBenchmarkIDPoliciesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetComplianceAPIV1BenchmarksBenchmarkIDPolicies: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetComplianceAPIV1BenchmarksPoliciesPolicyID gets policy
*/
func (a *Client) GetComplianceAPIV1BenchmarksPoliciesPolicyID(params *GetComplianceAPIV1BenchmarksPoliciesPolicyIDParams, opts ...ClientOption) (*GetComplianceAPIV1BenchmarksPoliciesPolicyIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetComplianceAPIV1BenchmarksPoliciesPolicyIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetComplianceAPIV1BenchmarksPoliciesPolicyID",
		Method:             "GET",
		PathPattern:        "/compliance/api/v1/benchmarks/policies/{policy_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetComplianceAPIV1BenchmarksPoliciesPolicyIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetComplianceAPIV1BenchmarksPoliciesPolicyIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetComplianceAPIV1BenchmarksPoliciesPolicyID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetComplianceAPIV1BenchmarksSummary gets benchmark summary
*/
func (a *Client) GetComplianceAPIV1BenchmarksSummary(params *GetComplianceAPIV1BenchmarksSummaryParams, opts ...ClientOption) (*GetComplianceAPIV1BenchmarksSummaryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetComplianceAPIV1BenchmarksSummaryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetComplianceAPIV1BenchmarksSummary",
		Method:             "GET",
		PathPattern:        "/compliance/api/v1/benchmarks/summary",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetComplianceAPIV1BenchmarksSummaryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetComplianceAPIV1BenchmarksSummaryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetComplianceAPIV1BenchmarksSummary: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetComplianceAPIV1FindingsBenchmarkIDFieldTopCount returns all findings with respect to filters
*/
func (a *Client) GetComplianceAPIV1FindingsBenchmarkIDFieldTopCount(params *GetComplianceAPIV1FindingsBenchmarkIDFieldTopCountParams, opts ...ClientOption) (*GetComplianceAPIV1FindingsBenchmarkIDFieldTopCountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetComplianceAPIV1FindingsBenchmarkIDFieldTopCountParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetComplianceAPIV1FindingsBenchmarkIDFieldTopCount",
		Method:             "GET",
		PathPattern:        "/compliance/api/v1/findings/{benchmarkId}/{field}/top/{count}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetComplianceAPIV1FindingsBenchmarkIDFieldTopCountReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetComplianceAPIV1FindingsBenchmarkIDFieldTopCountOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetComplianceAPIV1FindingsBenchmarkIDFieldTopCount: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetComplianceAPIV1FindingsMetrics returns findings metrics
*/
func (a *Client) GetComplianceAPIV1FindingsMetrics(params *GetComplianceAPIV1FindingsMetricsParams, opts ...ClientOption) (*GetComplianceAPIV1FindingsMetricsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetComplianceAPIV1FindingsMetricsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetComplianceAPIV1FindingsMetrics",
		Method:             "GET",
		PathPattern:        "/compliance/api/v1/findings/metrics",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetComplianceAPIV1FindingsMetricsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetComplianceAPIV1FindingsMetricsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetComplianceAPIV1FindingsMetrics: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetComplianceAPIV1QueriesQueryID gets query
*/
func (a *Client) GetComplianceAPIV1QueriesQueryID(params *GetComplianceAPIV1QueriesQueryIDParams, opts ...ClientOption) (*GetComplianceAPIV1QueriesQueryIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetComplianceAPIV1QueriesQueryIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetComplianceAPIV1QueriesQueryID",
		Method:             "GET",
		PathPattern:        "/compliance/api/v1/queries/{query_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetComplianceAPIV1QueriesQueryIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetComplianceAPIV1QueriesQueryIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetComplianceAPIV1QueriesQueryID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetScheduleAPIV1BenchmarkEvaluations lists all benchmark evaluations
*/
func (a *Client) GetScheduleAPIV1BenchmarkEvaluations(params *GetScheduleAPIV1BenchmarkEvaluationsParams, opts ...ClientOption) (*GetScheduleAPIV1BenchmarkEvaluationsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetScheduleAPIV1BenchmarkEvaluationsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetScheduleAPIV1BenchmarkEvaluations",
		Method:             "GET",
		PathPattern:        "/schedule/api/v1/benchmark/evaluations",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetScheduleAPIV1BenchmarkEvaluationsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetScheduleAPIV1BenchmarkEvaluationsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetScheduleAPIV1BenchmarkEvaluations: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostComplianceAPIV1AlarmsTop returns all findings with respect to filters
*/
func (a *Client) PostComplianceAPIV1AlarmsTop(params *PostComplianceAPIV1AlarmsTopParams, opts ...ClientOption) (*PostComplianceAPIV1AlarmsTopOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostComplianceAPIV1AlarmsTopParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostComplianceAPIV1AlarmsTop",
		Method:             "POST",
		PathPattern:        "/compliance/api/v1/alarms/top",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostComplianceAPIV1AlarmsTopReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostComplianceAPIV1AlarmsTopOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostComplianceAPIV1AlarmsTop: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostComplianceAPIV1Findings returns all findings with respect to filters
*/
func (a *Client) PostComplianceAPIV1Findings(params *PostComplianceAPIV1FindingsParams, opts ...ClientOption) (*PostComplianceAPIV1FindingsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostComplianceAPIV1FindingsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostComplianceAPIV1Findings",
		Method:             "POST",
		PathPattern:        "/compliance/api/v1/findings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostComplianceAPIV1FindingsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostComplianceAPIV1FindingsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostComplianceAPIV1Findings: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
