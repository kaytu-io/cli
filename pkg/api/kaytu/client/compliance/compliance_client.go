// Code generated by go-swagger; DO NOT EDIT.

package compliance

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new compliance API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for compliance API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	GetComplianceAPIV1BenchmarksBenchmarkIDPolicies(params *GetComplianceAPIV1BenchmarksBenchmarkIDPoliciesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetComplianceAPIV1BenchmarksBenchmarkIDPoliciesOK, error)

	GetComplianceAPIV1BenchmarksBenchmarkIDPoliciesPolicyID(params *GetComplianceAPIV1BenchmarksBenchmarkIDPoliciesPolicyIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetComplianceAPIV1BenchmarksBenchmarkIDPoliciesPolicyIDOK, error)

	GetComplianceAPIV1BenchmarksBenchmarkIDSummary(params *GetComplianceAPIV1BenchmarksBenchmarkIDSummaryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetComplianceAPIV1BenchmarksBenchmarkIDSummaryOK, error)

	GetComplianceAPIV1BenchmarksBenchmarkIDTrend(params *GetComplianceAPIV1BenchmarksBenchmarkIDTrendParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetComplianceAPIV1BenchmarksBenchmarkIDTrendOK, error)

	GetComplianceAPIV1BenchmarksSummary(params *GetComplianceAPIV1BenchmarksSummaryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetComplianceAPIV1BenchmarksSummaryOK, error)

	GetComplianceAPIV1FindingsBenchmarkIDAccounts(params *GetComplianceAPIV1FindingsBenchmarkIDAccountsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetComplianceAPIV1FindingsBenchmarkIDAccountsOK, error)

	GetComplianceAPIV1FindingsBenchmarkIDFieldCount(params *GetComplianceAPIV1FindingsBenchmarkIDFieldCountParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetComplianceAPIV1FindingsBenchmarkIDFieldCountOK, error)

	GetComplianceAPIV1FindingsBenchmarkIDFieldTopCount(params *GetComplianceAPIV1FindingsBenchmarkIDFieldTopCountParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetComplianceAPIV1FindingsBenchmarkIDFieldTopCountOK, error)

	GetComplianceAPIV1FindingsBenchmarkIDServices(params *GetComplianceAPIV1FindingsBenchmarkIDServicesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetComplianceAPIV1FindingsBenchmarkIDServicesOK, error)

	GetComplianceAPIV1MetadataTagCompliance(params *GetComplianceAPIV1MetadataTagComplianceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetComplianceAPIV1MetadataTagComplianceOK, error)

	GetComplianceAPIV1QueriesSync(params *GetComplianceAPIV1QueriesSyncParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetComplianceAPIV1QueriesSyncOK, error)

	PostComplianceAPIV1AiPolicyPolicyIDRemediation(params *PostComplianceAPIV1AiPolicyPolicyIDRemediationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostComplianceAPIV1AiPolicyPolicyIDRemediationOK, error)

	PostComplianceAPIV1Findings(params *PostComplianceAPIV1FindingsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostComplianceAPIV1FindingsOK, error)

	PostComplianceAPIV1FindingsFilters(params *PostComplianceAPIV1FindingsFiltersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostComplianceAPIV1FindingsFiltersOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
GetComplianceAPIV1BenchmarksBenchmarkIDPolicies gets benchmark policies
*/
func (a *Client) GetComplianceAPIV1BenchmarksBenchmarkIDPolicies(params *GetComplianceAPIV1BenchmarksBenchmarkIDPoliciesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetComplianceAPIV1BenchmarksBenchmarkIDPoliciesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetComplianceAPIV1BenchmarksBenchmarkIDPoliciesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetComplianceAPIV1BenchmarksBenchmarkIDPolicies",
		Method:             "GET",
		PathPattern:        "/compliance/api/v1/benchmarks/{benchmark_id}/policies",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetComplianceAPIV1BenchmarksBenchmarkIDPoliciesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetComplianceAPIV1BenchmarksBenchmarkIDPoliciesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetComplianceAPIV1BenchmarksBenchmarkIDPolicies: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetComplianceAPIV1BenchmarksBenchmarkIDPoliciesPolicyID gets benchmark policies
*/
func (a *Client) GetComplianceAPIV1BenchmarksBenchmarkIDPoliciesPolicyID(params *GetComplianceAPIV1BenchmarksBenchmarkIDPoliciesPolicyIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetComplianceAPIV1BenchmarksBenchmarkIDPoliciesPolicyIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetComplianceAPIV1BenchmarksBenchmarkIDPoliciesPolicyIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetComplianceAPIV1BenchmarksBenchmarkIDPoliciesPolicyID",
		Method:             "GET",
		PathPattern:        "/compliance/api/v1/benchmarks/{benchmark_id}/policies/{policyId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetComplianceAPIV1BenchmarksBenchmarkIDPoliciesPolicyIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetComplianceAPIV1BenchmarksBenchmarkIDPoliciesPolicyIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetComplianceAPIV1BenchmarksBenchmarkIDPoliciesPolicyID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetComplianceAPIV1BenchmarksBenchmarkIDSummary gets benchmark summary

Retrieving a summary of a benchmark and its associated checks and results.
*/
func (a *Client) GetComplianceAPIV1BenchmarksBenchmarkIDSummary(params *GetComplianceAPIV1BenchmarksBenchmarkIDSummaryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetComplianceAPIV1BenchmarksBenchmarkIDSummaryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetComplianceAPIV1BenchmarksBenchmarkIDSummaryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetComplianceAPIV1BenchmarksBenchmarkIDSummary",
		Method:             "GET",
		PathPattern:        "/compliance/api/v1/benchmarks/{benchmark_id}/summary",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetComplianceAPIV1BenchmarksBenchmarkIDSummaryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetComplianceAPIV1BenchmarksBenchmarkIDSummaryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetComplianceAPIV1BenchmarksBenchmarkIDSummary: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetComplianceAPIV1BenchmarksBenchmarkIDTrend gets benchmark trend

Retrieving a trend of a benchmark result and checks.
*/
func (a *Client) GetComplianceAPIV1BenchmarksBenchmarkIDTrend(params *GetComplianceAPIV1BenchmarksBenchmarkIDTrendParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetComplianceAPIV1BenchmarksBenchmarkIDTrendOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetComplianceAPIV1BenchmarksBenchmarkIDTrendParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetComplianceAPIV1BenchmarksBenchmarkIDTrend",
		Method:             "GET",
		PathPattern:        "/compliance/api/v1/benchmarks/{benchmark_id}/trend",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetComplianceAPIV1BenchmarksBenchmarkIDTrendReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetComplianceAPIV1BenchmarksBenchmarkIDTrendOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetComplianceAPIV1BenchmarksBenchmarkIDTrend: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetComplianceAPIV1BenchmarksSummary lists benchmarks summaries

Retrieving a summary of all benchmarks and their associated checks and results within a specified time interval.
*/
func (a *Client) GetComplianceAPIV1BenchmarksSummary(params *GetComplianceAPIV1BenchmarksSummaryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetComplianceAPIV1BenchmarksSummaryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetComplianceAPIV1BenchmarksSummaryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetComplianceAPIV1BenchmarksSummary",
		Method:             "GET",
		PathPattern:        "/compliance/api/v1/benchmarks/summary",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetComplianceAPIV1BenchmarksSummaryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetComplianceAPIV1BenchmarksSummaryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetComplianceAPIV1BenchmarksSummary: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetComplianceAPIV1FindingsBenchmarkIDAccounts gets accounts findings summaries

Retrieving list of accounts with their security score and severities findings count
*/
func (a *Client) GetComplianceAPIV1FindingsBenchmarkIDAccounts(params *GetComplianceAPIV1FindingsBenchmarkIDAccountsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetComplianceAPIV1FindingsBenchmarkIDAccountsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetComplianceAPIV1FindingsBenchmarkIDAccountsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetComplianceAPIV1FindingsBenchmarkIDAccounts",
		Method:             "GET",
		PathPattern:        "/compliance/api/v1/findings/{benchmarkId}/accounts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetComplianceAPIV1FindingsBenchmarkIDAccountsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetComplianceAPIV1FindingsBenchmarkIDAccountsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetComplianceAPIV1FindingsBenchmarkIDAccounts: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetComplianceAPIV1FindingsBenchmarkIDFieldCount gets findings field count by policies

Retrieving the number of findings field count by policies.
*/
func (a *Client) GetComplianceAPIV1FindingsBenchmarkIDFieldCount(params *GetComplianceAPIV1FindingsBenchmarkIDFieldCountParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetComplianceAPIV1FindingsBenchmarkIDFieldCountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetComplianceAPIV1FindingsBenchmarkIDFieldCountParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetComplianceAPIV1FindingsBenchmarkIDFieldCount",
		Method:             "GET",
		PathPattern:        "/compliance/api/v1/findings/{benchmarkId}/{field}/count",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetComplianceAPIV1FindingsBenchmarkIDFieldCountReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetComplianceAPIV1FindingsBenchmarkIDFieldCountOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetComplianceAPIV1FindingsBenchmarkIDFieldCount: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetComplianceAPIV1FindingsBenchmarkIDFieldTopCount gets top field by finding count

Retrieving the top field by finding count.
*/
func (a *Client) GetComplianceAPIV1FindingsBenchmarkIDFieldTopCount(params *GetComplianceAPIV1FindingsBenchmarkIDFieldTopCountParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetComplianceAPIV1FindingsBenchmarkIDFieldTopCountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetComplianceAPIV1FindingsBenchmarkIDFieldTopCountParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetComplianceAPIV1FindingsBenchmarkIDFieldTopCount",
		Method:             "GET",
		PathPattern:        "/compliance/api/v1/findings/{benchmarkId}/{field}/top/{count}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetComplianceAPIV1FindingsBenchmarkIDFieldTopCountReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetComplianceAPIV1FindingsBenchmarkIDFieldTopCountOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetComplianceAPIV1FindingsBenchmarkIDFieldTopCount: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetComplianceAPIV1FindingsBenchmarkIDServices gets services findings summary

Retrieving list of services with their security score and severities findings count
*/
func (a *Client) GetComplianceAPIV1FindingsBenchmarkIDServices(params *GetComplianceAPIV1FindingsBenchmarkIDServicesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetComplianceAPIV1FindingsBenchmarkIDServicesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetComplianceAPIV1FindingsBenchmarkIDServicesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetComplianceAPIV1FindingsBenchmarkIDServices",
		Method:             "GET",
		PathPattern:        "/compliance/api/v1/findings/{benchmarkId}/services",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetComplianceAPIV1FindingsBenchmarkIDServicesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetComplianceAPIV1FindingsBenchmarkIDServicesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetComplianceAPIV1FindingsBenchmarkIDServices: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetComplianceAPIV1MetadataTagCompliance lists compliance tag keys

Retrieving a list of compliance tag keys with their possible values.
*/
func (a *Client) GetComplianceAPIV1MetadataTagCompliance(params *GetComplianceAPIV1MetadataTagComplianceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetComplianceAPIV1MetadataTagComplianceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetComplianceAPIV1MetadataTagComplianceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetComplianceAPIV1MetadataTagCompliance",
		Method:             "GET",
		PathPattern:        "/compliance/api/v1/metadata/tag/compliance",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetComplianceAPIV1MetadataTagComplianceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetComplianceAPIV1MetadataTagComplianceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetComplianceAPIV1MetadataTagCompliance: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetComplianceAPIV1QueriesSync syncs queries

Syncs queries with the git backend.
*/
func (a *Client) GetComplianceAPIV1QueriesSync(params *GetComplianceAPIV1QueriesSyncParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetComplianceAPIV1QueriesSyncOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetComplianceAPIV1QueriesSyncParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetComplianceAPIV1QueriesSync",
		Method:             "GET",
		PathPattern:        "/compliance/api/v1/queries/sync",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetComplianceAPIV1QueriesSyncReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetComplianceAPIV1QueriesSyncOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetComplianceAPIV1QueriesSync: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostComplianceAPIV1AiPolicyPolicyIDRemediation gets policy remediation using a i
*/
func (a *Client) PostComplianceAPIV1AiPolicyPolicyIDRemediation(params *PostComplianceAPIV1AiPolicyPolicyIDRemediationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostComplianceAPIV1AiPolicyPolicyIDRemediationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostComplianceAPIV1AiPolicyPolicyIDRemediationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostComplianceAPIV1AiPolicyPolicyIDRemediation",
		Method:             "POST",
		PathPattern:        "/compliance/api/v1/ai/policy/{policyID}/remediation",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostComplianceAPIV1AiPolicyPolicyIDRemediationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostComplianceAPIV1AiPolicyPolicyIDRemediationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostComplianceAPIV1AiPolicyPolicyIDRemediation: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostComplianceAPIV1Findings gets findings

Retrieving all compliance run findings with respect to filters.
*/
func (a *Client) PostComplianceAPIV1Findings(params *PostComplianceAPIV1FindingsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostComplianceAPIV1FindingsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostComplianceAPIV1FindingsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostComplianceAPIV1Findings",
		Method:             "POST",
		PathPattern:        "/compliance/api/v1/findings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostComplianceAPIV1FindingsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostComplianceAPIV1FindingsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostComplianceAPIV1Findings: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostComplianceAPIV1FindingsFilters gets possible values for finding filters

Retrieving possible values for finding filters.
*/
func (a *Client) PostComplianceAPIV1FindingsFilters(params *PostComplianceAPIV1FindingsFiltersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostComplianceAPIV1FindingsFiltersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostComplianceAPIV1FindingsFiltersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostComplianceAPIV1FindingsFilters",
		Method:             "POST",
		PathPattern:        "/compliance/api/v1/findings/filters",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostComplianceAPIV1FindingsFiltersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostComplianceAPIV1FindingsFiltersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostComplianceAPIV1FindingsFilters: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
