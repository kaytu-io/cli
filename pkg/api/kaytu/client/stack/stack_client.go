// Code generated by go-swagger; DO NOT EDIT.

package stack

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new stack API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for stack API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteScheduleAPIV1StacksStackID(params *DeleteScheduleAPIV1StacksStackIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteScheduleAPIV1StacksStackIDOK, error)

	GetScheduleAPIV1Stacks(params *GetScheduleAPIV1StacksParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetScheduleAPIV1StacksOK, error)

	GetScheduleAPIV1StacksResource(params *GetScheduleAPIV1StacksResourceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetScheduleAPIV1StacksResourceOK, error)

	GetScheduleAPIV1StacksStackID(params *GetScheduleAPIV1StacksStackIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetScheduleAPIV1StacksStackIDOK, error)

	GetScheduleAPIV1StacksStackIDInsight(params *GetScheduleAPIV1StacksStackIDInsightParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetScheduleAPIV1StacksStackIDInsightOK, error)

	GetScheduleAPIV1StacksStackIDInsights(params *GetScheduleAPIV1StacksStackIDInsightsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetScheduleAPIV1StacksStackIDInsightsOK, error)

	PostScheduleAPIV1StacksCreate(params *PostScheduleAPIV1StacksCreateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostScheduleAPIV1StacksCreateOK, error)

	PostScheduleAPIV1StacksStackIDFindings(params *PostScheduleAPIV1StacksStackIDFindingsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostScheduleAPIV1StacksStackIDFindingsOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
DeleteScheduleAPIV1StacksStackID deletes a stack

Delete a stack by ID
*/
func (a *Client) DeleteScheduleAPIV1StacksStackID(params *DeleteScheduleAPIV1StacksStackIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteScheduleAPIV1StacksStackIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteScheduleAPIV1StacksStackIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteScheduleAPIV1StacksStackID",
		Method:             "DELETE",
		PathPattern:        "/schedule/api/v1/stacks/{stackId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteScheduleAPIV1StacksStackIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteScheduleAPIV1StacksStackIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteScheduleAPIV1StacksStackID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetScheduleAPIV1Stacks lists stacks

Get list of stacks
*/
func (a *Client) GetScheduleAPIV1Stacks(params *GetScheduleAPIV1StacksParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetScheduleAPIV1StacksOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetScheduleAPIV1StacksParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetScheduleAPIV1Stacks",
		Method:             "GET",
		PathPattern:        "/schedule/api/v1/stacks",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetScheduleAPIV1StacksReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetScheduleAPIV1StacksOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetScheduleAPIV1Stacks: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetScheduleAPIV1StacksResource lists resource stacks

Get list of all stacks containing a resource
*/
func (a *Client) GetScheduleAPIV1StacksResource(params *GetScheduleAPIV1StacksResourceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetScheduleAPIV1StacksResourceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetScheduleAPIV1StacksResourceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetScheduleAPIV1StacksResource",
		Method:             "GET",
		PathPattern:        "/schedule/api/v1/stacks/resource",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetScheduleAPIV1StacksResourceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetScheduleAPIV1StacksResourceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetScheduleAPIV1StacksResource: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetScheduleAPIV1StacksStackID gets a stack

Get a stack details by ID
*/
func (a *Client) GetScheduleAPIV1StacksStackID(params *GetScheduleAPIV1StacksStackIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetScheduleAPIV1StacksStackIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetScheduleAPIV1StacksStackIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetScheduleAPIV1StacksStackID",
		Method:             "GET",
		PathPattern:        "/schedule/api/v1/stacks/{stackId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetScheduleAPIV1StacksStackIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetScheduleAPIV1StacksStackIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetScheduleAPIV1StacksStackID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetScheduleAPIV1StacksStackIDInsight gets stack insight

Get Insight results for a stack in the given time period
*/
func (a *Client) GetScheduleAPIV1StacksStackIDInsight(params *GetScheduleAPIV1StacksStackIDInsightParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetScheduleAPIV1StacksStackIDInsightOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetScheduleAPIV1StacksStackIDInsightParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetScheduleAPIV1StacksStackIDInsight",
		Method:             "GET",
		PathPattern:        "/schedule/api/v1/stacks/{stackId}/insight",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetScheduleAPIV1StacksStackIDInsightReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetScheduleAPIV1StacksStackIDInsightOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetScheduleAPIV1StacksStackIDInsight: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetScheduleAPIV1StacksStackIDInsights lists stack insights

Get all Insights results with the given filters
*/
func (a *Client) GetScheduleAPIV1StacksStackIDInsights(params *GetScheduleAPIV1StacksStackIDInsightsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetScheduleAPIV1StacksStackIDInsightsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetScheduleAPIV1StacksStackIDInsightsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetScheduleAPIV1StacksStackIDInsights",
		Method:             "GET",
		PathPattern:        "/schedule/api/v1/stacks/{stackId}/insights",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetScheduleAPIV1StacksStackIDInsightsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetScheduleAPIV1StacksStackIDInsightsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetScheduleAPIV1StacksStackIDInsights: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	PostScheduleAPIV1StacksCreate creates stack

	Create a stack by giving terraform statefile and additional resources

Config structure for azure: {tenantId: string, objectId: string, secretId: string, clientId: string, clientSecret:string}
Config structure for aws: {accessKey: string, secretKey: string}
*/
func (a *Client) PostScheduleAPIV1StacksCreate(params *PostScheduleAPIV1StacksCreateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostScheduleAPIV1StacksCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostScheduleAPIV1StacksCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostScheduleAPIV1StacksCreate",
		Method:             "POST",
		PathPattern:        "/schedule/api/v1/stacks/create",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostScheduleAPIV1StacksCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostScheduleAPIV1StacksCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostScheduleAPIV1StacksCreate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostScheduleAPIV1StacksStackIDFindings gets stack findings

Get all findings for a stack
*/
func (a *Client) PostScheduleAPIV1StacksStackIDFindings(params *PostScheduleAPIV1StacksStackIDFindingsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostScheduleAPIV1StacksStackIDFindingsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostScheduleAPIV1StacksStackIDFindingsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostScheduleAPIV1StacksStackIDFindings",
		Method:             "POST",
		PathPattern:        "/schedule/api/v1/stacks/{stackId}/findings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostScheduleAPIV1StacksStackIDFindingsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostScheduleAPIV1StacksStackIDFindingsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostScheduleAPIV1StacksStackIDFindings: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
