// Code generated by go-swagger; DO NOT EDIT.

package stack

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetScheduleAPIV1StacksStackIDInsightsParams creates a new GetScheduleAPIV1StacksStackIDInsightsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetScheduleAPIV1StacksStackIDInsightsParams() *GetScheduleAPIV1StacksStackIDInsightsParams {
	return &GetScheduleAPIV1StacksStackIDInsightsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetScheduleAPIV1StacksStackIDInsightsParamsWithTimeout creates a new GetScheduleAPIV1StacksStackIDInsightsParams object
// with the ability to set a timeout on a request.
func NewGetScheduleAPIV1StacksStackIDInsightsParamsWithTimeout(timeout time.Duration) *GetScheduleAPIV1StacksStackIDInsightsParams {
	return &GetScheduleAPIV1StacksStackIDInsightsParams{
		timeout: timeout,
	}
}

// NewGetScheduleAPIV1StacksStackIDInsightsParamsWithContext creates a new GetScheduleAPIV1StacksStackIDInsightsParams object
// with the ability to set a context for a request.
func NewGetScheduleAPIV1StacksStackIDInsightsParamsWithContext(ctx context.Context) *GetScheduleAPIV1StacksStackIDInsightsParams {
	return &GetScheduleAPIV1StacksStackIDInsightsParams{
		Context: ctx,
	}
}

// NewGetScheduleAPIV1StacksStackIDInsightsParamsWithHTTPClient creates a new GetScheduleAPIV1StacksStackIDInsightsParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetScheduleAPIV1StacksStackIDInsightsParamsWithHTTPClient(client *http.Client) *GetScheduleAPIV1StacksStackIDInsightsParams {
	return &GetScheduleAPIV1StacksStackIDInsightsParams{
		HTTPClient: client,
	}
}

/*
GetScheduleAPIV1StacksStackIDInsightsParams contains all the parameters to send to the API endpoint

	for the get schedule API v1 stacks stack ID insights operation.

	Typically these are written to a http.Request.
*/
type GetScheduleAPIV1StacksStackIDInsightsParams struct {

	/* EndTime.

	   unix seconds for the end time of the trend
	*/
	EndTime *int64

	/* InsightIds.

	   Insight IDs to filter with. If empty, then all insights are returned
	*/
	InsightIds []int64

	/* StackID.

	   Stack ID
	*/
	StackID string

	/* StartTime.

	   unix seconds for the start time of the trend
	*/
	StartTime *int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get schedule API v1 stacks stack ID insights params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetScheduleAPIV1StacksStackIDInsightsParams) WithDefaults() *GetScheduleAPIV1StacksStackIDInsightsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get schedule API v1 stacks stack ID insights params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetScheduleAPIV1StacksStackIDInsightsParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get schedule API v1 stacks stack ID insights params
func (o *GetScheduleAPIV1StacksStackIDInsightsParams) WithTimeout(timeout time.Duration) *GetScheduleAPIV1StacksStackIDInsightsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get schedule API v1 stacks stack ID insights params
func (o *GetScheduleAPIV1StacksStackIDInsightsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get schedule API v1 stacks stack ID insights params
func (o *GetScheduleAPIV1StacksStackIDInsightsParams) WithContext(ctx context.Context) *GetScheduleAPIV1StacksStackIDInsightsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get schedule API v1 stacks stack ID insights params
func (o *GetScheduleAPIV1StacksStackIDInsightsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get schedule API v1 stacks stack ID insights params
func (o *GetScheduleAPIV1StacksStackIDInsightsParams) WithHTTPClient(client *http.Client) *GetScheduleAPIV1StacksStackIDInsightsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get schedule API v1 stacks stack ID insights params
func (o *GetScheduleAPIV1StacksStackIDInsightsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithEndTime adds the endTime to the get schedule API v1 stacks stack ID insights params
func (o *GetScheduleAPIV1StacksStackIDInsightsParams) WithEndTime(endTime *int64) *GetScheduleAPIV1StacksStackIDInsightsParams {
	o.SetEndTime(endTime)
	return o
}

// SetEndTime adds the endTime to the get schedule API v1 stacks stack ID insights params
func (o *GetScheduleAPIV1StacksStackIDInsightsParams) SetEndTime(endTime *int64) {
	o.EndTime = endTime
}

// WithInsightIds adds the insightIds to the get schedule API v1 stacks stack ID insights params
func (o *GetScheduleAPIV1StacksStackIDInsightsParams) WithInsightIds(insightIds []int64) *GetScheduleAPIV1StacksStackIDInsightsParams {
	o.SetInsightIds(insightIds)
	return o
}

// SetInsightIds adds the insightIds to the get schedule API v1 stacks stack ID insights params
func (o *GetScheduleAPIV1StacksStackIDInsightsParams) SetInsightIds(insightIds []int64) {
	o.InsightIds = insightIds
}

// WithStackID adds the stackID to the get schedule API v1 stacks stack ID insights params
func (o *GetScheduleAPIV1StacksStackIDInsightsParams) WithStackID(stackID string) *GetScheduleAPIV1StacksStackIDInsightsParams {
	o.SetStackID(stackID)
	return o
}

// SetStackID adds the stackId to the get schedule API v1 stacks stack ID insights params
func (o *GetScheduleAPIV1StacksStackIDInsightsParams) SetStackID(stackID string) {
	o.StackID = stackID
}

// WithStartTime adds the startTime to the get schedule API v1 stacks stack ID insights params
func (o *GetScheduleAPIV1StacksStackIDInsightsParams) WithStartTime(startTime *int64) *GetScheduleAPIV1StacksStackIDInsightsParams {
	o.SetStartTime(startTime)
	return o
}

// SetStartTime adds the startTime to the get schedule API v1 stacks stack ID insights params
func (o *GetScheduleAPIV1StacksStackIDInsightsParams) SetStartTime(startTime *int64) {
	o.StartTime = startTime
}

// WriteToRequest writes these params to a swagger request
func (o *GetScheduleAPIV1StacksStackIDInsightsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.EndTime != nil {

		// query param endTime
		var qrEndTime int64

		if o.EndTime != nil {
			qrEndTime = *o.EndTime
		}
		qEndTime := swag.FormatInt64(qrEndTime)
		if qEndTime != "" {

			if err := r.SetQueryParam("endTime", qEndTime); err != nil {
				return err
			}
		}
	}

	if o.InsightIds != nil {

		// binding items for insightIds
		joinedInsightIds := o.bindParamInsightIds(reg)

		// query array param insightIds
		if err := r.SetQueryParam("insightIds", joinedInsightIds...); err != nil {
			return err
		}
	}

	// path param stackId
	if err := r.SetPathParam("stackId", o.StackID); err != nil {
		return err
	}

	if o.StartTime != nil {

		// query param startTime
		var qrStartTime int64

		if o.StartTime != nil {
			qrStartTime = *o.StartTime
		}
		qStartTime := swag.FormatInt64(qrStartTime)
		if qStartTime != "" {

			if err := r.SetQueryParam("startTime", qStartTime); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamGetScheduleAPIV1StacksStackIDInsights binds the parameter insightIds
func (o *GetScheduleAPIV1StacksStackIDInsightsParams) bindParamInsightIds(formats strfmt.Registry) []string {
	insightIdsIR := o.InsightIds

	var insightIdsIC []string
	for _, insightIdsIIR := range insightIdsIR { // explode []int64

		insightIdsIIV := swag.FormatInt64(insightIdsIIR) // int64 as string
		insightIdsIC = append(insightIdsIC, insightIdsIIV)
	}

	// items.CollectionFormat: "csv"
	insightIdsIS := swag.JoinByFormat(insightIdsIC, "csv")

	return insightIdsIS
}
