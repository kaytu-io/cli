// Code generated by go-swagger; DO NOT EDIT.

package connections

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetOnboardAPIV1ConnectionsSummaryParams creates a new GetOnboardAPIV1ConnectionsSummaryParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetOnboardAPIV1ConnectionsSummaryParams() *GetOnboardAPIV1ConnectionsSummaryParams {
	return &GetOnboardAPIV1ConnectionsSummaryParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetOnboardAPIV1ConnectionsSummaryParamsWithTimeout creates a new GetOnboardAPIV1ConnectionsSummaryParams object
// with the ability to set a timeout on a request.
func NewGetOnboardAPIV1ConnectionsSummaryParamsWithTimeout(timeout time.Duration) *GetOnboardAPIV1ConnectionsSummaryParams {
	return &GetOnboardAPIV1ConnectionsSummaryParams{
		timeout: timeout,
	}
}

// NewGetOnboardAPIV1ConnectionsSummaryParamsWithContext creates a new GetOnboardAPIV1ConnectionsSummaryParams object
// with the ability to set a context for a request.
func NewGetOnboardAPIV1ConnectionsSummaryParamsWithContext(ctx context.Context) *GetOnboardAPIV1ConnectionsSummaryParams {
	return &GetOnboardAPIV1ConnectionsSummaryParams{
		Context: ctx,
	}
}

// NewGetOnboardAPIV1ConnectionsSummaryParamsWithHTTPClient creates a new GetOnboardAPIV1ConnectionsSummaryParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetOnboardAPIV1ConnectionsSummaryParamsWithHTTPClient(client *http.Client) *GetOnboardAPIV1ConnectionsSummaryParams {
	return &GetOnboardAPIV1ConnectionsSummaryParams{
		HTTPClient: client,
	}
}

/*
GetOnboardAPIV1ConnectionsSummaryParams contains all the parameters to send to the API endpoint

	for the get onboard API v1 connections summary operation.

	Typically these are written to a http.Request.
*/
type GetOnboardAPIV1ConnectionsSummaryParams struct {

	/* ConnectionID.

	   Connection IDs
	*/
	ConnectionID *string

	/* Connector.

	   Connector
	*/
	Connector string

	/* EndTime.

	   end time in unix seconds
	*/
	EndTime *int64

	/* HealthState.

	   Source Healthstate
	*/
	HealthState *string

	/* LifecycleState.

	   lifecycle state filter
	*/
	LifecycleState *string

	/* PageNumber.

	   page number - default is 1
	*/
	PageNumber *int64

	/* PageSize.

	   page size - default is 20
	*/
	PageSize *int64

	/* SortBy.

	   column to sort by - default is cost
	*/
	SortBy *string

	/* StartTime.

	   start time in unix seconds
	*/
	StartTime *int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get onboard API v1 connections summary params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetOnboardAPIV1ConnectionsSummaryParams) WithDefaults() *GetOnboardAPIV1ConnectionsSummaryParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get onboard API v1 connections summary params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetOnboardAPIV1ConnectionsSummaryParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get onboard API v1 connections summary params
func (o *GetOnboardAPIV1ConnectionsSummaryParams) WithTimeout(timeout time.Duration) *GetOnboardAPIV1ConnectionsSummaryParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get onboard API v1 connections summary params
func (o *GetOnboardAPIV1ConnectionsSummaryParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get onboard API v1 connections summary params
func (o *GetOnboardAPIV1ConnectionsSummaryParams) WithContext(ctx context.Context) *GetOnboardAPIV1ConnectionsSummaryParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get onboard API v1 connections summary params
func (o *GetOnboardAPIV1ConnectionsSummaryParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get onboard API v1 connections summary params
func (o *GetOnboardAPIV1ConnectionsSummaryParams) WithHTTPClient(client *http.Client) *GetOnboardAPIV1ConnectionsSummaryParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get onboard API v1 connections summary params
func (o *GetOnboardAPIV1ConnectionsSummaryParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithConnectionID adds the connectionID to the get onboard API v1 connections summary params
func (o *GetOnboardAPIV1ConnectionsSummaryParams) WithConnectionID(connectionID *string) *GetOnboardAPIV1ConnectionsSummaryParams {
	o.SetConnectionID(connectionID)
	return o
}

// SetConnectionID adds the connectionId to the get onboard API v1 connections summary params
func (o *GetOnboardAPIV1ConnectionsSummaryParams) SetConnectionID(connectionID *string) {
	o.ConnectionID = connectionID
}

// WithConnector adds the connector to the get onboard API v1 connections summary params
func (o *GetOnboardAPIV1ConnectionsSummaryParams) WithConnector(connector string) *GetOnboardAPIV1ConnectionsSummaryParams {
	o.SetConnector(connector)
	return o
}

// SetConnector adds the connector to the get onboard API v1 connections summary params
func (o *GetOnboardAPIV1ConnectionsSummaryParams) SetConnector(connector string) {
	o.Connector = connector
}

// WithEndTime adds the endTime to the get onboard API v1 connections summary params
func (o *GetOnboardAPIV1ConnectionsSummaryParams) WithEndTime(endTime *int64) *GetOnboardAPIV1ConnectionsSummaryParams {
	o.SetEndTime(endTime)
	return o
}

// SetEndTime adds the endTime to the get onboard API v1 connections summary params
func (o *GetOnboardAPIV1ConnectionsSummaryParams) SetEndTime(endTime *int64) {
	o.EndTime = endTime
}

// WithHealthState adds the healthState to the get onboard API v1 connections summary params
func (o *GetOnboardAPIV1ConnectionsSummaryParams) WithHealthState(healthState *string) *GetOnboardAPIV1ConnectionsSummaryParams {
	o.SetHealthState(healthState)
	return o
}

// SetHealthState adds the healthState to the get onboard API v1 connections summary params
func (o *GetOnboardAPIV1ConnectionsSummaryParams) SetHealthState(healthState *string) {
	o.HealthState = healthState
}

// WithLifecycleState adds the lifecycleState to the get onboard API v1 connections summary params
func (o *GetOnboardAPIV1ConnectionsSummaryParams) WithLifecycleState(lifecycleState *string) *GetOnboardAPIV1ConnectionsSummaryParams {
	o.SetLifecycleState(lifecycleState)
	return o
}

// SetLifecycleState adds the lifecycleState to the get onboard API v1 connections summary params
func (o *GetOnboardAPIV1ConnectionsSummaryParams) SetLifecycleState(lifecycleState *string) {
	o.LifecycleState = lifecycleState
}

// WithPageNumber adds the pageNumber to the get onboard API v1 connections summary params
func (o *GetOnboardAPIV1ConnectionsSummaryParams) WithPageNumber(pageNumber *int64) *GetOnboardAPIV1ConnectionsSummaryParams {
	o.SetPageNumber(pageNumber)
	return o
}

// SetPageNumber adds the pageNumber to the get onboard API v1 connections summary params
func (o *GetOnboardAPIV1ConnectionsSummaryParams) SetPageNumber(pageNumber *int64) {
	o.PageNumber = pageNumber
}

// WithPageSize adds the pageSize to the get onboard API v1 connections summary params
func (o *GetOnboardAPIV1ConnectionsSummaryParams) WithPageSize(pageSize *int64) *GetOnboardAPIV1ConnectionsSummaryParams {
	o.SetPageSize(pageSize)
	return o
}

// SetPageSize adds the pageSize to the get onboard API v1 connections summary params
func (o *GetOnboardAPIV1ConnectionsSummaryParams) SetPageSize(pageSize *int64) {
	o.PageSize = pageSize
}

// WithSortBy adds the sortBy to the get onboard API v1 connections summary params
func (o *GetOnboardAPIV1ConnectionsSummaryParams) WithSortBy(sortBy *string) *GetOnboardAPIV1ConnectionsSummaryParams {
	o.SetSortBy(sortBy)
	return o
}

// SetSortBy adds the sortBy to the get onboard API v1 connections summary params
func (o *GetOnboardAPIV1ConnectionsSummaryParams) SetSortBy(sortBy *string) {
	o.SortBy = sortBy
}

// WithStartTime adds the startTime to the get onboard API v1 connections summary params
func (o *GetOnboardAPIV1ConnectionsSummaryParams) WithStartTime(startTime *int64) *GetOnboardAPIV1ConnectionsSummaryParams {
	o.SetStartTime(startTime)
	return o
}

// SetStartTime adds the startTime to the get onboard API v1 connections summary params
func (o *GetOnboardAPIV1ConnectionsSummaryParams) SetStartTime(startTime *int64) {
	o.StartTime = startTime
}

// WriteToRequest writes these params to a swagger request
func (o *GetOnboardAPIV1ConnectionsSummaryParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.ConnectionID != nil {

		// query param connectionId
		var qrConnectionID string

		if o.ConnectionID != nil {
			qrConnectionID = *o.ConnectionID
		}
		qConnectionID := qrConnectionID
		if qConnectionID != "" {

			if err := r.SetQueryParam("connectionId", qConnectionID); err != nil {
				return err
			}
		}
	}

	// query param connector
	qrConnector := o.Connector
	qConnector := qrConnector
	if qConnector != "" {

		if err := r.SetQueryParam("connector", qConnector); err != nil {
			return err
		}
	}

	if o.EndTime != nil {

		// query param endTime
		var qrEndTime int64

		if o.EndTime != nil {
			qrEndTime = *o.EndTime
		}
		qEndTime := swag.FormatInt64(qrEndTime)
		if qEndTime != "" {

			if err := r.SetQueryParam("endTime", qEndTime); err != nil {
				return err
			}
		}
	}

	if o.HealthState != nil {

		// query param healthState
		var qrHealthState string

		if o.HealthState != nil {
			qrHealthState = *o.HealthState
		}
		qHealthState := qrHealthState
		if qHealthState != "" {

			if err := r.SetQueryParam("healthState", qHealthState); err != nil {
				return err
			}
		}
	}

	if o.LifecycleState != nil {

		// query param lifecycleState
		var qrLifecycleState string

		if o.LifecycleState != nil {
			qrLifecycleState = *o.LifecycleState
		}
		qLifecycleState := qrLifecycleState
		if qLifecycleState != "" {

			if err := r.SetQueryParam("lifecycleState", qLifecycleState); err != nil {
				return err
			}
		}
	}

	if o.PageNumber != nil {

		// query param pageNumber
		var qrPageNumber int64

		if o.PageNumber != nil {
			qrPageNumber = *o.PageNumber
		}
		qPageNumber := swag.FormatInt64(qrPageNumber)
		if qPageNumber != "" {

			if err := r.SetQueryParam("pageNumber", qPageNumber); err != nil {
				return err
			}
		}
	}

	if o.PageSize != nil {

		// query param pageSize
		var qrPageSize int64

		if o.PageSize != nil {
			qrPageSize = *o.PageSize
		}
		qPageSize := swag.FormatInt64(qrPageSize)
		if qPageSize != "" {

			if err := r.SetQueryParam("pageSize", qPageSize); err != nil {
				return err
			}
		}
	}

	if o.SortBy != nil {

		// query param sortBy
		var qrSortBy string

		if o.SortBy != nil {
			qrSortBy = *o.SortBy
		}
		qSortBy := qrSortBy
		if qSortBy != "" {

			if err := r.SetQueryParam("sortBy", qSortBy); err != nil {
				return err
			}
		}
	}

	if o.StartTime != nil {

		// query param startTime
		var qrStartTime int64

		if o.StartTime != nil {
			qrStartTime = *o.StartTime
		}
		qStartTime := swag.FormatInt64(qrStartTime)
		if qStartTime != "" {

			if err := r.SetQueryParam("startTime", qStartTime); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
