// Code generated by go-swagger; DO NOT EDIT.

package alerting

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new alerting API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for alerting API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteAlertingAPIV1ActionDeleteActionID(params *DeleteAlertingAPIV1ActionDeleteActionIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteAlertingAPIV1ActionDeleteActionIDOK, error)

	DeleteAlertingAPIV1RuleDeleteRuleID(params *DeleteAlertingAPIV1RuleDeleteRuleIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteAlertingAPIV1RuleDeleteRuleIDOK, error)

	GetAlertingAPIV1ActionList(params *GetAlertingAPIV1ActionListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAlertingAPIV1ActionListOK, error)

	GetAlertingAPIV1RuleList(params *GetAlertingAPIV1RuleListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAlertingAPIV1RuleListOK, error)

	GetAlertingAPIV1RuleRuleIDTrigger(params *GetAlertingAPIV1RuleRuleIDTriggerParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAlertingAPIV1RuleRuleIDTriggerOK, error)

	GetAlertingAPIV1TriggerList(params *GetAlertingAPIV1TriggerListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAlertingAPIV1TriggerListOK, error)

	PostAlertingAPIV1ActionCreate(params *PostAlertingAPIV1ActionCreateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostAlertingAPIV1ActionCreateOK, error)

	PostAlertingAPIV1ActionJira(params *PostAlertingAPIV1ActionJiraParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostAlertingAPIV1ActionJiraOK, error)

	PostAlertingAPIV1ActionSlack(params *PostAlertingAPIV1ActionSlackParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostAlertingAPIV1ActionSlackOK, error)

	PostAlertingAPIV1RuleCreate(params *PostAlertingAPIV1RuleCreateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostAlertingAPIV1RuleCreateOK, error)

	PutAlertingAPIV1ActionUpdateActionID(params *PutAlertingAPIV1ActionUpdateActionIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutAlertingAPIV1ActionUpdateActionIDOK, error)

	PutAlertingAPIV1RuleUpdateRuleID(params *PutAlertingAPIV1RuleUpdateRuleIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutAlertingAPIV1RuleUpdateRuleIDOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
DeleteAlertingAPIV1ActionDeleteActionID deletes action

Deleting a single action for the given action id
*/
func (a *Client) DeleteAlertingAPIV1ActionDeleteActionID(params *DeleteAlertingAPIV1ActionDeleteActionIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteAlertingAPIV1ActionDeleteActionIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAlertingAPIV1ActionDeleteActionIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteAlertingAPIV1ActionDeleteActionID",
		Method:             "DELETE",
		PathPattern:        "/alerting/api/v1/action/delete/{actionId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteAlertingAPIV1ActionDeleteActionIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteAlertingAPIV1ActionDeleteActionIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteAlertingAPIV1ActionDeleteActionID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteAlertingAPIV1RuleDeleteRuleID deletes rule

Deleting a single rule for the given rule id
*/
func (a *Client) DeleteAlertingAPIV1RuleDeleteRuleID(params *DeleteAlertingAPIV1RuleDeleteRuleIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteAlertingAPIV1RuleDeleteRuleIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAlertingAPIV1RuleDeleteRuleIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteAlertingAPIV1RuleDeleteRuleID",
		Method:             "DELETE",
		PathPattern:        "/alerting/api/v1/rule/delete/{ruleId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteAlertingAPIV1RuleDeleteRuleIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteAlertingAPIV1RuleDeleteRuleIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteAlertingAPIV1RuleDeleteRuleID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAlertingAPIV1ActionList lists actions

returns list of all actions
*/
func (a *Client) GetAlertingAPIV1ActionList(params *GetAlertingAPIV1ActionListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAlertingAPIV1ActionListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAlertingAPIV1ActionListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetAlertingAPIV1ActionList",
		Method:             "GET",
		PathPattern:        "/alerting/api/v1/action/list",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAlertingAPIV1ActionListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAlertingAPIV1ActionListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAlertingAPIV1ActionList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAlertingAPIV1RuleList lists rules

returns list of all rules
*/
func (a *Client) GetAlertingAPIV1RuleList(params *GetAlertingAPIV1RuleListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAlertingAPIV1RuleListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAlertingAPIV1RuleListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetAlertingAPIV1RuleList",
		Method:             "GET",
		PathPattern:        "/alerting/api/v1/rule/list",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAlertingAPIV1RuleListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAlertingAPIV1RuleListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAlertingAPIV1RuleList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAlertingAPIV1RuleRuleIDTrigger triggers one rule

Trigger one rule manually
*/
func (a *Client) GetAlertingAPIV1RuleRuleIDTrigger(params *GetAlertingAPIV1RuleRuleIDTriggerParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAlertingAPIV1RuleRuleIDTriggerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAlertingAPIV1RuleRuleIDTriggerParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetAlertingAPIV1RuleRuleIDTrigger",
		Method:             "GET",
		PathPattern:        "/alerting/api/v1/rule/{ruleId}/trigger",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAlertingAPIV1RuleRuleIDTriggerReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAlertingAPIV1RuleRuleIDTriggerOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAlertingAPIV1RuleRuleIDTrigger: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAlertingAPIV1TriggerList lists triggers

returns list of all the triggers
*/
func (a *Client) GetAlertingAPIV1TriggerList(params *GetAlertingAPIV1TriggerListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAlertingAPIV1TriggerListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAlertingAPIV1TriggerListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetAlertingAPIV1TriggerList",
		Method:             "GET",
		PathPattern:        "/alerting/api/v1/trigger/list",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAlertingAPIV1TriggerListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAlertingAPIV1TriggerListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAlertingAPIV1TriggerList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostAlertingAPIV1ActionCreate creates action

create an action by the specified input
*/
func (a *Client) PostAlertingAPIV1ActionCreate(params *PostAlertingAPIV1ActionCreateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostAlertingAPIV1ActionCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAlertingAPIV1ActionCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostAlertingAPIV1ActionCreate",
		Method:             "POST",
		PathPattern:        "/alerting/api/v1/action/create",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostAlertingAPIV1ActionCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostAlertingAPIV1ActionCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostAlertingAPIV1ActionCreate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostAlertingAPIV1ActionJira creates jira action

Create action with jira url and header and body
*/
func (a *Client) PostAlertingAPIV1ActionJira(params *PostAlertingAPIV1ActionJiraParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostAlertingAPIV1ActionJiraOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAlertingAPIV1ActionJiraParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostAlertingAPIV1ActionJira",
		Method:             "POST",
		PathPattern:        "/alerting/api/v1/action/jira",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostAlertingAPIV1ActionJiraReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostAlertingAPIV1ActionJiraOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostAlertingAPIV1ActionJira: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostAlertingAPIV1ActionSlack creates slack action

Create action with slack url and body
*/
func (a *Client) PostAlertingAPIV1ActionSlack(params *PostAlertingAPIV1ActionSlackParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostAlertingAPIV1ActionSlackOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAlertingAPIV1ActionSlackParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostAlertingAPIV1ActionSlack",
		Method:             "POST",
		PathPattern:        "/alerting/api/v1/action/slack",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostAlertingAPIV1ActionSlackReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostAlertingAPIV1ActionSlackOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostAlertingAPIV1ActionSlack: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostAlertingAPIV1RuleCreate creates rule

create a rule by the specified input
*/
func (a *Client) PostAlertingAPIV1RuleCreate(params *PostAlertingAPIV1RuleCreateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostAlertingAPIV1RuleCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAlertingAPIV1RuleCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostAlertingAPIV1RuleCreate",
		Method:             "POST",
		PathPattern:        "/alerting/api/v1/rule/create",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostAlertingAPIV1RuleCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostAlertingAPIV1RuleCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostAlertingAPIV1RuleCreate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PutAlertingAPIV1ActionUpdateActionID updates action

Retrieving an action by the specified input
*/
func (a *Client) PutAlertingAPIV1ActionUpdateActionID(params *PutAlertingAPIV1ActionUpdateActionIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutAlertingAPIV1ActionUpdateActionIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutAlertingAPIV1ActionUpdateActionIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutAlertingAPIV1ActionUpdateActionID",
		Method:             "PUT",
		PathPattern:        "/alerting/api/v1/action/update/{actionId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutAlertingAPIV1ActionUpdateActionIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutAlertingAPIV1ActionUpdateActionIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutAlertingAPIV1ActionUpdateActionID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PutAlertingAPIV1RuleUpdateRuleID updates rule

Retrieving a rule by the specified input
*/
func (a *Client) PutAlertingAPIV1RuleUpdateRuleID(params *PutAlertingAPIV1RuleUpdateRuleIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutAlertingAPIV1RuleUpdateRuleIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutAlertingAPIV1RuleUpdateRuleIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutAlertingAPIV1RuleUpdateRuleID",
		Method:             "PUT",
		PathPattern:        "/alerting/api/v1/rule/update/{ruleId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutAlertingAPIV1RuleUpdateRuleIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutAlertingAPIV1RuleUpdateRuleIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutAlertingAPIV1RuleUpdateRuleID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
