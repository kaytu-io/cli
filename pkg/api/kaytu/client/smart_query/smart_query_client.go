// Code generated by go-swagger; DO NOT EDIT.

package smart_query

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new smart query API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for smart query API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	GetInventoryAPIV1Query(params *GetInventoryAPIV1QueryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetInventoryAPIV1QueryOK, error)

	GetInventoryAPIV1QueryCount(params *GetInventoryAPIV1QueryCountParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetInventoryAPIV1QueryCountOK, error)

	PostInventoryAPIV1QueryQueryID(params *PostInventoryAPIV1QueryQueryIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostInventoryAPIV1QueryQueryIDOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
GetInventoryAPIV1Query lists smart queries

Listing smart queries by specified filters
*/
func (a *Client) GetInventoryAPIV1Query(params *GetInventoryAPIV1QueryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetInventoryAPIV1QueryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetInventoryAPIV1QueryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetInventoryAPIV1Query",
		Method:             "GET",
		PathPattern:        "/inventory/api/v1/query",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetInventoryAPIV1QueryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetInventoryAPIV1QueryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetInventoryAPIV1Query: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetInventoryAPIV1QueryCount counts smart queries

Counting smart queries
*/
func (a *Client) GetInventoryAPIV1QueryCount(params *GetInventoryAPIV1QueryCountParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetInventoryAPIV1QueryCountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetInventoryAPIV1QueryCountParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetInventoryAPIV1QueryCount",
		Method:             "GET",
		PathPattern:        "/inventory/api/v1/query/count",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetInventoryAPIV1QueryCountReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetInventoryAPIV1QueryCountOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetInventoryAPIV1QueryCount: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	PostInventoryAPIV1QueryQueryID runs a specific smart query

	Run a specific smart query.

In order to get the results in CSV format, Accepts header must be filled with `text/csv` value.
Note that csv output doesn't process pagination and returns first 5000 records.
*/
func (a *Client) PostInventoryAPIV1QueryQueryID(params *PostInventoryAPIV1QueryQueryIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostInventoryAPIV1QueryQueryIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostInventoryAPIV1QueryQueryIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostInventoryAPIV1QueryQueryID",
		Method:             "POST",
		PathPattern:        "/inventory/api/v1/query/{queryId}",
		ProducesMediaTypes: []string{"application/json", "text/csv"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostInventoryAPIV1QueryQueryIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostInventoryAPIV1QueryQueryIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostInventoryAPIV1QueryQueryID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
