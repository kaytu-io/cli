// Code generated by go-swagger; DO NOT EDIT.

package users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new users API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for users API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteAuthAPIV1UserInvite(params *DeleteAuthAPIV1UserInviteParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteAuthAPIV1UserInviteOK, error)

	DeleteAuthAPIV1UserRoleBinding(params *DeleteAuthAPIV1UserRoleBindingParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteAuthAPIV1UserRoleBindingOK, error)

	GetAuthAPIV1UserRoleBindings(params *GetAuthAPIV1UserRoleBindingsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAuthAPIV1UserRoleBindingsOK, error)

	GetAuthAPIV1UserUserID(params *GetAuthAPIV1UserUserIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAuthAPIV1UserUserIDOK, error)

	GetAuthAPIV1UserUserIDWorkspaceMembership(params *GetAuthAPIV1UserUserIDWorkspaceMembershipParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAuthAPIV1UserUserIDWorkspaceMembershipOK, error)

	GetAuthAPIV1Users(params *GetAuthAPIV1UsersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAuthAPIV1UsersOK, error)

	GetAuthAPIV1WorkspaceRoleBindings(params *GetAuthAPIV1WorkspaceRoleBindingsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAuthAPIV1WorkspaceRoleBindingsOK, error)

	PostAuthAPIV1UserInvite(params *PostAuthAPIV1UserInviteParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostAuthAPIV1UserInviteOK, error)

	PutAuthAPIV1UserRoleBinding(params *PutAuthAPIV1UserRoleBindingParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutAuthAPIV1UserRoleBindingOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
DeleteAuthAPIV1UserInvite deletes invitation

Deletes user access to the specified workspace.
*/
func (a *Client) DeleteAuthAPIV1UserInvite(params *DeleteAuthAPIV1UserInviteParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteAuthAPIV1UserInviteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAuthAPIV1UserInviteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteAuthAPIV1UserInvite",
		Method:             "DELETE",
		PathPattern:        "/auth/api/v1/user/invite",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteAuthAPIV1UserInviteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteAuthAPIV1UserInviteOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteAuthAPIV1UserInvite: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteAuthAPIV1UserRoleBinding deletes user access

Deletes user access to the specified workspace.
*/
func (a *Client) DeleteAuthAPIV1UserRoleBinding(params *DeleteAuthAPIV1UserRoleBindingParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteAuthAPIV1UserRoleBindingOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAuthAPIV1UserRoleBindingParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteAuthAPIV1UserRoleBinding",
		Method:             "DELETE",
		PathPattern:        "/auth/api/v1/user/role/binding",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteAuthAPIV1UserRoleBindingReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteAuthAPIV1UserRoleBindingOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteAuthAPIV1UserRoleBinding: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	GetAuthAPIV1UserRoleBindings gets role bindings

	Gets the roles binded to a user.

RoleBinding defines the roles and actions a user can perform. There are currently three roles (admin, editor, viewer).
*/
func (a *Client) GetAuthAPIV1UserRoleBindings(params *GetAuthAPIV1UserRoleBindingsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAuthAPIV1UserRoleBindingsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAuthAPIV1UserRoleBindingsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetAuthAPIV1UserRoleBindings",
		Method:             "GET",
		PathPattern:        "/auth/api/v1/user/role/bindings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAuthAPIV1UserRoleBindingsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAuthAPIV1UserRoleBindingsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAuthAPIV1UserRoleBindings: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAuthAPIV1UserUserID gets user details

Get user details by user id.
*/
func (a *Client) GetAuthAPIV1UserUserID(params *GetAuthAPIV1UserUserIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAuthAPIV1UserUserIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAuthAPIV1UserUserIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetAuthAPIV1UserUserID",
		Method:             "GET",
		PathPattern:        "/auth/api/v1/user/{user_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAuthAPIV1UserUserIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAuthAPIV1UserUserIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAuthAPIV1UserUserID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAuthAPIV1UserUserIDWorkspaceMembership users workspaces

Returns a list of workspaces and the user role in it for the specified user.
*/
func (a *Client) GetAuthAPIV1UserUserIDWorkspaceMembership(params *GetAuthAPIV1UserUserIDWorkspaceMembershipParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAuthAPIV1UserUserIDWorkspaceMembershipOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAuthAPIV1UserUserIDWorkspaceMembershipParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetAuthAPIV1UserUserIDWorkspaceMembership",
		Method:             "GET",
		PathPattern:        "/auth/api/v1/user/{user_id}/workspace/membership",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAuthAPIV1UserUserIDWorkspaceMembershipReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAuthAPIV1UserUserIDWorkspaceMembershipOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAuthAPIV1UserUserIDWorkspaceMembership: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAuthAPIV1Users gets users

Gets a list of users with specified filters (filters are optional).
*/
func (a *Client) GetAuthAPIV1Users(params *GetAuthAPIV1UsersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAuthAPIV1UsersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAuthAPIV1UsersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetAuthAPIV1Users",
		Method:             "GET",
		PathPattern:        "/auth/api/v1/users",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAuthAPIV1UsersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAuthAPIV1UsersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAuthAPIV1Users: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAuthAPIV1WorkspaceRoleBindings workspaces user role bindings

RoleBinding defines the roles and actions a user can perform. There are currently three roles (admin, editor, viewer). The workspace path is based on the DNS such as (workspace1.app.keibi.io)
*/
func (a *Client) GetAuthAPIV1WorkspaceRoleBindings(params *GetAuthAPIV1WorkspaceRoleBindingsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAuthAPIV1WorkspaceRoleBindingsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAuthAPIV1WorkspaceRoleBindingsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetAuthAPIV1WorkspaceRoleBindings",
		Method:             "GET",
		PathPattern:        "/auth/api/v1/workspace/role/bindings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAuthAPIV1WorkspaceRoleBindingsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAuthAPIV1WorkspaceRoleBindingsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAuthAPIV1WorkspaceRoleBindings: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	PostAuthAPIV1UserInvite invites user

	Invites a user to a workspace with defined role.

by sending an email to the specified email address.
The user will be found by the email address.
*/
func (a *Client) PostAuthAPIV1UserInvite(params *PostAuthAPIV1UserInviteParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostAuthAPIV1UserInviteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAuthAPIV1UserInviteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostAuthAPIV1UserInvite",
		Method:             "POST",
		PathPattern:        "/auth/api/v1/user/invite",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostAuthAPIV1UserInviteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostAuthAPIV1UserInviteOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostAuthAPIV1UserInvite: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	PutAuthAPIV1UserRoleBinding updates user access

	User Access defines the roles of a user.

There are currently three roles (admin, editor, viewer).
User must exist before you can update its Role.
*/
func (a *Client) PutAuthAPIV1UserRoleBinding(params *PutAuthAPIV1UserRoleBindingParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutAuthAPIV1UserRoleBindingOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutAuthAPIV1UserRoleBindingParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutAuthAPIV1UserRoleBinding",
		Method:             "PUT",
		PathPattern:        "/auth/api/v1/user/role/binding",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutAuthAPIV1UserRoleBindingReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutAuthAPIV1UserRoleBindingOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutAuthAPIV1UserRoleBinding: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
