// Code generated by go-swagger; DO NOT EDIT.

package roles

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new roles API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for roles API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	GetAuthAPIV1RoleRoleNameKeys(params *GetAuthAPIV1RoleRoleNameKeysParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAuthAPIV1RoleRoleNameKeysOK, error)

	GetAuthAPIV1RoleRoleNameUsers(params *GetAuthAPIV1RoleRoleNameUsersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAuthAPIV1RoleRoleNameUsersOK, error)

	GetAuthAPIV1Roles(params *GetAuthAPIV1RolesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAuthAPIV1RolesOK, error)

	GetAuthAPIV1RolesRoleName(params *GetAuthAPIV1RolesRoleNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAuthAPIV1RolesRoleNameOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
GetAuthAPIV1RoleRoleNameKeys lists role keys

List Workspace Keys for Specified Role.
*/
func (a *Client) GetAuthAPIV1RoleRoleNameKeys(params *GetAuthAPIV1RoleRoleNameKeysParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAuthAPIV1RoleRoleNameKeysOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAuthAPIV1RoleRoleNameKeysParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetAuthAPIV1RoleRoleNameKeys",
		Method:             "GET",
		PathPattern:        "/auth/api/v1/role/{roleName}/keys",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAuthAPIV1RoleRoleNameKeysReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAuthAPIV1RoleRoleNameKeysOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAuthAPIV1RoleRoleNameKeys: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAuthAPIV1RoleRoleNameUsers lists role users

Returns a list of users in the workspace with the specified role.
*/
func (a *Client) GetAuthAPIV1RoleRoleNameUsers(params *GetAuthAPIV1RoleRoleNameUsersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAuthAPIV1RoleRoleNameUsersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAuthAPIV1RoleRoleNameUsersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetAuthAPIV1RoleRoleNameUsers",
		Method:             "GET",
		PathPattern:        "/auth/api/v1/role/{roleName}/users",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAuthAPIV1RoleRoleNameUsersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAuthAPIV1RoleRoleNameUsersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAuthAPIV1RoleRoleNameUsers: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAuthAPIV1Roles lists roles

Retrieve Role Information and User Count for Workspace.
*/
func (a *Client) GetAuthAPIV1Roles(params *GetAuthAPIV1RolesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAuthAPIV1RolesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAuthAPIV1RolesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetAuthAPIV1Roles",
		Method:             "GET",
		PathPattern:        "/auth/api/v1/roles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAuthAPIV1RolesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAuthAPIV1RolesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAuthAPIV1Roles: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAuthAPIV1RolesRoleName gets role details

Retrieves Role Details, Description, User Count, and User List for Workspace.
*/
func (a *Client) GetAuthAPIV1RolesRoleName(params *GetAuthAPIV1RolesRoleNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAuthAPIV1RolesRoleNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAuthAPIV1RolesRoleNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetAuthAPIV1RolesRoleName",
		Method:             "GET",
		PathPattern:        "/auth/api/v1/roles/{roleName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAuthAPIV1RolesRoleNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAuthAPIV1RolesRoleNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAuthAPIV1RolesRoleName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
