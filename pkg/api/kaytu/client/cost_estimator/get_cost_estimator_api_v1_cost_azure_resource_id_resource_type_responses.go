// Code generated by go-swagger; DO NOT EDIT.

package cost_estimator

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// GetCostEstimatorAPIV1CostAzureResourceIDResourceTypeReader is a Reader for the GetCostEstimatorAPIV1CostAzureResourceIDResourceType structure.
type GetCostEstimatorAPIV1CostAzureResourceIDResourceTypeReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetCostEstimatorAPIV1CostAzureResourceIDResourceTypeReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetCostEstimatorAPIV1CostAzureResourceIDResourceTypeOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		return nil, runtime.NewAPIError("[GET /cost_estimator/api/v1/cost/azure/{resourceId}/{resourceType}] GetCostEstimatorAPIV1CostAzureResourceIDResourceType", response, response.Code())
	}
}

// NewGetCostEstimatorAPIV1CostAzureResourceIDResourceTypeOK creates a GetCostEstimatorAPIV1CostAzureResourceIDResourceTypeOK with default headers values
func NewGetCostEstimatorAPIV1CostAzureResourceIDResourceTypeOK() *GetCostEstimatorAPIV1CostAzureResourceIDResourceTypeOK {
	return &GetCostEstimatorAPIV1CostAzureResourceIDResourceTypeOK{}
}

/*
GetCostEstimatorAPIV1CostAzureResourceIDResourceTypeOK describes a response with status code 200, with default header values.

OK
*/
type GetCostEstimatorAPIV1CostAzureResourceIDResourceTypeOK struct {
	Payload int64
}

// IsSuccess returns true when this get cost estimator Api v1 cost azure resource Id resource type o k response has a 2xx status code
func (o *GetCostEstimatorAPIV1CostAzureResourceIDResourceTypeOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get cost estimator Api v1 cost azure resource Id resource type o k response has a 3xx status code
func (o *GetCostEstimatorAPIV1CostAzureResourceIDResourceTypeOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get cost estimator Api v1 cost azure resource Id resource type o k response has a 4xx status code
func (o *GetCostEstimatorAPIV1CostAzureResourceIDResourceTypeOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get cost estimator Api v1 cost azure resource Id resource type o k response has a 5xx status code
func (o *GetCostEstimatorAPIV1CostAzureResourceIDResourceTypeOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get cost estimator Api v1 cost azure resource Id resource type o k response a status code equal to that given
func (o *GetCostEstimatorAPIV1CostAzureResourceIDResourceTypeOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get cost estimator Api v1 cost azure resource Id resource type o k response
func (o *GetCostEstimatorAPIV1CostAzureResourceIDResourceTypeOK) Code() int {
	return 200
}

func (o *GetCostEstimatorAPIV1CostAzureResourceIDResourceTypeOK) Error() string {
	return fmt.Sprintf("[GET /cost_estimator/api/v1/cost/azure/{resourceId}/{resourceType}][%d] getCostEstimatorApiV1CostAzureResourceIdResourceTypeOK  %+v", 200, o.Payload)
}

func (o *GetCostEstimatorAPIV1CostAzureResourceIDResourceTypeOK) String() string {
	return fmt.Sprintf("[GET /cost_estimator/api/v1/cost/azure/{resourceId}/{resourceType}][%d] getCostEstimatorApiV1CostAzureResourceIdResourceTypeOK  %+v", 200, o.Payload)
}

func (o *GetCostEstimatorAPIV1CostAzureResourceIDResourceTypeOK) GetPayload() int64 {
	return o.Payload
}

func (o *GetCostEstimatorAPIV1CostAzureResourceIDResourceTypeOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
