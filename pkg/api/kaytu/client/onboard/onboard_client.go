// Code generated by go-swagger; DO NOT EDIT.

package onboard

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new onboard API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for onboard API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteOnboardAPIV1CredentialCredentialID(params *DeleteOnboardAPIV1CredentialCredentialIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteOnboardAPIV1CredentialCredentialIDOK, error)

	DeleteOnboardAPIV1SourceSourceID(params *DeleteOnboardAPIV1SourceSourceIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteOnboardAPIV1SourceSourceIDOK, error)

	GetOnboardAPIV1CatalogConnectors(params *GetOnboardAPIV1CatalogConnectorsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOnboardAPIV1CatalogConnectorsOK, error)

	GetOnboardAPIV1CatalogMetrics(params *GetOnboardAPIV1CatalogMetricsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOnboardAPIV1CatalogMetricsOK, error)

	GetOnboardAPIV1ConnectionsCount(params *GetOnboardAPIV1ConnectionsCountParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOnboardAPIV1ConnectionsCountOK, error)

	GetOnboardAPIV1Connector(params *GetOnboardAPIV1ConnectorParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOnboardAPIV1ConnectorOK, error)

	GetOnboardAPIV1ConnectorConnectorName(params *GetOnboardAPIV1ConnectorConnectorNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOnboardAPIV1ConnectorConnectorNameOK, error)

	GetOnboardAPIV1Credential(params *GetOnboardAPIV1CredentialParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOnboardAPIV1CredentialOK, error)

	GetOnboardAPIV1CredentialCredentialID(params *GetOnboardAPIV1CredentialCredentialIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOnboardAPIV1CredentialCredentialIDOK, error)

	GetOnboardAPIV1CredentialCredentialIDHealthcheck(params *GetOnboardAPIV1CredentialCredentialIDHealthcheckParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOnboardAPIV1CredentialCredentialIDHealthcheckOK, error)

	GetOnboardAPIV1CredentialSourcesList(params *GetOnboardAPIV1CredentialSourcesListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOnboardAPIV1CredentialSourcesListOK, error)

	GetOnboardAPIV1SourceAccountAccountID(params *GetOnboardAPIV1SourceAccountAccountIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOnboardAPIV1SourceAccountAccountIDOK, error)

	GetOnboardAPIV1SourceSourceID(params *GetOnboardAPIV1SourceSourceIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOnboardAPIV1SourceSourceIDOK, error)

	GetOnboardAPIV1SourceSourceIDCredentials(params *GetOnboardAPIV1SourceSourceIDCredentialsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOnboardAPIV1SourceSourceIDCredentialsOK, error)

	GetOnboardAPIV1Sources(params *GetOnboardAPIV1SourcesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOnboardAPIV1SourcesOK, error)

	GetOnboardAPIV1SourcesCount(params *GetOnboardAPIV1SourcesCountParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOnboardAPIV1SourcesCountOK, error)

	PostOnboardAPIV1ConnectionsConnectionIDState(params *PostOnboardAPIV1ConnectionsConnectionIDStateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostOnboardAPIV1ConnectionsConnectionIDStateOK, error)

	PostOnboardAPIV1Credential(params *PostOnboardAPIV1CredentialParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostOnboardAPIV1CredentialOK, error)

	PostOnboardAPIV1CredentialCredentialIDAutoonboard(params *PostOnboardAPIV1CredentialCredentialIDAutoonboardParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostOnboardAPIV1CredentialCredentialIDAutoonboardOK, error)

	PostOnboardAPIV1CredentialCredentialIDDisable(params *PostOnboardAPIV1CredentialCredentialIDDisableParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostOnboardAPIV1CredentialCredentialIDDisableOK, error)

	PostOnboardAPIV1CredentialCredentialIDEnable(params *PostOnboardAPIV1CredentialCredentialIDEnableParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostOnboardAPIV1CredentialCredentialIDEnableOK, error)

	PostOnboardAPIV1SourceAws(params *PostOnboardAPIV1SourceAwsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostOnboardAPIV1SourceAwsOK, error)

	PostOnboardAPIV1SourceAzure(params *PostOnboardAPIV1SourceAzureParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostOnboardAPIV1SourceAzureOK, error)

	PostOnboardAPIV1SourceSourceIDHealthcheck(params *PostOnboardAPIV1SourceSourceIDHealthcheckParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostOnboardAPIV1SourceSourceIDHealthcheckOK, error)

	PostOnboardAPIV1Sources(params *PostOnboardAPIV1SourcesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostOnboardAPIV1SourcesOK, error)

	PutOnboardAPIV1CredentialCredentialID(params *PutOnboardAPIV1CredentialCredentialIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutOnboardAPIV1CredentialCredentialIDOK, error)

	PutOnboardAPIV1SourceSourceIDCredentials(params *PutOnboardAPIV1SourceSourceIDCredentialsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutOnboardAPIV1SourceSourceIDCredentialsOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
DeleteOnboardAPIV1CredentialCredentialID deletes credential

Delete credential
*/
func (a *Client) DeleteOnboardAPIV1CredentialCredentialID(params *DeleteOnboardAPIV1CredentialCredentialIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteOnboardAPIV1CredentialCredentialIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteOnboardAPIV1CredentialCredentialIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteOnboardAPIV1CredentialCredentialID",
		Method:             "DELETE",
		PathPattern:        "/onboard/api/v1/credential/{credentialId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteOnboardAPIV1CredentialCredentialIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteOnboardAPIV1CredentialCredentialIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteOnboardAPIV1CredentialCredentialID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteOnboardAPIV1SourceSourceID deletes a single source

Deleting a single source either AWS / Azure.
*/
func (a *Client) DeleteOnboardAPIV1SourceSourceID(params *DeleteOnboardAPIV1SourceSourceIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteOnboardAPIV1SourceSourceIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteOnboardAPIV1SourceSourceIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteOnboardAPIV1SourceSourceID",
		Method:             "DELETE",
		PathPattern:        "/onboard/api/v1/source/{sourceId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteOnboardAPIV1SourceSourceIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteOnboardAPIV1SourceSourceIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteOnboardAPIV1SourceSourceID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetOnboardAPIV1CatalogConnectors returns the list of connectors for catalog page
*/
func (a *Client) GetOnboardAPIV1CatalogConnectors(params *GetOnboardAPIV1CatalogConnectorsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOnboardAPIV1CatalogConnectorsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOnboardAPIV1CatalogConnectorsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetOnboardAPIV1CatalogConnectors",
		Method:             "GET",
		PathPattern:        "/onboard/api/v1/catalog/connectors",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetOnboardAPIV1CatalogConnectorsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetOnboardAPIV1CatalogConnectorsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetOnboardAPIV1CatalogConnectors: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetOnboardAPIV1CatalogMetrics returns the list of metrics for catalog page
*/
func (a *Client) GetOnboardAPIV1CatalogMetrics(params *GetOnboardAPIV1CatalogMetricsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOnboardAPIV1CatalogMetricsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOnboardAPIV1CatalogMetricsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetOnboardAPIV1CatalogMetrics",
		Method:             "GET",
		PathPattern:        "/onboard/api/v1/catalog/metrics",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetOnboardAPIV1CatalogMetricsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetOnboardAPIV1CatalogMetricsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetOnboardAPIV1CatalogMetrics: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetOnboardAPIV1ConnectionsCount returns a count of connections
*/
func (a *Client) GetOnboardAPIV1ConnectionsCount(params *GetOnboardAPIV1ConnectionsCountParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOnboardAPIV1ConnectionsCountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOnboardAPIV1ConnectionsCountParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetOnboardAPIV1ConnectionsCount",
		Method:             "GET",
		PathPattern:        "/onboard/api/v1/connections/count",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetOnboardAPIV1ConnectionsCountReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetOnboardAPIV1ConnectionsCountOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetOnboardAPIV1ConnectionsCount: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetOnboardAPIV1Connector gets connectors

Getting connectors
*/
func (a *Client) GetOnboardAPIV1Connector(params *GetOnboardAPIV1ConnectorParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOnboardAPIV1ConnectorOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOnboardAPIV1ConnectorParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetOnboardAPIV1Connector",
		Method:             "GET",
		PathPattern:        "/onboard/api/v1/connector",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetOnboardAPIV1ConnectorReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetOnboardAPIV1ConnectorOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetOnboardAPIV1Connector: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetOnboardAPIV1ConnectorConnectorName gets connector

Getting connector
*/
func (a *Client) GetOnboardAPIV1ConnectorConnectorName(params *GetOnboardAPIV1ConnectorConnectorNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOnboardAPIV1ConnectorConnectorNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOnboardAPIV1ConnectorConnectorNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetOnboardAPIV1ConnectorConnectorName",
		Method:             "GET",
		PathPattern:        "/onboard/api/v1/connector/{connectorName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetOnboardAPIV1ConnectorConnectorNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetOnboardAPIV1ConnectorConnectorNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetOnboardAPIV1ConnectorConnectorName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetOnboardAPIV1Credential lists credentials

List credentials
*/
func (a *Client) GetOnboardAPIV1Credential(params *GetOnboardAPIV1CredentialParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOnboardAPIV1CredentialOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOnboardAPIV1CredentialParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetOnboardAPIV1Credential",
		Method:             "GET",
		PathPattern:        "/onboard/api/v1/credential",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetOnboardAPIV1CredentialReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetOnboardAPIV1CredentialOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetOnboardAPIV1Credential: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetOnboardAPIV1CredentialCredentialID lists credentials

List credentials
*/
func (a *Client) GetOnboardAPIV1CredentialCredentialID(params *GetOnboardAPIV1CredentialCredentialIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOnboardAPIV1CredentialCredentialIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOnboardAPIV1CredentialCredentialIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetOnboardAPIV1CredentialCredentialID",
		Method:             "GET",
		PathPattern:        "/onboard/api/v1/credential/{credentialId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetOnboardAPIV1CredentialCredentialIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetOnboardAPIV1CredentialCredentialIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetOnboardAPIV1CredentialCredentialID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetOnboardAPIV1CredentialCredentialIDHealthcheck gets live credential health status
*/
func (a *Client) GetOnboardAPIV1CredentialCredentialIDHealthcheck(params *GetOnboardAPIV1CredentialCredentialIDHealthcheckParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOnboardAPIV1CredentialCredentialIDHealthcheckOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOnboardAPIV1CredentialCredentialIDHealthcheckParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetOnboardAPIV1CredentialCredentialIDHealthcheck",
		Method:             "GET",
		PathPattern:        "/onboard/api/v1/credential/{credentialId}/healthcheck",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetOnboardAPIV1CredentialCredentialIDHealthcheckReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetOnboardAPIV1CredentialCredentialIDHealthcheckOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetOnboardAPIV1CredentialCredentialIDHealthcheck: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetOnboardAPIV1CredentialSourcesList returns a list of sources

Returning a list of sources including both AWS and Azure unless filtered by Type.
*/
func (a *Client) GetOnboardAPIV1CredentialSourcesList(params *GetOnboardAPIV1CredentialSourcesListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOnboardAPIV1CredentialSourcesListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOnboardAPIV1CredentialSourcesListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetOnboardAPIV1CredentialSourcesList",
		Method:             "GET",
		PathPattern:        "/onboard/api/v1/credential/sources/list",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetOnboardAPIV1CredentialSourcesListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetOnboardAPIV1CredentialSourcesListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetOnboardAPIV1CredentialSourcesList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetOnboardAPIV1SourceAccountAccountID returns source by account id

Returning account source either AWS / Azure.
*/
func (a *Client) GetOnboardAPIV1SourceAccountAccountID(params *GetOnboardAPIV1SourceAccountAccountIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOnboardAPIV1SourceAccountAccountIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOnboardAPIV1SourceAccountAccountIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetOnboardAPIV1SourceAccountAccountID",
		Method:             "GET",
		PathPattern:        "/onboard/api/v1/source/account/{account_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetOnboardAPIV1SourceAccountAccountIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetOnboardAPIV1SourceAccountAccountIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetOnboardAPIV1SourceAccountAccountID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetOnboardAPIV1SourceSourceID returns a single source

Returning single source either AWS / Azure.
*/
func (a *Client) GetOnboardAPIV1SourceSourceID(params *GetOnboardAPIV1SourceSourceIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOnboardAPIV1SourceSourceIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOnboardAPIV1SourceSourceIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetOnboardAPIV1SourceSourceID",
		Method:             "GET",
		PathPattern:        "/onboard/api/v1/source/{sourceId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetOnboardAPIV1SourceSourceIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetOnboardAPIV1SourceSourceIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetOnboardAPIV1SourceSourceID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetOnboardAPIV1SourceSourceIDCredentials gets source credential
*/
func (a *Client) GetOnboardAPIV1SourceSourceIDCredentials(params *GetOnboardAPIV1SourceSourceIDCredentialsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOnboardAPIV1SourceSourceIDCredentialsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOnboardAPIV1SourceSourceIDCredentialsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetOnboardAPIV1SourceSourceIDCredentials",
		Method:             "GET",
		PathPattern:        "/onboard/api/v1/source/{sourceId}/credentials",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetOnboardAPIV1SourceSourceIDCredentialsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetOnboardAPIV1SourceSourceIDCredentialsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetOnboardAPIV1SourceSourceIDCredentials: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetOnboardAPIV1Sources returns a list of sources

Returning a list of sources including both AWS and Azure unless filtered by Type.
*/
func (a *Client) GetOnboardAPIV1Sources(params *GetOnboardAPIV1SourcesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOnboardAPIV1SourcesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOnboardAPIV1SourcesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetOnboardAPIV1Sources",
		Method:             "GET",
		PathPattern:        "/onboard/api/v1/sources",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetOnboardAPIV1SourcesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetOnboardAPIV1SourcesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetOnboardAPIV1Sources: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetOnboardAPIV1SourcesCount returns a count of sources

Returning a count of sources including both AWS and Azure unless filtered by Type.
*/
func (a *Client) GetOnboardAPIV1SourcesCount(params *GetOnboardAPIV1SourcesCountParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOnboardAPIV1SourcesCountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOnboardAPIV1SourcesCountParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetOnboardAPIV1SourcesCount",
		Method:             "GET",
		PathPattern:        "/onboard/api/v1/sources/count",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetOnboardAPIV1SourcesCountReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetOnboardAPIV1SourcesCountOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetOnboardAPIV1SourcesCount: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostOnboardAPIV1ConnectionsConnectionIDState enables a single source
*/
func (a *Client) PostOnboardAPIV1ConnectionsConnectionIDState(params *PostOnboardAPIV1ConnectionsConnectionIDStateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostOnboardAPIV1ConnectionsConnectionIDStateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostOnboardAPIV1ConnectionsConnectionIDStateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostOnboardAPIV1ConnectionsConnectionIDState",
		Method:             "POST",
		PathPattern:        "/onboard/api/v1/connections/{connectionId}/state",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostOnboardAPIV1ConnectionsConnectionIDStateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostOnboardAPIV1ConnectionsConnectionIDStateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostOnboardAPIV1ConnectionsConnectionIDState: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostOnboardAPIV1Credential creates connection credentials

Creating connection credentials
*/
func (a *Client) PostOnboardAPIV1Credential(params *PostOnboardAPIV1CredentialParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostOnboardAPIV1CredentialOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostOnboardAPIV1CredentialParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostOnboardAPIV1Credential",
		Method:             "POST",
		PathPattern:        "/onboard/api/v1/credential",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostOnboardAPIV1CredentialReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostOnboardAPIV1CredentialOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostOnboardAPIV1Credential: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostOnboardAPIV1CredentialCredentialIDAutoonboard onboards all available connections for a credential

Onboard all available connections for a credential
*/
func (a *Client) PostOnboardAPIV1CredentialCredentialIDAutoonboard(params *PostOnboardAPIV1CredentialCredentialIDAutoonboardParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostOnboardAPIV1CredentialCredentialIDAutoonboardOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostOnboardAPIV1CredentialCredentialIDAutoonboardParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostOnboardAPIV1CredentialCredentialIDAutoonboard",
		Method:             "POST",
		PathPattern:        "/onboard/api/v1/credential/{credentialId}/autoonboard",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostOnboardAPIV1CredentialCredentialIDAutoonboardReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostOnboardAPIV1CredentialCredentialIDAutoonboardOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostOnboardAPIV1CredentialCredentialIDAutoonboard: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostOnboardAPIV1CredentialCredentialIDDisable disables credential

Disable credential
*/
func (a *Client) PostOnboardAPIV1CredentialCredentialIDDisable(params *PostOnboardAPIV1CredentialCredentialIDDisableParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostOnboardAPIV1CredentialCredentialIDDisableOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostOnboardAPIV1CredentialCredentialIDDisableParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostOnboardAPIV1CredentialCredentialIDDisable",
		Method:             "POST",
		PathPattern:        "/onboard/api/v1/credential/{credentialId}/disable",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostOnboardAPIV1CredentialCredentialIDDisableReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostOnboardAPIV1CredentialCredentialIDDisableOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostOnboardAPIV1CredentialCredentialIDDisable: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostOnboardAPIV1CredentialCredentialIDEnable enables credential

Enable credential
*/
func (a *Client) PostOnboardAPIV1CredentialCredentialIDEnable(params *PostOnboardAPIV1CredentialCredentialIDEnableParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostOnboardAPIV1CredentialCredentialIDEnableOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostOnboardAPIV1CredentialCredentialIDEnableParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostOnboardAPIV1CredentialCredentialIDEnable",
		Method:             "POST",
		PathPattern:        "/onboard/api/v1/credential/{credentialId}/enable",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostOnboardAPIV1CredentialCredentialIDEnableReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostOnboardAPIV1CredentialCredentialIDEnableOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostOnboardAPIV1CredentialCredentialIDEnable: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostOnboardAPIV1SourceAws creates a w s source

Creating AWS source
*/
func (a *Client) PostOnboardAPIV1SourceAws(params *PostOnboardAPIV1SourceAwsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostOnboardAPIV1SourceAwsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostOnboardAPIV1SourceAwsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostOnboardAPIV1SourceAws",
		Method:             "POST",
		PathPattern:        "/onboard/api/v1/source/aws",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostOnboardAPIV1SourceAwsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostOnboardAPIV1SourceAwsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostOnboardAPIV1SourceAws: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostOnboardAPIV1SourceAzure creates azure source

Creating Azure source
*/
func (a *Client) PostOnboardAPIV1SourceAzure(params *PostOnboardAPIV1SourceAzureParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostOnboardAPIV1SourceAzureOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostOnboardAPIV1SourceAzureParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostOnboardAPIV1SourceAzure",
		Method:             "POST",
		PathPattern:        "/onboard/api/v1/source/azure",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostOnboardAPIV1SourceAzureReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostOnboardAPIV1SourceAzureOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostOnboardAPIV1SourceAzure: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostOnboardAPIV1SourceSourceIDHealthcheck gets live source health status
*/
func (a *Client) PostOnboardAPIV1SourceSourceIDHealthcheck(params *PostOnboardAPIV1SourceSourceIDHealthcheckParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostOnboardAPIV1SourceSourceIDHealthcheckOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostOnboardAPIV1SourceSourceIDHealthcheckParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostOnboardAPIV1SourceSourceIDHealthcheck",
		Method:             "POST",
		PathPattern:        "/onboard/api/v1/source/{sourceId}/healthcheck",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostOnboardAPIV1SourceSourceIDHealthcheckReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostOnboardAPIV1SourceSourceIDHealthcheckOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostOnboardAPIV1SourceSourceIDHealthcheck: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostOnboardAPIV1Sources returns a list of sources

Returning a list of sources including both AWS and Azure unless filtered by Type.
*/
func (a *Client) PostOnboardAPIV1Sources(params *PostOnboardAPIV1SourcesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostOnboardAPIV1SourcesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostOnboardAPIV1SourcesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostOnboardAPIV1Sources",
		Method:             "POST",
		PathPattern:        "/onboard/api/v1/sources",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostOnboardAPIV1SourcesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostOnboardAPIV1SourcesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostOnboardAPIV1Sources: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PutOnboardAPIV1CredentialCredentialID edits a credential by Id

Edit a credential by Id
*/
func (a *Client) PutOnboardAPIV1CredentialCredentialID(params *PutOnboardAPIV1CredentialCredentialIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutOnboardAPIV1CredentialCredentialIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutOnboardAPIV1CredentialCredentialIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutOnboardAPIV1CredentialCredentialID",
		Method:             "PUT",
		PathPattern:        "/onboard/api/v1/credential/{credentialId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutOnboardAPIV1CredentialCredentialIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutOnboardAPIV1CredentialCredentialIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutOnboardAPIV1CredentialCredentialID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PutOnboardAPIV1SourceSourceIDCredentials puts source credential
*/
func (a *Client) PutOnboardAPIV1SourceSourceIDCredentials(params *PutOnboardAPIV1SourceSourceIDCredentialsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutOnboardAPIV1SourceSourceIDCredentialsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutOnboardAPIV1SourceSourceIDCredentialsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutOnboardAPIV1SourceSourceIDCredentials",
		Method:             "PUT",
		PathPattern:        "/onboard/api/v1/source/{sourceId}/credentials",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutOnboardAPIV1SourceSourceIDCredentialsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutOnboardAPIV1SourceSourceIDCredentialsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutOnboardAPIV1SourceSourceIDCredentials: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
