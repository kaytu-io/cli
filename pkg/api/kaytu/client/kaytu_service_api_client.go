// Code generated by go-swagger; DO NOT EDIT.

package client

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"

	"github.com/kaytu-io/cli-program/pkg/api/kaytu/client/alerting"
	"github.com/kaytu-io/cli-program/pkg/api/kaytu/client/analytics"
	"github.com/kaytu-io/cli-program/pkg/api/kaytu/client/benchmarks_assignment"
	"github.com/kaytu-io/cli-program/pkg/api/kaytu/client/compliance"
	"github.com/kaytu-io/cli-program/pkg/api/kaytu/client/connection_groups"
	"github.com/kaytu-io/cli-program/pkg/api/kaytu/client/connections"
	"github.com/kaytu-io/cli-program/pkg/api/kaytu/client/cost_estimator"
	"github.com/kaytu-io/cli-program/pkg/api/kaytu/client/describe"
	"github.com/kaytu-io/cli-program/pkg/api/kaytu/client/insights"
	"github.com/kaytu-io/cli-program/pkg/api/kaytu/client/keys"
	"github.com/kaytu-io/cli-program/pkg/api/kaytu/client/metadata"
	"github.com/kaytu-io/cli-program/pkg/api/kaytu/client/onboard"
	"github.com/kaytu-io/cli-program/pkg/api/kaytu/client/resource"
	"github.com/kaytu-io/cli-program/pkg/api/kaytu/client/smart_query"
	"github.com/kaytu-io/cli-program/pkg/api/kaytu/client/stack"
	"github.com/kaytu-io/cli-program/pkg/api/kaytu/client/users"
	"github.com/kaytu-io/cli-program/pkg/api/kaytu/client/workspace"
)

// Default kaytu service API HTTP client.
var Default = NewHTTPClient(nil)

const (
	// DefaultHost is the default Host
	// found in Meta (info) section of spec file
	DefaultHost string = "api.kaytu.io"
	// DefaultBasePath is the default BasePath
	// found in Meta (info) section of spec file
	DefaultBasePath string = "/"
)

// DefaultSchemes are the default schemes found in Meta (info) section of spec file
var DefaultSchemes = []string{"https"}

// NewHTTPClient creates a new kaytu service API HTTP client.
func NewHTTPClient(formats strfmt.Registry) *KaytuServiceAPI {
	return NewHTTPClientWithConfig(formats, nil)
}

// NewHTTPClientWithConfig creates a new kaytu service API HTTP client,
// using a customizable transport config.
func NewHTTPClientWithConfig(formats strfmt.Registry, cfg *TransportConfig) *KaytuServiceAPI {
	// ensure nullable parameters have default
	if cfg == nil {
		cfg = DefaultTransportConfig()
	}

	// create transport and client
	transport := httptransport.New(cfg.Host, cfg.BasePath, cfg.Schemes)
	return New(transport, formats)
}

// New creates a new kaytu service API client
func New(transport runtime.ClientTransport, formats strfmt.Registry) *KaytuServiceAPI {
	// ensure nullable parameters have default
	if formats == nil {
		formats = strfmt.Default
	}

	cli := new(KaytuServiceAPI)
	cli.Transport = transport
	cli.Alerting = alerting.New(transport, formats)
	cli.Analytics = analytics.New(transport, formats)
	cli.BenchmarksAssignment = benchmarks_assignment.New(transport, formats)
	cli.Compliance = compliance.New(transport, formats)
	cli.ConnectionGroups = connection_groups.New(transport, formats)
	cli.Connections = connections.New(transport, formats)
	cli.CostEstimator = cost_estimator.New(transport, formats)
	cli.Describe = describe.New(transport, formats)
	cli.Insights = insights.New(transport, formats)
	cli.Keys = keys.New(transport, formats)
	cli.Metadata = metadata.New(transport, formats)
	cli.Onboard = onboard.New(transport, formats)
	cli.Resource = resource.New(transport, formats)
	cli.SmartQuery = smart_query.New(transport, formats)
	cli.Stack = stack.New(transport, formats)
	cli.Users = users.New(transport, formats)
	cli.Workspace = workspace.New(transport, formats)
	return cli
}

// DefaultTransportConfig creates a TransportConfig with the
// default settings taken from the meta section of the spec file.
func DefaultTransportConfig() *TransportConfig {
	return &TransportConfig{
		Host:     DefaultHost,
		BasePath: DefaultBasePath,
		Schemes:  DefaultSchemes,
	}
}

// TransportConfig contains the transport related info,
// found in the meta section of the spec file.
type TransportConfig struct {
	Host     string
	BasePath string
	Schemes  []string
}

// WithHost overrides the default host,
// provided by the meta section of the spec file.
func (cfg *TransportConfig) WithHost(host string) *TransportConfig {
	cfg.Host = host
	return cfg
}

// WithBasePath overrides the default basePath,
// provided by the meta section of the spec file.
func (cfg *TransportConfig) WithBasePath(basePath string) *TransportConfig {
	cfg.BasePath = basePath
	return cfg
}

// WithSchemes overrides the default schemes,
// provided by the meta section of the spec file.
func (cfg *TransportConfig) WithSchemes(schemes []string) *TransportConfig {
	cfg.Schemes = schemes
	return cfg
}

// KaytuServiceAPI is a client for kaytu service API
type KaytuServiceAPI struct {
	Alerting alerting.ClientService

	Analytics analytics.ClientService

	BenchmarksAssignment benchmarks_assignment.ClientService

	Compliance compliance.ClientService

	ConnectionGroups connection_groups.ClientService

	Connections connections.ClientService

	CostEstimator cost_estimator.ClientService

	Describe describe.ClientService

	Insights insights.ClientService

	Keys keys.ClientService

	Metadata metadata.ClientService

	Onboard onboard.ClientService

	Resource resource.ClientService

	SmartQuery smart_query.ClientService

	Stack stack.ClientService

	Users users.ClientService

	Workspace workspace.ClientService

	Transport runtime.ClientTransport
}

// SetTransport changes the transport on the client and all its subresources
func (c *KaytuServiceAPI) SetTransport(transport runtime.ClientTransport) {
	c.Transport = transport
	c.Alerting.SetTransport(transport)
	c.Analytics.SetTransport(transport)
	c.BenchmarksAssignment.SetTransport(transport)
	c.Compliance.SetTransport(transport)
	c.ConnectionGroups.SetTransport(transport)
	c.Connections.SetTransport(transport)
	c.CostEstimator.SetTransport(transport)
	c.Describe.SetTransport(transport)
	c.Insights.SetTransport(transport)
	c.Keys.SetTransport(transport)
	c.Metadata.SetTransport(transport)
	c.Onboard.SetTransport(transport)
	c.Resource.SetTransport(transport)
	c.SmartQuery.SetTransport(transport)
	c.Stack.SetTransport(transport)
	c.Users.SetTransport(transport)
	c.Workspace.SetTransport(transport)
}
