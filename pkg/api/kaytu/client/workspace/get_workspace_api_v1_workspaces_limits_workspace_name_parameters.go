// Code generated by go-swagger; DO NOT EDIT.

package workspace

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetWorkspaceAPIV1WorkspacesLimitsWorkspaceNameParams creates a new GetWorkspaceAPIV1WorkspacesLimitsWorkspaceNameParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetWorkspaceAPIV1WorkspacesLimitsWorkspaceNameParams() *GetWorkspaceAPIV1WorkspacesLimitsWorkspaceNameParams {
	return &GetWorkspaceAPIV1WorkspacesLimitsWorkspaceNameParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetWorkspaceAPIV1WorkspacesLimitsWorkspaceNameParamsWithTimeout creates a new GetWorkspaceAPIV1WorkspacesLimitsWorkspaceNameParams object
// with the ability to set a timeout on a request.
func NewGetWorkspaceAPIV1WorkspacesLimitsWorkspaceNameParamsWithTimeout(timeout time.Duration) *GetWorkspaceAPIV1WorkspacesLimitsWorkspaceNameParams {
	return &GetWorkspaceAPIV1WorkspacesLimitsWorkspaceNameParams{
		timeout: timeout,
	}
}

// NewGetWorkspaceAPIV1WorkspacesLimitsWorkspaceNameParamsWithContext creates a new GetWorkspaceAPIV1WorkspacesLimitsWorkspaceNameParams object
// with the ability to set a context for a request.
func NewGetWorkspaceAPIV1WorkspacesLimitsWorkspaceNameParamsWithContext(ctx context.Context) *GetWorkspaceAPIV1WorkspacesLimitsWorkspaceNameParams {
	return &GetWorkspaceAPIV1WorkspacesLimitsWorkspaceNameParams{
		Context: ctx,
	}
}

// NewGetWorkspaceAPIV1WorkspacesLimitsWorkspaceNameParamsWithHTTPClient creates a new GetWorkspaceAPIV1WorkspacesLimitsWorkspaceNameParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetWorkspaceAPIV1WorkspacesLimitsWorkspaceNameParamsWithHTTPClient(client *http.Client) *GetWorkspaceAPIV1WorkspacesLimitsWorkspaceNameParams {
	return &GetWorkspaceAPIV1WorkspacesLimitsWorkspaceNameParams{
		HTTPClient: client,
	}
}

/*
GetWorkspaceAPIV1WorkspacesLimitsWorkspaceNameParams contains all the parameters to send to the API endpoint

	for the get workspace API v1 workspaces limits workspace name operation.

	Typically these are written to a http.Request.
*/
type GetWorkspaceAPIV1WorkspacesLimitsWorkspaceNameParams struct {

	/* IgnoreUsage.

	   Ignore usage
	*/
	IgnoreUsage *bool

	/* WorkspaceName.

	   Workspace Name
	*/
	WorkspaceName string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get workspace API v1 workspaces limits workspace name params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetWorkspaceAPIV1WorkspacesLimitsWorkspaceNameParams) WithDefaults() *GetWorkspaceAPIV1WorkspacesLimitsWorkspaceNameParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get workspace API v1 workspaces limits workspace name params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetWorkspaceAPIV1WorkspacesLimitsWorkspaceNameParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get workspace API v1 workspaces limits workspace name params
func (o *GetWorkspaceAPIV1WorkspacesLimitsWorkspaceNameParams) WithTimeout(timeout time.Duration) *GetWorkspaceAPIV1WorkspacesLimitsWorkspaceNameParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get workspace API v1 workspaces limits workspace name params
func (o *GetWorkspaceAPIV1WorkspacesLimitsWorkspaceNameParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get workspace API v1 workspaces limits workspace name params
func (o *GetWorkspaceAPIV1WorkspacesLimitsWorkspaceNameParams) WithContext(ctx context.Context) *GetWorkspaceAPIV1WorkspacesLimitsWorkspaceNameParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get workspace API v1 workspaces limits workspace name params
func (o *GetWorkspaceAPIV1WorkspacesLimitsWorkspaceNameParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get workspace API v1 workspaces limits workspace name params
func (o *GetWorkspaceAPIV1WorkspacesLimitsWorkspaceNameParams) WithHTTPClient(client *http.Client) *GetWorkspaceAPIV1WorkspacesLimitsWorkspaceNameParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get workspace API v1 workspaces limits workspace name params
func (o *GetWorkspaceAPIV1WorkspacesLimitsWorkspaceNameParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithIgnoreUsage adds the ignoreUsage to the get workspace API v1 workspaces limits workspace name params
func (o *GetWorkspaceAPIV1WorkspacesLimitsWorkspaceNameParams) WithIgnoreUsage(ignoreUsage *bool) *GetWorkspaceAPIV1WorkspacesLimitsWorkspaceNameParams {
	o.SetIgnoreUsage(ignoreUsage)
	return o
}

// SetIgnoreUsage adds the ignoreUsage to the get workspace API v1 workspaces limits workspace name params
func (o *GetWorkspaceAPIV1WorkspacesLimitsWorkspaceNameParams) SetIgnoreUsage(ignoreUsage *bool) {
	o.IgnoreUsage = ignoreUsage
}

// WithWorkspaceName adds the workspaceName to the get workspace API v1 workspaces limits workspace name params
func (o *GetWorkspaceAPIV1WorkspacesLimitsWorkspaceNameParams) WithWorkspaceName(workspaceName string) *GetWorkspaceAPIV1WorkspacesLimitsWorkspaceNameParams {
	o.SetWorkspaceName(workspaceName)
	return o
}

// SetWorkspaceName adds the workspaceName to the get workspace API v1 workspaces limits workspace name params
func (o *GetWorkspaceAPIV1WorkspacesLimitsWorkspaceNameParams) SetWorkspaceName(workspaceName string) {
	o.WorkspaceName = workspaceName
}

// WriteToRequest writes these params to a swagger request
func (o *GetWorkspaceAPIV1WorkspacesLimitsWorkspaceNameParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.IgnoreUsage != nil {

		// query param ignore_usage
		var qrIgnoreUsage bool

		if o.IgnoreUsage != nil {
			qrIgnoreUsage = *o.IgnoreUsage
		}
		qIgnoreUsage := swag.FormatBool(qrIgnoreUsage)
		if qIgnoreUsage != "" {

			if err := r.SetQueryParam("ignore_usage", qIgnoreUsage); err != nil {
				return err
			}
		}
	}

	// path param workspace_name
	if err := r.SetPathParam("workspace_name", o.WorkspaceName); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
