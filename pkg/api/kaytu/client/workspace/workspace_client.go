// Code generated by go-swagger; DO NOT EDIT.

package workspace

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new workspace API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for workspace API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteWorkspaceAPIV1WorkspaceWorkspaceID(params *DeleteWorkspaceAPIV1WorkspaceWorkspaceIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteWorkspaceAPIV1WorkspaceWorkspaceIDOK, error)

	GetWorkspaceAPIV1WorkspaceWorkspaceID(params *GetWorkspaceAPIV1WorkspaceWorkspaceIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetWorkspaceAPIV1WorkspaceWorkspaceIDOK, error)

	GetWorkspaceAPIV1Workspaces(params *GetWorkspaceAPIV1WorkspacesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetWorkspaceAPIV1WorkspacesOK, error)

	GetWorkspaceAPIV1WorkspacesByidWorkspaceID(params *GetWorkspaceAPIV1WorkspacesByidWorkspaceIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetWorkspaceAPIV1WorkspacesByidWorkspaceIDOK, error)

	GetWorkspaceAPIV1WorkspacesLimitsByidWorkspaceID(params *GetWorkspaceAPIV1WorkspacesLimitsByidWorkspaceIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetWorkspaceAPIV1WorkspacesLimitsByidWorkspaceIDOK, error)

	GetWorkspaceAPIV1WorkspacesLimitsWorkspaceName(params *GetWorkspaceAPIV1WorkspacesLimitsWorkspaceNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetWorkspaceAPIV1WorkspacesLimitsWorkspaceNameOK, error)

	PostWorkspaceAPIV1Workspace(params *PostWorkspaceAPIV1WorkspaceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostWorkspaceAPIV1WorkspaceOK, error)

	PostWorkspaceAPIV1WorkspaceWorkspaceIDName(params *PostWorkspaceAPIV1WorkspaceWorkspaceIDNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostWorkspaceAPIV1WorkspaceWorkspaceIDNameOK, error)

	PostWorkspaceAPIV1WorkspaceWorkspaceIDOrganization(params *PostWorkspaceAPIV1WorkspaceWorkspaceIDOrganizationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostWorkspaceAPIV1WorkspaceWorkspaceIDOrganizationOK, error)

	PostWorkspaceAPIV1WorkspaceWorkspaceIDOwner(params *PostWorkspaceAPIV1WorkspaceWorkspaceIDOwnerParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostWorkspaceAPIV1WorkspaceWorkspaceIDOwnerOK, error)

	PostWorkspaceAPIV1WorkspaceWorkspaceIDResume(params *PostWorkspaceAPIV1WorkspaceWorkspaceIDResumeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostWorkspaceAPIV1WorkspaceWorkspaceIDResumeOK, error)

	PostWorkspaceAPIV1WorkspaceWorkspaceIDSuspend(params *PostWorkspaceAPIV1WorkspaceWorkspaceIDSuspendParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostWorkspaceAPIV1WorkspaceWorkspaceIDSuspendOK, error)

	PostWorkspaceAPIV1WorkspaceWorkspaceIDTier(params *PostWorkspaceAPIV1WorkspaceWorkspaceIDTierParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostWorkspaceAPIV1WorkspaceWorkspaceIDTierOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
DeleteWorkspaceAPIV1WorkspaceWorkspaceID deletes workspace for workspace service

Delete workspace with workspace id
*/
func (a *Client) DeleteWorkspaceAPIV1WorkspaceWorkspaceID(params *DeleteWorkspaceAPIV1WorkspaceWorkspaceIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteWorkspaceAPIV1WorkspaceWorkspaceIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteWorkspaceAPIV1WorkspaceWorkspaceIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteWorkspaceAPIV1WorkspaceWorkspaceID",
		Method:             "DELETE",
		PathPattern:        "/workspace/api/v1/workspace/{workspace_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteWorkspaceAPIV1WorkspaceWorkspaceIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteWorkspaceAPIV1WorkspaceWorkspaceIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteWorkspaceAPIV1WorkspaceWorkspaceID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetWorkspaceAPIV1WorkspaceWorkspaceID gets workspace for workspace service

Get workspace with workspace id
*/
func (a *Client) GetWorkspaceAPIV1WorkspaceWorkspaceID(params *GetWorkspaceAPIV1WorkspaceWorkspaceIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetWorkspaceAPIV1WorkspaceWorkspaceIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetWorkspaceAPIV1WorkspaceWorkspaceIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetWorkspaceAPIV1WorkspaceWorkspaceID",
		Method:             "GET",
		PathPattern:        "/workspace/api/v1/workspace/{workspace_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetWorkspaceAPIV1WorkspaceWorkspaceIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetWorkspaceAPIV1WorkspaceWorkspaceIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetWorkspaceAPIV1WorkspaceWorkspaceID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetWorkspaceAPIV1Workspaces lists all workspaces with owner id

Returns all workspaces with owner id
*/
func (a *Client) GetWorkspaceAPIV1Workspaces(params *GetWorkspaceAPIV1WorkspacesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetWorkspaceAPIV1WorkspacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetWorkspaceAPIV1WorkspacesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetWorkspaceAPIV1Workspaces",
		Method:             "GET",
		PathPattern:        "/workspace/api/v1/workspaces",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetWorkspaceAPIV1WorkspacesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetWorkspaceAPIV1WorkspacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetWorkspaceAPIV1Workspaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetWorkspaceAPIV1WorkspacesByidWorkspaceID gets workspace
*/
func (a *Client) GetWorkspaceAPIV1WorkspacesByidWorkspaceID(params *GetWorkspaceAPIV1WorkspacesByidWorkspaceIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetWorkspaceAPIV1WorkspacesByidWorkspaceIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetWorkspaceAPIV1WorkspacesByidWorkspaceIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetWorkspaceAPIV1WorkspacesByidWorkspaceID",
		Method:             "GET",
		PathPattern:        "/workspace/api/v1/workspaces/byid/{workspace_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetWorkspaceAPIV1WorkspacesByidWorkspaceIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetWorkspaceAPIV1WorkspacesByidWorkspaceIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetWorkspaceAPIV1WorkspacesByidWorkspaceID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetWorkspaceAPIV1WorkspacesLimitsByidWorkspaceID gets workspace limits
*/
func (a *Client) GetWorkspaceAPIV1WorkspacesLimitsByidWorkspaceID(params *GetWorkspaceAPIV1WorkspacesLimitsByidWorkspaceIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetWorkspaceAPIV1WorkspacesLimitsByidWorkspaceIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetWorkspaceAPIV1WorkspacesLimitsByidWorkspaceIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetWorkspaceAPIV1WorkspacesLimitsByidWorkspaceID",
		Method:             "GET",
		PathPattern:        "/workspace/api/v1/workspaces/limits/byid/{workspace_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetWorkspaceAPIV1WorkspacesLimitsByidWorkspaceIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetWorkspaceAPIV1WorkspacesLimitsByidWorkspaceIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetWorkspaceAPIV1WorkspacesLimitsByidWorkspaceID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetWorkspaceAPIV1WorkspacesLimitsWorkspaceName gets workspace limits
*/
func (a *Client) GetWorkspaceAPIV1WorkspacesLimitsWorkspaceName(params *GetWorkspaceAPIV1WorkspacesLimitsWorkspaceNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetWorkspaceAPIV1WorkspacesLimitsWorkspaceNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetWorkspaceAPIV1WorkspacesLimitsWorkspaceNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetWorkspaceAPIV1WorkspacesLimitsWorkspaceName",
		Method:             "GET",
		PathPattern:        "/workspace/api/v1/workspaces/limits/{workspace_name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetWorkspaceAPIV1WorkspacesLimitsWorkspaceNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetWorkspaceAPIV1WorkspacesLimitsWorkspaceNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetWorkspaceAPIV1WorkspacesLimitsWorkspaceName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostWorkspaceAPIV1Workspace creates workspace for workspace service

Returns workspace created
*/
func (a *Client) PostWorkspaceAPIV1Workspace(params *PostWorkspaceAPIV1WorkspaceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostWorkspaceAPIV1WorkspaceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostWorkspaceAPIV1WorkspaceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostWorkspaceAPIV1Workspace",
		Method:             "POST",
		PathPattern:        "/workspace/api/v1/workspace",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostWorkspaceAPIV1WorkspaceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostWorkspaceAPIV1WorkspaceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostWorkspaceAPIV1Workspace: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostWorkspaceAPIV1WorkspaceWorkspaceIDName changes name of workspace
*/
func (a *Client) PostWorkspaceAPIV1WorkspaceWorkspaceIDName(params *PostWorkspaceAPIV1WorkspaceWorkspaceIDNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostWorkspaceAPIV1WorkspaceWorkspaceIDNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostWorkspaceAPIV1WorkspaceWorkspaceIDNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostWorkspaceAPIV1WorkspaceWorkspaceIDName",
		Method:             "POST",
		PathPattern:        "/workspace/api/v1/workspace/{workspace_id}/name",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostWorkspaceAPIV1WorkspaceWorkspaceIDNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostWorkspaceAPIV1WorkspaceWorkspaceIDNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostWorkspaceAPIV1WorkspaceWorkspaceIDName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostWorkspaceAPIV1WorkspaceWorkspaceIDOrganization changes organization of workspace
*/
func (a *Client) PostWorkspaceAPIV1WorkspaceWorkspaceIDOrganization(params *PostWorkspaceAPIV1WorkspaceWorkspaceIDOrganizationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostWorkspaceAPIV1WorkspaceWorkspaceIDOrganizationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostWorkspaceAPIV1WorkspaceWorkspaceIDOrganizationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostWorkspaceAPIV1WorkspaceWorkspaceIDOrganization",
		Method:             "POST",
		PathPattern:        "/workspace/api/v1/workspace/{workspace_id}/organization",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostWorkspaceAPIV1WorkspaceWorkspaceIDOrganizationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostWorkspaceAPIV1WorkspaceWorkspaceIDOrganizationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostWorkspaceAPIV1WorkspaceWorkspaceIDOrganization: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostWorkspaceAPIV1WorkspaceWorkspaceIDOwner changes ownership of workspace
*/
func (a *Client) PostWorkspaceAPIV1WorkspaceWorkspaceIDOwner(params *PostWorkspaceAPIV1WorkspaceWorkspaceIDOwnerParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostWorkspaceAPIV1WorkspaceWorkspaceIDOwnerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostWorkspaceAPIV1WorkspaceWorkspaceIDOwnerParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostWorkspaceAPIV1WorkspaceWorkspaceIDOwner",
		Method:             "POST",
		PathPattern:        "/workspace/api/v1/workspace/{workspace_id}/owner",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostWorkspaceAPIV1WorkspaceWorkspaceIDOwnerReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostWorkspaceAPIV1WorkspaceWorkspaceIDOwnerOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostWorkspaceAPIV1WorkspaceWorkspaceIDOwner: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostWorkspaceAPIV1WorkspaceWorkspaceIDResume resumes workspace
*/
func (a *Client) PostWorkspaceAPIV1WorkspaceWorkspaceIDResume(params *PostWorkspaceAPIV1WorkspaceWorkspaceIDResumeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostWorkspaceAPIV1WorkspaceWorkspaceIDResumeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostWorkspaceAPIV1WorkspaceWorkspaceIDResumeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostWorkspaceAPIV1WorkspaceWorkspaceIDResume",
		Method:             "POST",
		PathPattern:        "/workspace/api/v1/workspace/{workspace_id}/resume",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostWorkspaceAPIV1WorkspaceWorkspaceIDResumeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostWorkspaceAPIV1WorkspaceWorkspaceIDResumeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostWorkspaceAPIV1WorkspaceWorkspaceIDResume: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostWorkspaceAPIV1WorkspaceWorkspaceIDSuspend suspends workspace
*/
func (a *Client) PostWorkspaceAPIV1WorkspaceWorkspaceIDSuspend(params *PostWorkspaceAPIV1WorkspaceWorkspaceIDSuspendParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostWorkspaceAPIV1WorkspaceWorkspaceIDSuspendOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostWorkspaceAPIV1WorkspaceWorkspaceIDSuspendParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostWorkspaceAPIV1WorkspaceWorkspaceIDSuspend",
		Method:             "POST",
		PathPattern:        "/workspace/api/v1/workspace/{workspace_id}/suspend",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostWorkspaceAPIV1WorkspaceWorkspaceIDSuspendReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostWorkspaceAPIV1WorkspaceWorkspaceIDSuspendOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostWorkspaceAPIV1WorkspaceWorkspaceIDSuspend: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostWorkspaceAPIV1WorkspaceWorkspaceIDTier changes tier of workspace
*/
func (a *Client) PostWorkspaceAPIV1WorkspaceWorkspaceIDTier(params *PostWorkspaceAPIV1WorkspaceWorkspaceIDTierParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostWorkspaceAPIV1WorkspaceWorkspaceIDTierOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostWorkspaceAPIV1WorkspaceWorkspaceIDTierParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostWorkspaceAPIV1WorkspaceWorkspaceIDTier",
		Method:             "POST",
		PathPattern:        "/workspace/api/v1/workspace/{workspace_id}/tier",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostWorkspaceAPIV1WorkspaceWorkspaceIDTierReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostWorkspaceAPIV1WorkspaceWorkspaceIDTierOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostWorkspaceAPIV1WorkspaceWorkspaceIDTier: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
