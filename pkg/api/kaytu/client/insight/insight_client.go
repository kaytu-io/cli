// Code generated by go-swagger; DO NOT EDIT.

package insight

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new insight API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for insight API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	GetInventoryAPIV2Insights(params *GetInventoryAPIV2InsightsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetInventoryAPIV2InsightsOK, error)

	GetInventoryAPIV2InsightsInsightID(params *GetInventoryAPIV2InsightsInsightIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetInventoryAPIV2InsightsInsightIDOK, error)

	GetInventoryAPIV2InsightsInsightIDTrend(params *GetInventoryAPIV2InsightsInsightIDTrendParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetInventoryAPIV2InsightsInsightIDTrendOK, error)

	GetInventoryAPIV2InsightsJobJobID(params *GetInventoryAPIV2InsightsJobJobIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetInventoryAPIV2InsightsJobJobIDOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
GetInventoryAPIV2Insights lists insight results

List all insight results for the given insightIds - this mostly for internal usage, use compliance api for full api
*/
func (a *Client) GetInventoryAPIV2Insights(params *GetInventoryAPIV2InsightsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetInventoryAPIV2InsightsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetInventoryAPIV2InsightsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetInventoryAPIV2Insights",
		Method:             "GET",
		PathPattern:        "/inventory/api/v2/insights",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetInventoryAPIV2InsightsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetInventoryAPIV2InsightsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetInventoryAPIV2Insights: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetInventoryAPIV2InsightsInsightID gets insight result by id

Get insight results for the given insightIds - this mostly for internal usage, use compliance api for full api
*/
func (a *Client) GetInventoryAPIV2InsightsInsightID(params *GetInventoryAPIV2InsightsInsightIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetInventoryAPIV2InsightsInsightIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetInventoryAPIV2InsightsInsightIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetInventoryAPIV2InsightsInsightID",
		Method:             "GET",
		PathPattern:        "/inventory/api/v2/insights/{insightId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetInventoryAPIV2InsightsInsightIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetInventoryAPIV2InsightsInsightIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetInventoryAPIV2InsightsInsightID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetInventoryAPIV2InsightsInsightIDTrend gets insight trend data

Get an insight trend data by id and time window - this mostly for internal usage, use compliance api for full api
*/
func (a *Client) GetInventoryAPIV2InsightsInsightIDTrend(params *GetInventoryAPIV2InsightsInsightIDTrendParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetInventoryAPIV2InsightsInsightIDTrendOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetInventoryAPIV2InsightsInsightIDTrendParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetInventoryAPIV2InsightsInsightIDTrend",
		Method:             "GET",
		PathPattern:        "/inventory/api/v2/insights/{insightId}/trend",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetInventoryAPIV2InsightsInsightIDTrendReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetInventoryAPIV2InsightsInsightIDTrendOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetInventoryAPIV2InsightsInsightIDTrend: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetInventoryAPIV2InsightsJobJobID gets insight result by job ID

Get insight result for the given JobId - this mostly for internal usage, use compliance api for full api
*/
func (a *Client) GetInventoryAPIV2InsightsJobJobID(params *GetInventoryAPIV2InsightsJobJobIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetInventoryAPIV2InsightsJobJobIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetInventoryAPIV2InsightsJobJobIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetInventoryAPIV2InsightsJobJobID",
		Method:             "GET",
		PathPattern:        "/inventory/api/v2/insights/job/{jobId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetInventoryAPIV2InsightsJobJobIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetInventoryAPIV2InsightsJobJobIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetInventoryAPIV2InsightsJobJobID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
