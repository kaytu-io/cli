// Code generated by go-swagger; DO NOT EDIT.

package analytics

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new analytics API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for analytics API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	GetInventoryAPIV2AnalyticsCategories(params *GetInventoryAPIV2AnalyticsCategoriesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetInventoryAPIV2AnalyticsCategoriesOK, error)

	GetInventoryAPIV2AnalyticsCompositionKey(params *GetInventoryAPIV2AnalyticsCompositionKeyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetInventoryAPIV2AnalyticsCompositionKeyOK, error)

	GetInventoryAPIV2AnalyticsMetric(params *GetInventoryAPIV2AnalyticsMetricParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetInventoryAPIV2AnalyticsMetricOK, error)

	GetInventoryAPIV2AnalyticsMetricsList(params *GetInventoryAPIV2AnalyticsMetricsListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetInventoryAPIV2AnalyticsMetricsListOK, error)

	GetInventoryAPIV2AnalyticsMetricsMetricID(params *GetInventoryAPIV2AnalyticsMetricsMetricIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetInventoryAPIV2AnalyticsMetricsMetricIDOK, error)

	GetInventoryAPIV2AnalyticsSpendComposition(params *GetInventoryAPIV2AnalyticsSpendCompositionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetInventoryAPIV2AnalyticsSpendCompositionOK, error)

	GetInventoryAPIV2AnalyticsSpendMetric(params *GetInventoryAPIV2AnalyticsSpendMetricParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetInventoryAPIV2AnalyticsSpendMetricOK, error)

	GetInventoryAPIV2AnalyticsSpendTable(params *GetInventoryAPIV2AnalyticsSpendTableParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetInventoryAPIV2AnalyticsSpendTableOK, error)

	GetInventoryAPIV2AnalyticsSpendTrend(params *GetInventoryAPIV2AnalyticsSpendTrendParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetInventoryAPIV2AnalyticsSpendTrendOK, error)

	GetInventoryAPIV2AnalyticsTable(params *GetInventoryAPIV2AnalyticsTableParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetInventoryAPIV2AnalyticsTableOK, error)

	GetInventoryAPIV2AnalyticsTag(params *GetInventoryAPIV2AnalyticsTagParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetInventoryAPIV2AnalyticsTagOK, error)

	GetInventoryAPIV2AnalyticsTrend(params *GetInventoryAPIV2AnalyticsTrendParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetInventoryAPIV2AnalyticsTrendOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
GetInventoryAPIV2AnalyticsCategories lists analytics categories

Retrieving list of categories for analytics
*/
func (a *Client) GetInventoryAPIV2AnalyticsCategories(params *GetInventoryAPIV2AnalyticsCategoriesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetInventoryAPIV2AnalyticsCategoriesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetInventoryAPIV2AnalyticsCategoriesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetInventoryAPIV2AnalyticsCategories",
		Method:             "GET",
		PathPattern:        "/inventory/api/v2/analytics/categories",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetInventoryAPIV2AnalyticsCategoriesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetInventoryAPIV2AnalyticsCategoriesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetInventoryAPIV2AnalyticsCategories: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetInventoryAPIV2AnalyticsCompositionKey lists analytics composition

Retrieving tag values with the most resources for the given key.
*/
func (a *Client) GetInventoryAPIV2AnalyticsCompositionKey(params *GetInventoryAPIV2AnalyticsCompositionKeyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetInventoryAPIV2AnalyticsCompositionKeyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetInventoryAPIV2AnalyticsCompositionKeyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetInventoryAPIV2AnalyticsCompositionKey",
		Method:             "GET",
		PathPattern:        "/inventory/api/v2/analytics/composition/{key}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetInventoryAPIV2AnalyticsCompositionKeyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetInventoryAPIV2AnalyticsCompositionKeyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetInventoryAPIV2AnalyticsCompositionKey: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetInventoryAPIV2AnalyticsMetric lists analytics metrics

Retrieving list of analytics with metrics of each type based on the given input filters.
*/
func (a *Client) GetInventoryAPIV2AnalyticsMetric(params *GetInventoryAPIV2AnalyticsMetricParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetInventoryAPIV2AnalyticsMetricOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetInventoryAPIV2AnalyticsMetricParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetInventoryAPIV2AnalyticsMetric",
		Method:             "GET",
		PathPattern:        "/inventory/api/v2/analytics/metric",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetInventoryAPIV2AnalyticsMetricReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetInventoryAPIV2AnalyticsMetricOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetInventoryAPIV2AnalyticsMetric: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetInventoryAPIV2AnalyticsMetricsList lists metrics

Returns list of metrics
*/
func (a *Client) GetInventoryAPIV2AnalyticsMetricsList(params *GetInventoryAPIV2AnalyticsMetricsListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetInventoryAPIV2AnalyticsMetricsListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetInventoryAPIV2AnalyticsMetricsListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetInventoryAPIV2AnalyticsMetricsList",
		Method:             "GET",
		PathPattern:        "/inventory/api/v2/analytics/metrics/list",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetInventoryAPIV2AnalyticsMetricsListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetInventoryAPIV2AnalyticsMetricsListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetInventoryAPIV2AnalyticsMetricsList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetInventoryAPIV2AnalyticsMetricsMetricID lists metrics

Returns list of metrics
*/
func (a *Client) GetInventoryAPIV2AnalyticsMetricsMetricID(params *GetInventoryAPIV2AnalyticsMetricsMetricIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetInventoryAPIV2AnalyticsMetricsMetricIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetInventoryAPIV2AnalyticsMetricsMetricIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetInventoryAPIV2AnalyticsMetricsMetricID",
		Method:             "GET",
		PathPattern:        "/inventory/api/v2/analytics/metrics/{metric_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetInventoryAPIV2AnalyticsMetricsMetricIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetInventoryAPIV2AnalyticsMetricsMetricIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetInventoryAPIV2AnalyticsMetricsMetricID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetInventoryAPIV2AnalyticsSpendComposition lists cost composition

Retrieving the cost composition with respect to specified filters. Retrieving information such as the total cost for the given time range, and the top services by cost.
*/
func (a *Client) GetInventoryAPIV2AnalyticsSpendComposition(params *GetInventoryAPIV2AnalyticsSpendCompositionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetInventoryAPIV2AnalyticsSpendCompositionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetInventoryAPIV2AnalyticsSpendCompositionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetInventoryAPIV2AnalyticsSpendComposition",
		Method:             "GET",
		PathPattern:        "/inventory/api/v2/analytics/spend/composition",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetInventoryAPIV2AnalyticsSpendCompositionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetInventoryAPIV2AnalyticsSpendCompositionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetInventoryAPIV2AnalyticsSpendComposition: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetInventoryAPIV2AnalyticsSpendMetric lists spend metrics

Retrieving cost metrics with respect to specified filters. The API returns information such as the total cost and costs per each service based on the specified filters.
*/
func (a *Client) GetInventoryAPIV2AnalyticsSpendMetric(params *GetInventoryAPIV2AnalyticsSpendMetricParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetInventoryAPIV2AnalyticsSpendMetricOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetInventoryAPIV2AnalyticsSpendMetricParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetInventoryAPIV2AnalyticsSpendMetric",
		Method:             "GET",
		PathPattern:        "/inventory/api/v2/analytics/spend/metric",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetInventoryAPIV2AnalyticsSpendMetricReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetInventoryAPIV2AnalyticsSpendMetricOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetInventoryAPIV2AnalyticsSpendMetric: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetInventoryAPIV2AnalyticsSpendTable gets spend trend

Returns spend table with respect to the dimension and granularity
*/
func (a *Client) GetInventoryAPIV2AnalyticsSpendTable(params *GetInventoryAPIV2AnalyticsSpendTableParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetInventoryAPIV2AnalyticsSpendTableOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetInventoryAPIV2AnalyticsSpendTableParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetInventoryAPIV2AnalyticsSpendTable",
		Method:             "GET",
		PathPattern:        "/inventory/api/v2/analytics/spend/table",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetInventoryAPIV2AnalyticsSpendTableReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetInventoryAPIV2AnalyticsSpendTableOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetInventoryAPIV2AnalyticsSpendTable: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetInventoryAPIV2AnalyticsSpendTrend gets cost trend

Retrieving a list of costs over the course of the specified time frame based on the given input filters. If startTime and endTime are empty, the API returns the last month trend.
*/
func (a *Client) GetInventoryAPIV2AnalyticsSpendTrend(params *GetInventoryAPIV2AnalyticsSpendTrendParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetInventoryAPIV2AnalyticsSpendTrendOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetInventoryAPIV2AnalyticsSpendTrendParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetInventoryAPIV2AnalyticsSpendTrend",
		Method:             "GET",
		PathPattern:        "/inventory/api/v2/analytics/spend/trend",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetInventoryAPIV2AnalyticsSpendTrendReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetInventoryAPIV2AnalyticsSpendTrendOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetInventoryAPIV2AnalyticsSpendTrend: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetInventoryAPIV2AnalyticsTable gets assets table

Returns asset table with respect to the dimension and granularity
*/
func (a *Client) GetInventoryAPIV2AnalyticsTable(params *GetInventoryAPIV2AnalyticsTableParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetInventoryAPIV2AnalyticsTableOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetInventoryAPIV2AnalyticsTableParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetInventoryAPIV2AnalyticsTable",
		Method:             "GET",
		PathPattern:        "/inventory/api/v2/analytics/table",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetInventoryAPIV2AnalyticsTableReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetInventoryAPIV2AnalyticsTableOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetInventoryAPIV2AnalyticsTable: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetInventoryAPIV2AnalyticsTag lists analytics tags

Retrieving a list of tag keys with their possible values for all analytic metrics.
*/
func (a *Client) GetInventoryAPIV2AnalyticsTag(params *GetInventoryAPIV2AnalyticsTagParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetInventoryAPIV2AnalyticsTagOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetInventoryAPIV2AnalyticsTagParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetInventoryAPIV2AnalyticsTag",
		Method:             "GET",
		PathPattern:        "/inventory/api/v2/analytics/tag",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetInventoryAPIV2AnalyticsTagReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetInventoryAPIV2AnalyticsTagOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetInventoryAPIV2AnalyticsTag: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetInventoryAPIV2AnalyticsTrend gets metric trend

Retrieving a list of resource counts over the course of the specified time frame based on the given input filters
*/
func (a *Client) GetInventoryAPIV2AnalyticsTrend(params *GetInventoryAPIV2AnalyticsTrendParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetInventoryAPIV2AnalyticsTrendOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetInventoryAPIV2AnalyticsTrendParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetInventoryAPIV2AnalyticsTrend",
		Method:             "GET",
		PathPattern:        "/inventory/api/v2/analytics/trend",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetInventoryAPIV2AnalyticsTrendReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetInventoryAPIV2AnalyticsTrendOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetInventoryAPIV2AnalyticsTrend: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
